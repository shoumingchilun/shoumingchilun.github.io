<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>operating system2</title>
    <url>/2024/03/02/test/operating/</url>
    <content><![CDATA[<h1 id="虚拟化CPU"><a href="#虚拟化CPU" class="headerlink" title="虚拟化CPU"></a>虚拟化CPU</h1><p>在一些硬件的帮助下，操作系统可以提供仿佛有无数个CPU的假象，虽然CPU只有一个。<br>将实时上只有单个的CPU，转换成仿佛无限的CPU，让多个程序仿佛在一起运行，就称为虚拟化CPU。<br>（在极简化的冯诺依曼计算模型中，处理器从内存中获得一条指令，对其解码，执行，执行完后再执行下一条指令，直到程序完成。在这种情景中，单CPU应该同时只能运行一个程序才对。）<br>有了无数个CPU的假象后，也会引发一些问题，比如不同的程序运行时间的安排之类的事情，那由操作系统的策略来决定。<br>详情见：抽象：进程</p>
<h1 id="虚拟化内存"><a href="#虚拟化内存" class="headerlink" title="虚拟化内存"></a>虚拟化内存</h1><p>一个经过抽象化的物理内存模型，其本质就是一个（挺大的）字节数组。<br>当我们要进行读、写、更新时，我们必须指明被操作数据的地址（写和更新还要指明新数据是什么）。<br>看起来我们只能在一个地址存放一个数据，但经过虚拟化内存后，我们可以实现一个效果：程序A可以在地址0:200存储一个1，程序B在地址0:200存储一个2，虽然存储的位置看起来是一样的，但他们存储的数据并不会互相覆盖。<br>实际上，操作系统中的每个进程有独属于自己的virtual address space。虚拟地址空间是映射到物理内存上的（其中有联系，但一般来说不可能完全一样），不同的进程无法影响到不属于自己的虚拟地址空间（即其他进程所使用的地址空间）。<br>也可以理解为，每个进程都有独属于自己的物理地址空间，而这是怎么分配的以后再说（比如什么实存管理虚存管理）。<br>详情见：抽象：地址空间</p>
<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p>并发就是让操作系统可以同时处理很多事情，但不幸的是，并发会造成一系列的（深刻而又有趣的）问题，所以并发也用来代指这一系列问题。<br>我们已经学了太多多线程的错误案例了（比如java多线程API、go的协程），并发会造成的问题就包含那些。<br>详情见：抽象：线程</p>
<h1 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h1><p>内存中的数据如果一断电，就会消失（SO我就一直有个问题，要是一直不断电，那不就能用内存来当硬盘了？），所以我们需要硬件和软件（比如百度云）来持久地存储数据。<br>而常见的硬件有磁盘（hard drive）、固态硬盘（Solid-State Drive）等。（还有磁带！）<br>操作系统常用文件系统来负责对磁盘的管理，文件系统会做很多很多事情，比如向底层存储设备发出I&#x2F;O请求，以读取或更新现有结构（真的很复杂，因为要了解各种低级设备的接口什么的，而且文件系统在实现访问、管理数据时还有更加繁琐的细节，比如写入协议、文件系统的数据结构等等等等），所以操作系统提供了一种通过系统调用来访问设备的标准和简单的方法。<br>比起在使用内存时需要的虚拟地址空间，在使用硬盘时我们则更关注文件共享。<br>详情见抽象：文件和目录与API</p>
<h1 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h1><p>通过上面4个概念，我们知道了操作系统干了哪些事情：<br>1.获取和管理各种资源，比如CPU、内存、磁盘，并虚拟化<br>2.处理与并发相关的一系列问题<br>3.持久地存储文件，保证它们的安全<br>设计和实现操作系统的目标：（老实说，直接讲这玩意是不是有点没必要？毕竟还没到上手造的时候）<br>1.高性能：最小化系统的开销（尽量不要在方便用户使用的同时放弃了性能）<br>a.减少时间开销<br>b.减少空间开销<br>2.隔离：应用程序之间和操作系统与应用程序之间的保护<br>a.保护操作系统不被应用程序损害<br>b.保护其他程序不被恶意程序损害<br>此外还有可靠性、能源效率、安全性、移动性等目标，也很重要（这里不讲只是单纯因为书上也只是一笔带过，其实还是挺重要的）。<br>简单历史<br>（真的很简单的历史）<br>1.早期操作系统：就是库函数，一次运行一个程序，还要有个操作员管理。<br>2.超越库-保护<br>a.出现了系统调用，将操作系统分为了用户模式和内核模式。用户模式下操作系统被硬件限制了应用程序的功能，而内核模式下操作系统可以完全访问系统的硬件。<br>b.应用程序开始是在用户模式下的，当它发起了系统调用后，硬件将控制转移到预先设定好的trap hanlder中，同时将特权级别提升到内核模式；当系统调用完成时，操作系统使用return-from-trap指令返还控制权给用户，同时将特权级别降到用户模式。（相当于有了权限概念的过程调用，要进行特定操作时必须由操作系统的特定函数来完成）<br>3.多道程序时代：操作系统从一次运行一个作业变成了加载大量作业到内存再快速在之间切换。（因为I&#x2F;O作业很慢，我们希望在等待I&#x2F;O时还能够充分利用CPU）<br>4.摩登时代：出现了小型计算机和个人计算机（不过又出现了不少原来在多道程序时已经改善了的bug）</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>除了上面的那些玩意，像什么图形设备和网络在操作系统中也很重要，建议学了这本书之后可以去了解一下。</p>
]]></content>
      <categories>
        <category>a</category>
        <category>b</category>
        <category>c</category>
      </categories>
      <tags>
        <tag>1</tag>
        <tag>2</tag>
        <tag>3</tag>
      </tags>
  </entry>
</search>
