<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>分布式架构：事务</title>
    <link href="/2024/04/19/%E7%9F%A5%E8%AF%86/%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/%E3%80%8A%E5%87%A4%E5%87%B0%E6%9E%B6%E6%9E%84%E3%80%8B/distributed_transaction/"/>
    <url>/2024/04/19/%E7%9F%A5%E8%AF%86/%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/%E3%80%8A%E5%87%A4%E5%87%B0%E6%9E%B6%E6%9E%84%E3%80%8B/distributed_transaction/</url>
    
    <content type="html"><![CDATA[<p>事务几乎存在于每一个信息系统中，其保证了<strong>系统中所有的数据都是符合期望的，且相互关联的数据之间不会产生矛盾（一致性）</strong>。</p><p>按照数据库的经典理论，要达成这个目标，需要三方面共同努力来保障：<br><strong>原子性（Atomic）</strong>：在同一项业务处理过程中，事务保证了对多个数据的修改，要么同时成功，要么同时被撤销。<br><strong>隔离性（Isolation）</strong>：在不同的业务处理过程中，事务保证了各自业务正在读、写的数据互相独立，不会彼此影响。<br><strong>持久性（Durability）</strong>：事务应当保证所有成功被提交的数据修改都能够正确地被持久化，不丢失数据。</p><p>如今，事务的概念已不再局限于数据库本身，所有需要保证数据一致性的应用场景，包括但不限于数据库、事务内存、缓存、消息队列、分布式存储，等等，都有可能会用到事务。</p><ul><li>当一个服务<strong>只使用一个数据源</strong>时，通过 A、I、D 来获得一致性是最经典的做法，也是相对容易的。此时，多个并发事务所读写的数据能够被数据源感知是否存在冲突，<strong>并发事务的读写在时间线上的最终顺序是由数据源来确定的</strong>，这种事务间一致性被称为 <strong>“内部一致性”</strong>。</li><li>当一个服务<strong>使用到多个不同的数据源</strong>，甚至多个不同服务同时涉及多个不同的数据源时，问题就变得相对困难了许多。此时，并发执行甚至是先后执行的多个事务，在时间线上的顺序并不由任何一个数据源来决定，这种涉及多个数据源的事务间一致性被称为 <strong>“外部一致性”</strong>。</li></ul><p>外部一致性问题通常很难再使用 A、I、D 来解决，因为这样需要付出很大乃至不切实际的代价；但是外部一致性又是分布式系统中必然会遇到且必须要解决的问题，为此我们要转变观念，将一致性从“是或否”的二元属性转变为可以按不同强度分开讨论的多元属性，在确保代价可承受的前提下获得强度尽可能高的一致性保障，也正因如此，事务处理才从一个具体操作上的“编程问题”上升成一个需要全局权衡的“架构问题”。</p><h1 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h1><p><strong>本地事务</strong>是最基础的一种事务解决方案，只适用于<strong>单个服务使用单个数据源</strong>的场景。从应用角度看，它是直接依赖于数据源本身提供的事务能力来工作的，在程序代码层面，最多只能对事务接口做一层标准化的包装（如JDBC接口），并不能深入参与到事务的运作过程当中，事务的开启、终止、提交、回滚、嵌套、设置隔离级别，乃至与应用代码贴近的事务传播方式，全部都要依赖底层数据源的支持才能工作。</p><blockquote><p>本文不会介绍相关的内容，刚兴趣的可自行去了解相关的文章，如<a href="/2024/03/21/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_log/" title="MySQL：日志">MySQL：日志</a>、<a href="/2024/03/22/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_concurrent/" title="MySQL：并发">MySQL：并发</a>、<a href="https://jingyecn.top:18080/architect-perspective/general-architecture/transaction/local.html">凤凰架构-本地事务</a>等。</p></blockquote><h1 id="全局事务"><a href="#全局事务" class="headerlink" title="全局事务"></a>全局事务</h1><p><strong>全局事务（Global Transaction）</strong>是一种在分布式环境中仍追求强一致性的事务处理方案。</p><p>全局事务涉及两个核心概念：</p><ul><li><strong>事务管理器（Transaction Manager）</strong>：全局存在，用于协调全局事务。</li><li><strong>资源管理器（Resource Manager）</strong>：局部存在，用于驱动本地事务。</li></ul><p>一个事务管理器和多个资源管理器之间可以形成通信桥梁，通过协调多个数据源的一致动作，实现全局事务的统一提交或者统一回滚。</p><blockquote><p>Java中的JTA，即JSR 907 Java Transaction API，实际上也是使用该思路实现的全局事务，其涉及到两个接口：</p><ul><li>事务管理器的接口：javax.transaction.TransactionManager。这套接口是给 Java EE 服务器提供容器事务（由容器自动负责事务管理）使用的，还提供了另外一套javax.transaction.UserTransaction接口，用于通过程序代码手动开启、提交和回滚事务。</li><li>满足 XA 规范的资源定义接口：javax.transaction.xa.XAResource，任何资源（JDBC、JMS 等等）如果想要支持 JTA，只要实现 XAResource 接口中的方法即可。</li></ul><p>（XA事务处理框架由X&#x2F;Open组织提出，其定义了事务管理器和资源管理器之间的通信接口。）</p></blockquote><h2 id="场景说明"><a href="#场景说明" class="headerlink" title="场景说明"></a>场景说明</h2><p>我们将假设一个场景，用于让事务处理从本地事务向全局事务过渡。<br>现在存在用户余额、商品库存、物流系统三个相关数据源，购物的流程是：</p><ol><li>用户购买货物，减去余额。</li><li>仓库取出货物，减去库存。</li><li>物流系统发送货物，创建相关信息。</li></ol><p>使用伪代码描述如果是本地事务时的全过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyOneThing</span><span class="hljs-params">(PaymentBill bill)</span> &#123;<br>    <span class="hljs-comment">//1. 开启事务</span><br>    transaction.begin();<br><span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//2. 执行业务逻辑</span><br>        userService.subtractBalance(bill.getUserID(),bill.getMoney());<br>        warehouseService.minusInventory(bill.getItems());<br>        logisticsService.deliverGoods(bill.getItems(),bill.getBuyerInfo());<br>        <span class="hljs-comment">//3.1 提交事务</span><br>        transaction.commit();<br>&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>        <span class="hljs-comment">//3.2 回滚事务</span><br>        transaction.rollback();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果购物、取货、发货的过程都是成功的，那么提交事务即可；如果发生异常，那么回滚即可。</p><p>但是如果存在多个数据源，则该代码结构会存在问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyOneThing</span><span class="hljs-params">(PaymentBill bill)</span> &#123;<br>    <span class="hljs-comment">//1. 开启事务</span><br>    userTransaction.begin();<br>    warehouseTransaction.begin();<br>    logisticsTransaction.begin();<br><span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//2. 执行业务逻辑</span><br>        userService.subtractBalance(bill.getUserID(),bill.getMoney());<br>        warehouseService.minusInventory(bill.getItems());<br>        logisticsService.deliverGoods(bill.getItems(),bill.getBuyerInfo());<br>        <span class="hljs-comment">//3.1 提交事务</span><br>        userTransaction.commit();<br>        warehouseTransaction.commit();<br>        logisticsTransaction.commit();<br>&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>        <span class="hljs-comment">//3.2 回滚事务</span><br>        userTransaction.rollback();<br>        warehouseTransaction.rollback();<br>        logisticsTransaction.rollback();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看上去没有问题，但是如果在提交事务时抛出异常，比如执行<code>logisticsTransaction.commit();</code>出现异常，进行回滚时由于<code>userTransaction</code>和<code>userTransaction</code>已经<code>commit</code>了，会导致回滚无效。</p><h2 id="两段式提交"><a href="#两段式提交" class="headerlink" title="两段式提交"></a>两段式提交</h2><p>为了解决提交期间可能出现的异常，XA将事务提交拆分成为两阶段过程：</p><ul><li><strong>准备阶段</strong>：又称投票阶段。在这一阶段，事务管理器询问事务的所有资源管理器是否准备好提交，资源管理器如果已经准备好提交则回复<code>Prepared</code>，否则回复 <code>Non-Prepared</code>。对于数据库来说，<strong>准备操作是在重做日志中记录全部事务提交操作所要做的内容</strong>，它与本地事务中真正提交的区别只是暂不写入最后一条Commit Record而已。</li><li><strong>提交阶段</strong>：又称执行阶段，事务管理器如果在上一阶段收到所有事务资源管理器回复的<code>Prepared</code>消息，则先自己在本地持久化事务状态为<code>Commit</code>，在此操作完成后向所有资源管理器发送<code>Commit</code>指令，所有资源管理器立即执行提交操作；否则，任意一个资源管理器回复了<code>Non-Prepared</code>消息，或任意一个资源管理器超时未回复，事务管理器将自己的事务状态持久化为<code>Abort</code>之后，向所有资源管理器发送<code>Abort</code>指令，资源管理器立即执行回滚操作。对于数据库来说，这个阶段的提交操作应是很轻量的，仅仅是持久化一条<code>Commit Record</code>而已，通常能够快速完成，只有收到<code>Abort</code>指令时，才需要根据回滚日志清理已提交的数据，这可能是相对重负载的操作。<br>示意图：<br><img src="/2024/04/19/%E7%9F%A5%E8%AF%86/%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/%E3%80%8A%E5%87%A4%E5%87%B0%E6%9E%B6%E6%9E%84%E3%80%8B/distributed_transaction/%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.svg"><br>以上这两个过程被称为<strong>两段式提交（2 Phase Commit，2PC）</strong>协议。该协议要求：</li></ul><ol><li><strong>网络在提交阶段的短时间内是可靠的，即提交阶段不会丢失消息。（或可以丢失消息，但不会传递错误的消息）</strong>两段式提交中投票阶段失败了可以补救（回滚），而提交阶段失败了无法补救（不再改变提交或回滚的结果，只能等崩溃的节点重新恢复），因而此阶段耗时应尽可能短，这也是为了尽量控制网络风险的考虑。</li><li><strong>因为网络分区、机器崩溃或者其他原因而导致失联的节点最终能够恢复，不会永久性地处于失联状态。</strong>由于在准备阶段已经写入了完整的重做日志，所以当失联机器一旦恢复，就能够从日志中找出已准备妥当但并未提交的事务数据，并向事务管理器查询该事务的状态，确定下一步应该进行提交还是回滚操作。</li></ol><p>二阶段提交的缺点：</p><ul><li><strong>单点问题</strong>：资源管理器宕机，可以一段时间后从事务管理器中获得事务的执行情况进行回滚或提交，不会影响整体执行情况；但是事务管理器宕机，会导致所有事务无法执行，所有资源管理器必须等待事务管理器恢复。</li><li><strong>性能问题</strong>：两段提交过程中，涉及两次远程服务调用，三次数据持久化（准备阶段写重做日志，事务管理器做状态持久化，提交阶段在日志写入 Commit Record），整个过程将持续到资源管理器集群中最慢的那一个处理操作结束为止。</li><li><strong>一致性风险</strong>：提交阶段，如果事务管理器刚刚记录Commit阶段，这时候网络忽然被断开（或者事务管理器宕机），无法向所有资源管理器发出<code>Commit</code>指令，会导致部分数据（事务管理器的）已提交，但部分数据（资源管理器的）既未提交，也没有办法回滚，产生了数据不一致的问题。<ul><li>存在一段强一致性无法达成的时间，并且会根据资源管理器处理超时的不同策略导致不同程度的数据不一致风险：如果此时未收到指令的资源管理器进入等待状态，维持事务的锁定或预备状态，并等待事务管理器恢复或者新的事务管理器接管，可最大程度减少数据不一致风险；如果直接进行回滚操作，就会导致数据的不一致。</li></ul></li></ul><blockquote><p>FLP不可能原理：如果宕机最后不能恢复，那就不存在任何一种分布式协议可以正确地达成一致性结果。</p></blockquote><h2 id="三段式提交"><a href="#三段式提交" class="headerlink" title="三段式提交"></a>三段式提交</h2><p>为了缓解两段式提交协议的一部分缺陷，后续又发展出了 <strong>“三段式提交”（3 Phase Commit，3PC）协议</strong>。</p><p>三段式提交把原本的两段式提交的准备阶段再细分为两个阶段，分别称为<code>CanCommit</code>、<code>PreCommit</code>，把提交阶段改称为<code>DoCommit</code>阶段。<br><strong>CanCommit</strong>：事务管理器让每个参与的数据库根据自身状态，评估该事务是否有可能顺利完成。</p><p>将准备阶段一分为二的理由是这个阶段是重负载的操作，一旦事务管理器发出开始准备的消息，每个资源管理器都将马上开始写重做日志，它们所涉及的数据资源即被锁住，如果此时某一个资源管理器宣告无法完成提交，相当于大家都白做了一轮无用功。所以，增加一轮询问阶段，如果都得到了正面的响应，那事务能够成功提交的把握就比较大了，这也意味着因某个资源管理器提交时发生崩溃而导致大家全部回滚的风险相对变小。因此，在事务需要回滚的场景中，三段式的性能通常是要比两段式好很多的，但在事务能够正常提交的场景中，两者的性能都依然很差，甚至三段式因为多了一次询问，还要稍微更差一些。</p><p>示意图：<br><img src="/2024/04/19/%E7%9F%A5%E8%AF%86/%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/%E3%80%8A%E5%87%A4%E5%87%B0%E6%9E%B6%E6%9E%84%E3%80%8B/distributed_transaction/%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.svg"></p><p>三段式提交对单点问题和回滚时的性能问题有所改善，但是它对一致性风险问题并未有任何改进，在这方面它面临的风险甚至反而是略有增加了的。譬如，进入 PreCommit 阶段之后，事务管理器发出的指令不是Commit而是Abort，而此时因网络问题，有部分资源管理器直至超时都未能收到事务管理器的Abort指令的话，这些资源管理器将会错误地提交事务，这就产生了不同资源管理器之间数据不一致的问题（当然，如果超时后还是会锁定资源并等待重新连接，一样可以尽可能地保证数据一致性）。</p><h2 id="代码示范"><a href="#代码示范" class="headerlink" title="代码示范"></a>代码示范</h2><p>在全局事务处理中，存在这样一个层次结构：</p><ul><li><strong>全局事务管理器</strong>：它负责协调跨越多个服务或数据源的整个事务过程。全局事务管理器并不直接与各个数据源交互，而是通过与每个服务的本地事务管理器沟通来间接控制这些数据源上的操作。它主要执行的任务包括发起Prepare请求到所有参与者，并根据所有参与者的反馈决定最终是提交还是回滚全局事务。</li><li><strong>本地事务管理器</strong>：每个服务（如UserService、WarehouseService、LogisticsService）内部都有一个本地事务管理器，它直接管理该服务所依赖的数据源（资源管理器）。本地事务管理器负责响应全局事务管理器的Prepare和Commit&#x2F;Rollback命令，对本服务内的数据库或其他资源执行相应的事务操作。</li><li><strong>资源管理器</strong>：这是最底层，直接管理数据库或其他数据存储的地方，如MySQL数据库、缓存服务等。它们根据本地事务管理器的指令执行实际的读写操作。</li></ul><h3 id="全局事务管理器"><a href="#全局事务管理器" class="headerlink" title="全局事务管理器"></a>全局事务管理器</h3><p>首先定义一个全局事务管理器接口和实现，它将负责协调各个服务的本地事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">GlobalTransactionManager</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">startTransaction</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">(TransactionParticipant... participants)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleGlobalTransactionManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalTransactionManager</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;TransactionParticipant&gt; preparedParticipants = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isTransactionActive</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startTransaction</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!isTransactionActive) &#123;<br>            isTransactionActive = <span class="hljs-literal">true</span>;<br>            System.out.println(<span class="hljs-string">&quot;Global Transaction Started.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">(TransactionParticipant... participants)</span> &#123;<br>        <span class="hljs-keyword">for</span> (TransactionParticipant participant : participants) &#123;<br>            <span class="hljs-keyword">if</span> (participant.prepare()) &#123;<br>                preparedParticipants.add(participant);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                rollback();<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Prepare failed for participant: &quot;</span> + participant);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;All participants prepared.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!preparedParticipants.isEmpty()) &#123;<br>            <span class="hljs-keyword">for</span> (TransactionParticipant participant : preparedParticipants) &#123;<br>                participant.commit();<br>            &#125;<br>            preparedParticipants.clear();<br>            isTransactionActive = <span class="hljs-literal">false</span>;<br>            System.out.println(<span class="hljs-string">&quot;Global Transaction Committed.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!preparedParticipants.isEmpty()) &#123;<br>            <span class="hljs-keyword">for</span> (TransactionParticipant participant : preparedParticipants) &#123;<br>                participant.rollback();<br>            &#125;<br>            preparedParticipants.clear();<br>            isTransactionActive = <span class="hljs-literal">false</span>;<br>            System.out.println(<span class="hljs-string">&quot;Global Transaction Rolled Back.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">TransactionParticipant</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="本地事务管理器"><a href="#本地事务管理器" class="headerlink" title="本地事务管理器"></a>本地事务管理器</h3><p>接下来，模拟三个服务的本地事务管理器，它们实现了TransactionParticipant接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TransactionParticipant</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;User Service: Balance preparation successful.&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 假设操作成功</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;User Service: Balance committed.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;User Service: Balance rollback.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WarehouseService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TransactionParticipant</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Warehouse Service: Inventory preparation successful.&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 假设操作成功</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Warehouse Service: Inventory committed.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Warehouse Service: Inventory rollback.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogisticsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TransactionParticipant</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Logistics Service: Delivery preparation successful.&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 假设操作成功</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Logistics Service: Delivery committed.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Logistics Service: Delivery rollback.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用全局事务管理器执行购物操作"><a href="#使用全局事务管理器执行购物操作" class="headerlink" title="使用全局事务管理器执行购物操作"></a>使用全局事务管理器执行购物操作</h3><p>最后使用全局事务管理器来协调一个模拟的购物事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TwoPhaseCommitDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">GlobalTransactionManager</span> <span class="hljs-variable">txManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGlobalTransactionManager</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            txManager.startTransaction();<br>            txManager.prepare(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">WarehouseService</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogisticsService</span>());<br>            txManager.commit();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            txManager.rollback();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：这个示例极度简化，实际应用中的二阶段提交会涉及到复杂的网络通信、超时处理、异常恢复以及可能的分布式锁机制等，而且通常会使用成熟的分布式事务框架（如XA、Seata等）来实现，而不是手动编码。</p></blockquote><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><p>基于CAP理论，XA的事务机制无法在分布式环境中良好地应用。</p><h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><p><strong>CAP 定理（Consistency、Availability、Partition Tolerance Theorem）</strong>表示，在一个分布式的系统中，涉及共享数据问题时，以下三个特性最多只能同时满足其中两个：</p><ul><li><strong>一致性（Consistency）</strong>：代表数据在任何时刻、任何分布式节点中所看到的都是符合预期的。</li><li><strong>可用性（Availability）</strong>：代表系统不间断地提供服务的能力。<ul><li>理解可用性要先理解与其密切相关两个指标：可靠性（Reliability）和可维护性（Serviceability）。可靠性使用平均无故障时间（Mean Time Between Failure，MTBF）来度量；可维护性使用平均可修复时间（Mean Time To Repair，MTTR）来度量。可用性衡量系统可以正常使用的时间与总时间之比，其表征为：A&#x3D;MTBF&#x2F;（MTBF+MTTR），即可用性是由可靠性和可维护性计算得出的比例值，譬如 99.9999%可用，即代表平均年故障修复时间为 32 秒。</li></ul></li><li><strong>分区容忍性（Partition Tolerance）</strong>：代表分布式环境中部分节点因网络原因而彼此失联后，即与其他节点形成“网络分区”时，系统仍能正确地提供服务的能力。</li></ul><h3 id="场景举例"><a href="#场景举例" class="headerlink" title="场景举例"></a>场景举例</h3><p>依旧使用上述的那个购物流程来说明案例。</p><ul><li>从单个服务角度出发：（比如减去用户余额，用户的余额数据存储在多个节点中，并存在冗余）<ul><li>一致性：每个节点都需要得知该余额的减少，不能存在某个节点不知道；如果无法达成一致性，就可能导致两次购物使用了两个不同的节点，而导致双重支付的可能。</li><li>可用性：如果要避免上述一致性问题，就需要先暂停对该用户的余额服务，等到达成一致后再提供服务，期间是无法提供服务的，这就会导致可用性问题。</li><li>分区容忍性：如果余额服务中的一部分节点出现问题，整个集群能否继续提供正常的服务。</li></ul></li><li>从整个购物服务出发：<ul><li>一致性：一个用户账户扣款之后，全局的库存节点中的库存都要减去。</li><li>可用性：某个商品的交易正在进行，可能导致购买用户、该商品的交易服务都需要临时锁定。</li><li>分区容忍性：如果任意或多个服务中的一部分节点出现问题，整个集群能否继续提供正常的服务。</li></ul></li></ul><h3 id="舍弃C、A、P时所带来的不同影响"><a href="#舍弃C、A、P时所带来的不同影响" class="headerlink" title="舍弃C、A、P时所带来的不同影响"></a>舍弃C、A、P时所带来的不同影响</h3><blockquote><p>证明CAP理论需自行了解，本文不做介绍。</p></blockquote><p>舍弃 C、A、P 时所带来的不同影响：</p><ol><li><p><strong>放弃分区容忍性（CA without P）</strong>：要在保证一致性的同时保证可用性，则要求节点之间通信永远是可靠的，但这难以实现。因此当舍弃分区容忍性时，通常会导致一个分布式系统会严重受限于对网络分区的敏感性，进而演变成单体系统以避免由网络不稳定导致分区问题。在实际应用中，很少有系统会选择完全放弃分区容忍性，因为网络通信的不可靠性是分布式计算的基本假设之一。</p><blockquote><p>常见的CA系统有Oracle的RAC集群。Oracle RAC的工作原理是通过多个节点共享相同的数据库存储（通常是通过高速SAN或集群文件系统实现），每个节点运行一个数据库实例，这些实例共同访问同一份数据库数据。如果集群中的某个节点（实例）发生故障，其他节点可以继续提供服务，因为所有节点都能访问共享的存储，从而保证数据库服务不间断。这种机制有效地消除了单点故障，因为即使单个服务器或实例出现问题，数据库仍然可以继续运行。此外，由于使用的是共享的相同数据库存储，同时可以保证一致性。但是RAC集群在设计上提前假设了所有节点都能够访问共享存储，这就隐含了对网络连通性的高度依赖。如果网络出现分区，即某些节点无法访问共享存储，这将违反了RAC的基本运作前提，可能导致数据不一致或服务中断。因此，RAC在设计上并未追求在面对网络分区时仍能维持服务，而是通过硬件冗余（如多路径存储访问）、网络冗余和快速故障检测转移机制来减少分区发生的可能性，并确保在单一数据中心内的高可用性。</p></blockquote></li><li><p><strong>放弃可用性（CP without A）</strong>：这意味着一旦网络发生分区，节点之间的信息同步时间可以无限制地延长，近似于之前全局事务中的2PC&#x2F;3PC的情况。在现实中，选择放弃可用性的 CP 系统情况一般用于对数据质量要求很高的场合中。</p></li><li><p><strong>放弃一致性（AP without C）</strong>：这意味着一旦网络发生分区，节点之间所提供的数据可能不一致。选择放弃一致性的AP系统目前是设计分布式系统的主流选择，因为P是分布式网络的天然属性，无法丢弃；而A通常是建设分布式的目的，如果可用性随着节点数量增加反而降低的话，很多分布式系统可能就失去了存在的价值，除非银行、证券这些涉及金钱交易的服务，宁可中断也不能出错，否则多数系统是不能容忍节点越多可用性反而越低的。目前大多数 NoSQL 库和支持分布式的缓存框架都是 AP 系统，以 Redis 集群为例，如果某个 Redis 节点出现网络分区，那仍不妨碍各个节点以自己本地存储的数据对外提供缓存服务，但这时有可能出现请求分配到不同节点时返回给客户端的是不一致的数据。</p></li></ol><p>在分布式环境中，“一致性”通常不得不被放弃，但是终究还是要确保操作结果至少在最终交付的时候是正确的。因此人们又重新给一致性下了定义，在CAP、ACID中讨论的一致性称为<strong>强一致性（Strong Consistency）</strong>，而把牺牲了C的AP系统又要尽可能获得正确的结果的行为称为追求<strong>最终一致性（Eventual Consistency）</strong>。最终一致性是指：如果数据在一段时间之内没有被另外的操作所更改，那它最终将会达到与强一致性过程相同的结果，有时候面向最终一致性的算法也被称为“乐观复制算法”。</p><h2 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h2><p><strong>BASE</strong>是一种独立于ACID获得的强一致性之外的达成一致性目的的途径。</p><p>BASE理论的核心思想是：尽管在分布式系统中很难同时实现强一致性、高可用性和分区容忍性，但每个应用可以根据自身的业务需求，采用适当的方法来达到最终的一致性。BASE理论包含三个基本要素：</p><ul><li><strong>基本可用（Basically Available）</strong>：这意味着分布式系统在面对部分故障时，仍然能够提供一定程度的服务。尽管可能不是所有操作都能完成，但系统的核心功能应当能够持续可用。例如，在电商系统中，即使库存更新服务暂时不可用，用户浏览商品和加入购物车的功能仍然可以正常工作。</li><li><strong>软状态（Soft State）</strong>：软状态指的是系统中的数据可以处于中间状态，而且这个中间状态对于用户来说是可以接受的，不会直接影响到系统的整体可用性。在数据同步过程中，不同节点间的数据副本可能存在不一致的情况，这种不一致性被视为暂时的、可以接受的状态。例如，用户下单后，订单状态可能在“待确认”和“已确认”之间短暂地处于不确定状态。</li><li><strong>最终一致性（Eventually Consistent）</strong>：最终一致性保证系统中的所有数据副本，在经过一段时间之后，没有更多的更新操作发生时，最终能够达到一致的状态。这个时间的长短取决于系统的设计、网络延迟以及数据复制策略等因素。在分布式系统中，数据可能通过异步复制或事件驱动的方式在各个节点间传播，确保所有节点最终达成一致。</li></ul><p>接下来将介绍三种基于BASE理论指导的分布式事务处理方案。</p><h2 id="可靠事件队列"><a href="#可靠事件队列" class="headerlink" title="可靠事件队列"></a>可靠事件队列</h2><p>我们继续以本文的场景事例来解释<strong>可靠事件队列</strong>是如何实现最终一致性的。<br>现在存在用户余额、商品库存、物流系统三个相关数据源，购物的流程是：</p><ol><li>用户购买货物，减去余额。</li><li>仓库取出货物，减去库存。</li><li>物流系统发送货物，创建相关信息。</li></ol><pre><code class=" mermaid">sequenceDiagram    participant 整体系统    participant 用户服务    participant 消息队列    participant 仓库服务    participant 发货服务    整体系统-&gt;&gt;用户服务: 启动事务    用户服务-&gt;&gt;用户服务: 扣除余额    用户服务-&gt;&gt;消息队列: 发送相关业务消息    loop 循环直至成功        消息队列-&gt;&gt;仓库服务: 处理业务消息，扣除库存        alt 扣减成功        仓库服务--&gt;&gt;消息队列: 成功        else 扣减失败        仓库服务--&gt;&gt;消息队列: 失败        end    end    loop 循环直至成功        消息队列-&gt;&gt;发货服务: 处理业务消息，发货        alt 发货成功        发货服务--&gt;&gt;消息队列: 成功        else 发货失败        发货服务--&gt;&gt;消息队列: 失败        end    end</code></pre><p>过程说明：</p><ol><li>用户发出购物请求。</li><li>用户服务进行扣款，扣款成功后发送送货消息和减库存消息到消息队列。（并在数据库中记录：xxx商品，已付款，未减库存，未发货）</li><li>库存服务对消息进行消费。（并在数据库中记录：xxx商品，已付款，已减库存，未发货）</li><li>发货服务对消息进行消费。（并在数据库中记录：xxx商品，已付款，已减库存，已发货）</li></ol><p>如果该过程中，任意一条消息发生消费失败，则重新进行消息消费，直至操作成功，或者被人工介入为止。（可靠事件队列只要第一步业务完成了，后续就没有失败回滚的概念，只许成功，不许失败。）</p><p>以上是一种靠着<strong>持续重试</strong>来保证可靠性的解决方案，也叫<strong>最大努力交付（Best-Effort Delivery）</strong>。<br>上述的形式是可靠事件队列的一种更普通的形式，被称为<strong>最大努力一次提交（Best-Effort 1PC）</strong>，指的就是将最有可能出错的业务以本地事务的方式完成后，采用不断重试的方式（不限于消息系统）来促使同一个分布式事务中的其他关联业务全部完成。（当然也可以直接发送三条消息进行消费）</p><h2 id="TCC事务"><a href="#TCC事务" class="headerlink" title="TCC事务"></a>TCC事务</h2><p><strong>TCC（Try-Confirm-Cancel）</strong>是另一种常见的分布式事务机制。</p><p>之前讲的可靠消息队列虽然是一种分布式事务处理方案，但是存在一个缺陷——<strong>缺乏隔离性</strong>。<br>比如有多个用户购买同一个货物时，如果减库存消息的数量大于总库存，就会导致库存不足，如果是限量版的商品，就会引发很严重的问题…<br><strong>因此，如果业务需要隔离，就通常就应该重点考虑TCC方案，因为该方案天生适合用于需要强隔离性的分布式事务中。</strong></p><p>在具体实现上，TCC 较为烦琐，它是一种业务侵入式较强的事务方案，要求业务处理过程必须拆分为<strong>预留业务资源</strong>和<strong>确认&#x2F;释放消费资源</strong>两个子过程。如同 TCC 的名字所示，它分为以下三个阶段。</p><ul><li><strong>Try</strong>：尝试执行阶段，完成所有业务可执行性的检查（保障一致性），并且预留好全部需用到的业务资源（保障隔离性）。</li><li><strong>Confirm</strong>：确认执行阶段，不进行任何业务检查，直接使用 Try 阶段准备的资源来完成业务处理。Confirm 阶段可能会重复执行，因此本阶段所执行的操作需要具备幂等性。</li><li><strong>Cancel</strong>：取消执行阶段，释放 Try 阶段预留的业务资源。Cancel 阶段可能会重复执行，也需要满足幂等性。</li></ul><p>我们继续以本文的场景事例来解释<strong>TCC事务</strong>是如何实现最终一致性的。<br><img src="/2024/04/19/%E7%9F%A5%E8%AF%86/%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/%E3%80%8A%E5%87%A4%E5%87%B0%E6%9E%B6%E6%9E%84%E3%80%8B/distributed_transaction/TCC.svg"></p><p>上述流程说明：</p><ol><li>用户发出购物请求。</li><li>系统尝试预留资源。<ol><li>冻结余额</li><li>冻结库存</li><li>创建物流信息</li></ol></li><li>如果预留成功，执行Confirm业务逻辑，直至执行成功。</li><li>如果预留失败，执行Cancel业务逻辑，直至执行成功。</li></ol><p>伪代码示范：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyOneThing</span><span class="hljs-params">(PaymentBill bill)</span> &#123;<br>    <span class="hljs-comment">// 1. 初始化事务协调器，用于管理TCC的Try、Confirm、Cancel操作</span><br>    <span class="hljs-type">TccTransactionCoordinator</span> <span class="hljs-variable">coordinator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TccTransactionCoordinator</span>();<br>    <br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 2.1 Try阶段</span><br>        <span class="hljs-comment">// 预扣用户余额</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">balanceTryResult</span> <span class="hljs-operator">=</span> userService.trySubtractBalance(bill.getUserID(), bill.getMoney());<br>        <span class="hljs-keyword">if</span> (!balanceTryResult) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Try subtract balance failed.&quot;</span>);<br><br>        <span class="hljs-comment">// 预减仓库库存</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">inventoryTryResult</span> <span class="hljs-operator">=</span> warehouseService.tryMinusInventory(bill.getItems());<br>        <span class="hljs-keyword">if</span> (!inventoryTryResult) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Try minus inventory failed.&quot;</span>);<br>        <br>        <span class="hljs-comment">// 尝试创建物流信息</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">logisticsTryResult</span> <span class="hljs-operator">=</span> logisticsService.tryDeliverGoods(bill.getItems(), bill.getBuyerInfo());<br>        <span class="hljs-keyword">if</span> (!logisticsTryResult) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Try deliver goods failed.&quot;</span>);<br>        <br>        <span class="hljs-comment">// 3. 将所有Try操作加入到事务协调器</span><br>        coordinator.enlistTryOperations(<br>            () -&gt; userService.confirmSubtractBalance(bill.getUserID(), bill.getMoney()),<br>            () -&gt; warehouseService.confirmMinusInventory(bill.getItems()),<br>            () -&gt; logisticsService.confirmDeliverGoods(bill.getItems(), bill.getBuyerInfo())<br>        );<br>        <br>        <span class="hljs-comment">// 4. 注册Cancel操作，用于异常情况下的资源回滚</span><br>        coordinator.enlistCancelOperations(<br>            () -&gt; userService.cancelSubtractBalance(bill.getUserID(), bill.getMoney()),<br>            () -&gt; warehouseService.cancelMinusInventory(bill.getItems()),<br>            () -&gt; logisticsService.cancelDeliverGoods(bill.getItems(), bill.getBuyerInfo())<br>        );<br>        <br>        <span class="hljs-comment">// 5. 执行Confirm阶段，这里假设coordinator.commit会按需调用Confirm或Cancel</span><br>        coordinator.commit();<br>        <br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-comment">// 6. 异常时，通过事务协调器自动或手动触发Cancel操作</span><br>        coordinator.rollback();<br>        <span class="hljs-keyword">throw</span> e; <span class="hljs-comment">// 可能需要重新抛出异常或者记录日志</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TCC位于用户代码层面，可以根据需要设计资源锁定的粒度，在业务执行时只操作预留资源，几乎不会涉及锁和资源的争用，具有很高的性能潜力；但是TCC有较高的开发成本和业务侵入性，因此通常不会裸编码实现，而是使用分布式事务中间件如Seata来实现。</p><h2 id="SAGA事务"><a href="#SAGA事务" class="headerlink" title="SAGA事务"></a>SAGA事务</h2><p>TCC事务实现了较强的隔离性，但是由于其业务侵入性很强，如果Try阶段的所需相关资源是由第三方接口把控的，无法实现类似冻结、解冻操作，则需要引入新的事务处理方案。<br><strong>SAGA事务</strong>是另外一种柔性事务方案，大致思路是把一个大事务分解为可以交错运行的一系列子事务集合：</p><ul><li>大事务拆分若干个小事务，将整个分布式事务$T$分解为$n$个子事务，命名为$T_1$，$T_2$，$…$，$T_i$，$…$，$T_n$。每个子事务都应该是或者能被视为是原子行为。如果分布式事务能够正常提交，其对数据的影响（最终一致性）应与连续按顺序成功提交$T_i$等价。</li><li>为每一个子事务设计对应的补偿动作，命名为$C_1$，$C_2$，$…$，$C_i$，$…$，$C_n$。$T_i$与$C_i$必须满足以下条件：<ul><li>$T_i$与$C_i$都具备幂等性。</li><li>$T_i$与$C_i$满足交换律（Commutative），即先执行$T_i$还是先执行$C_i$，其效果都是一样的。</li><li>$C_i$必须能成功提交，即不考虑$C_i$本身提交失败被回滚的情形，如出现就必须持续重试直至成功，或者要人工介入。</li></ul></li><li>如果$T_1$到$T_n$均成功提交，那事务顺利完成，否则，要采取以下两种恢复策略之一：<ul><li><strong>正向恢复（Forward Recovery）</strong>：如果$T_i$事务提交失败，则一直对$T_i$进行重试，直至成功为止（最大努力交付）。（这种恢复方式不需要补偿，适用于事务最终都要成功的场景）</li><li><strong>反向恢复（Backward Recovery）</strong>：如果$T_i$事务提交失败，则一直执行$C_i$对$T_i$进行补偿，直至成功为止（最大努力交付）。这里要求$C_i$必须（在持续重试后）执行成功。反向恢复的执行模式为：$T_1$，$T_2$，$…$，$T_i$（失败），$C_i$（补偿），$…$，$C_2$，$C_1$。</li></ul></li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//首先，为每个服务定义正向操作和相应的补偿操作：</span><br><span class="hljs-comment">//UserService: 扣除用户余额（正向），增加用户余额（补偿）</span><br><span class="hljs-comment">//WarehouseService: 减少库存（正向），增加库存（补偿）</span><br><span class="hljs-comment">//LogisticsService: 创建物流信息并发货（正向），取消物流订单（补偿）</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyOneThingSaga</span><span class="hljs-params">(PaymentBill bill)</span> &#123;<br>    <span class="hljs-type">SagaTransaction</span> <span class="hljs-variable">sagaTxn</span> <span class="hljs-operator">=</span> SagaTransaction.startNewTransaction(<span class="hljs-string">&quot;buyOneThing&quot;</span>);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 1. 尝试扣款，作为Saga的一个步骤</span><br>        userService.subtractBalanceSaga(bill.getUserID(), bill.getMoney(), sagaTxn);<br>        <br>        <span class="hljs-comment">// 2. 尝试减库存，作为Saga的另一个步骤</span><br>        warehouseService.minusInventorySaga(bill.getItems(), sagaTxn);<br>        <br>        <span class="hljs-comment">// 3. 尝试创建物流信息，同样作为Saga的一个步骤</span><br>        logisticsService.deliverGoodsSaga(bill.getItems(), bill.getBuyerInfo(), sagaTxn);<br>        <br>        <span class="hljs-comment">// 4. 如果一切顺利，提交Saga事务</span><br>        sagaTxn.commit();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-comment">// 5. 出现异常时，触发补偿操作</span><br>        sagaTxn.abort();<br>        handleAbort(sagaTxn); <span class="hljs-comment">// 处理事务中止，可能需要记录日志或通知等</span><br>        <span class="hljs-keyword">throw</span> e; <span class="hljs-comment">// 可能需要重新抛出异常或者记录日志</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 补偿逻辑处理方法，根据Saga事务中的操作历史执行相应的补偿操作</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleAbort</span><span class="hljs-params">(SagaTransaction sagaTxn)</span> &#123;<br>    List&lt;SagaStep&gt; stepsToCompensate = sagaTxn.getFailedSteps();<br>    <span class="hljs-keyword">for</span> (SagaStep step : stepsToCompensate) &#123;<br>        <span class="hljs-keyword">if</span> (step.getServiceName().equals(<span class="hljs-string">&quot;subtractBalance&quot;</span>)) &#123;<br>            userService.compensateSubtractBalance((PaymentBill) step.getPayload());<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (step.getServiceName().equals(<span class="hljs-string">&quot;minusInventory&quot;</span>)) &#123;<br>            warehouseService.compensateMinusInventory((List&lt;Item&gt;) step.getPayload());<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (step.getServiceName().equals(<span class="hljs-string">&quot;deliverGoods&quot;</span>)) &#123;<br>            logisticsService.compensateDeliverGoods((DeliveryInfo) step.getPayload());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于SAGA系统本身也有可能会崩溃，所以其必须设计成与数据库类似的日志机制（被称为SAGA Log）以保证系统恢复后可以追踪到子事务的执行情况。<br>另外，尽管补偿操作通常比冻结&#x2F;撤销容易实现，但保证正向、反向恢复过程的能严谨地进行也需要花费不少的工夫，譬如通过服务编排、可靠事件队列等方式完成，所以，SAGA事务通常也不会直接靠裸编码来实现，一般也是在事务中间件的基础上完成，前面提到的 Seata 就同样支持 SAGA 事务模式。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事务处理</tag>
      
      <tag>一致性</tag>
      
      <tag>原子性</tag>
      
      <tag>隔离性</tag>
      
      <tag>持久性</tag>
      
      <tag>全局事务</tag>
      
      <tag>二段式提交</tag>
      
      <tag>三段式提交</tag>
      
      <tag>CAP</tag>
      
      <tag>强一致性</tag>
      
      <tag>最终一致性</tag>
      
      <tag>最大努力交付</tag>
      
      <tag>可靠事件队列</tag>
      
      <tag>TCC事务</tag>
      
      <tag>SAGA事务</tag>
      
      <tag>正向恢复</tag>
      
      <tag>反向恢复</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM各类图示</title>
    <link href="/2024/03/28/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JVM/"/>
    <url>/2024/03/28/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JVM/</url>
    
    <content type="html"><![CDATA[<p>JVM主要分为三大模块内容：<br><strong>类加载器</strong>、<strong>运行时数据区</strong>和<strong>执行引擎</strong>。</p><p>示意图：<br><img src="/2024/03/28/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JVM/%E4%B8%89%E5%A4%A7%E6%A8%A1%E5%9D%97.png"></p><h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><p>类加载过程：<br><img src="/2024/03/28/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.svg"></p><p>类加载器：<br><img src="/2024/03/28/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.svg"></p><h1 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h1><p>栈帧：<br><img src="/2024/03/28/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JVM/%E6%A0%88%E5%B8%A7.svg"></p>]]></content>
    
    
    <categories>
      
      <category>后端开发</category>
      
      <category>语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL：并发</title>
    <link href="/2024/03/22/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_concurrent/"/>
    <url>/2024/03/22/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_concurrent/</url>
    
    <content type="html"><![CDATA[<p>本文将讲解并发事务带来的问题、并发事务的控制方式、事务隔离级别。</p><h1 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h1><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。</p><p>并发虽然是必须的，但可能会导致以下的问题：脏读、修改丢失、不可重复读、幻读。</p><blockquote><p>这4个问题是并发操作中最常见的事务一致性问题，直接关系到数据库的完整性和一致性；解决这四个问题可以极大地减少并发环境下的数据一致性问题。</p><p>其实还存在其他问题，比如：</p><ul><li>事务悬挂（Transaction Serialization Anomaly）：也称为“活锁”或“死锁”，当两个或多个事务互相等待对方释放资源而无法继续执行时，就会发生这种情况。</li><li>时间戳顺序违背（Timestamp Order Violation）：在使用基于时间戳的并发控制方法时，可能出现的时间戳分配不合理导致的事务间逻辑冲突。</li><li>读偏斜（Read Skew）：这是一种特殊的不可重复读现象，指的是在一个事务中，基于多行的条件判断结果与在同一事务中后续的实际操作之间存在不一致性。</li><li>写偏斜（Write Skew）：类似读偏斜，但在更新操作上出现，两个事务都基于同一条件更新数据，但各自看到的结果不同，最终可能导致数据不一致。</li></ul><p>此外，对于某些特定的应用场景和业务逻辑，可能存在更复杂的数据一致性需求，这时候可能需要结合业务规则和数据库事务特性制定更为细致的并发控制策略。<br>总的来说，针对“脏读”、“不可重复读”、“幻读”和“更新丢失”的解决方案（比如设置合适的事务隔离级别）是并发控制的基础，但全面解决并发问题还需要综合运用多种并发控制手段和技术。</p></blockquote><h2 id="脏读（Dirty-read）"><a href="#脏读（Dirty-read）" class="headerlink" title="脏读（Dirty read）"></a>脏读（Dirty read）</h2><p><strong>一个事务读取数据并且对数据进行了修改，这个修改对其他事务来说是可见的，即使当前事务没有提交。这时另外一个事务读取了这个还未提交的数据，但第一个事务突然回滚，导致数据并没有被提交到数据库，那第二个事务读取到的就是脏数据，这也就是脏读的由来。</strong></p><p>示意图：<br><img src="/2024/03/22/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_concurrent/%E8%84%8F%E8%AF%BB.svg"></p><p>说明：</p><ol><li>进程A将属性A设置为10。</li><li>属性A被进程B读取了，进程B获得到的属性A为10。</li><li>进程A发出回滚，属性A变回1。</li></ol><p><strong>这导致了进程B获得的A&#x3D;10是毫无意义的垃圾数据。</strong></p><h2 id="丢失修改（Lost-to-modify）"><a href="#丢失修改（Lost-to-modify）" class="headerlink" title="丢失修改（Lost to modify）"></a>丢失修改（Lost to modify）</h2><p>在一个事务读取一个数据，将其保存为本地变量；另外一个事务也访问了该数据，做了同样的操作。<br>然后第一个事务在本地修改了这个数据后将其保存；第二个事务也修改了这个数据，做了同样的操作。<br>这样数据库中数据的值会变成后一个提交的事务的值，前一个事务的修改会无效。</p><p>示意图：<br><img src="/2024/03/22/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_concurrent/%E4%B8%A2%E5%A4%B1%E4%BF%AE%E6%94%B9.svg"></p><p>说明：</p><ol><li>进程A查询A属性，获得A&#x3D;1，在本地将A改为2。</li><li>进程B查询A属性，获得A&#x3D;1，在本地将A改为1。</li><li>进程A更新A属性，A&#x3D;2。</li><li>进程B更新A属性，A&#x3D;1.</li></ol><p><strong>进程A的事务未发生任何作用，修改被丢失了。</strong></p><blockquote><p>感觉有点像区块链的双重支付问题，但是那个玩意在等待一段时间后就会被发现无法获得货币，因为具体节点的修改操作是可见的；但是在丢失修改中，两个事务无法观测到对方的执行情况。</p></blockquote><h2 id="不可重复读（Unrepeatable-read）"><a href="#不可重复读（Unrepeatable-read）" class="headerlink" title="不可重复读（Unrepeatable read）"></a>不可重复读（Unrepeatable read）</h2><p>指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了<strong>在一个事务内两次读到的数据是不一样</strong>的情况，因此称为<strong>不可重复读</strong>。</p><p>示意图：<br><img src="/2024/03/22/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_concurrent/%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB.svg"></p><p>说明：</p><ol><li>进程A、进程B都发起事务。</li><li>进程A修改属性A为2。</li><li>进程B读取属性A为2。</li><li>进程A修改属性A为5。</li><li>进程B读取属性A为5。</li></ol><p><strong>进程B两次读取属性不一致，一次是2一次是5。</strong></p><h2 id="幻读（Phantom-read）"><a href="#幻读（Phantom-read）" class="headerlink" title="幻读（Phantom read）"></a>幻读（Phantom read）</h2><p>幻读可以看作是不可重复读的一种特殊情况，它发生在一个事务读取了几行数据，接着另一个并发事务插入了一些数据时。在随后的查询中，第一个事务就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p><blockquote><p>单独把区分幻读的原因主要是解决幻读和不可重复读的方案不一样。</p></blockquote><p>示意图：<br><img src="/2024/03/22/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_concurrent/%E5%B9%BB%E8%AF%BB.svg"></p><p>说明：</p><ol><li>进程A、进程B都发起事务。</li><li>进程A添加属性B&#x3D;2。</li><li>进程B读取全部属性A&#x3D;1、B&#x3D;2。</li><li>进程A添加属性C&#x3D;3。</li><li>进程B读取全部属性A&#x3D;1、B&#x3D;2、C&#x3D;3。</li></ol><p><strong>进程B两次读取到的属性数量不同，一次是2个一次是3个。</strong></p><h1 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><p>SQL 标准定义了四个隔离级别：</p><ul><li><strong>READ-UNCOMMITTED（读取未提交）</strong>：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</li><li><strong>READ-COMMITTED（读取已提交）</strong>：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</li><li><strong>REPEATABLE-READ（可重复读）</strong>：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。MySQL InnoDB存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重复读）。</li><li><strong>SERIALIZABLE（可串行化）</strong>：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li></ul><p>MySQL 的隔离级别基于锁和 MVCC 机制共同实现的。<br>SERIALIZABLE 隔离级别是通过锁来实现的，READ-COMMITTED 和 REPEATABLE-READ 隔离级别是基于 MVCC 实现的。不过， SERIALIZABLE 之外的其他隔离级别可能也需要用到锁机制，就比如 REPEATABLE-READ 在当前读情况下需要使用加锁读来保证不会出现幻读。</p><h1 id="并发事务的控制方式"><a href="#并发事务的控制方式" class="headerlink" title="并发事务的控制方式"></a>并发事务的控制方式</h1><p>MySQL中并发事务的控制方式为以下两种：<strong>MVCC</strong>、<strong>锁</strong>。</p><p>我们将先介绍MVCC，然后讲解锁。</p><h2 id="多版本并发控制-Multi-Version-Concurrency-Control"><a href="#多版本并发控制-Multi-Version-Concurrency-Control" class="headerlink" title="多版本并发控制 (Multi-Version Concurrency Control)"></a>多版本并发控制 (Multi-Version Concurrency Control)</h2><p>MVCC的核心思想：<strong>让读操作并不直接读取数据库中的最新数据，而是读取历史版本的数据，这些历史版本是在读操作开始时就已经存在的已提交版本。</strong><br>MVCC最大的优势：读不加锁，读写不冲突。在读多写少的OLTP应用中，读写不冲突是非常重要的，极大的增加了系统的并发性能。</p><p>MVCC 是一种并发控制机制，用于在多个并发事务同时读写数据库时保持数据的一致性和隔离性。它是通过<strong>在每个数据行上维护多个版本的数据</strong>来实现的。当一个事务要对数据库中的数据进行修改时，MVCC 会为该事务创建一个数据快照，而不是直接修改实际的数据行。</p><p>简单讲述一下在MVCC下读、写、事务提交&#x2F;回滚的思路：</p><ol><li><strong>读（select）</strong>：当一个事务执行读操作时，它会<strong>使用快照读取</strong>。快照读取是基于事务开始时数据库中的状态创建的，因此<strong>事务不会读取其他事务尚未提交的修改</strong>。具体工作情况如下：<ul><li>对于读取操作，事务会查找符合条件的数据行，并选择合适的数据版本进行读取。</li><li>由于<strong>事务读取的是旧版的快照数据</strong>，因此其他并发事务对数据行的修改不会影响当前事务的读取操作。</li></ul></li><li><strong>写操作（INSERT、UPDATE、DELETE）</strong>：当一个事务执行写操作时，它会<strong>生成一个新的数据版本，并将修改后的数据写入数据库</strong>。具体工作情况如下：<ul><li>对于写操作，事务会<strong>为要修改的数据行创建一个新的版本，并将修改后的数据写入新版本</strong>。</li><li>新版本的数据会带有当前事务的版本号，以便其他事务能够正确读取旧版本的数据，避免发生脏读。</li></ul></li><li><strong>事务提交和回滚</strong>：<ul><li>当一个事务提交时，<strong>它所做的修改将成为数据库的最新版本</strong>，并且对其他事务可见。</li><li>当一个事务回滚时，它所做的修改将被撤销，始终对其他事务不可见。</li></ul></li></ol><blockquote><p>版本的回收：为了防止数据库中的版本无限增长，MVCC 会定期进行版本的回收。回收机制会删除已经不再需要的旧版本数据，从而释放空间。</p></blockquote><h3 id="一致性非锁定读和锁定读"><a href="#一致性非锁定读和锁定读" class="headerlink" title="一致性非锁定读和锁定读"></a>一致性非锁定读和锁定读</h3><p><strong>一致性非锁定读</strong>和<strong>锁定读</strong>是MySQL数据库中InnoDB存储引擎在处理事务并发控制时采用的两种不同的读取数据的方式。</p><h4 id="一致性非锁定读"><a href="#一致性非锁定读" class="headerlink" title="一致性非锁定读"></a>一致性非锁定读</h4><p>对于<strong>一致性非锁定读（Consistent Nonlocking Reads）</strong>的实现，通常做法是加一个版本号或者时间戳字段，在更新数据的同时版本号 + 1 或者更新时间戳。查询时，将当前可见的版本号与对应记录的版本号进行比对，如果记录的版本小于可见版本，则表示该记录可见。</p><p>在 InnoDB 存储引擎中，<strong>多版本并发控制</strong>就是对非锁定读的实现。如果读取的行正在执行 DELETE 或 UPDATE 操作，这时读取操作不会去等待行上锁的释放。相反地，InnoDB 存储引擎会去读取行的一个快照数据，对于这种读取历史数据的方式，我们叫它<strong>快照读（snapshot read）</strong>。</p><p>MVCC的实现依赖于<strong>undo log（回滚日志）</strong>，每当有事务对某一行进行修改时，都会生成一个旧版本，并将其存储在undo日志中。这样，即使该行被其他事务锁定或修改，当前事务仍能读取到之前的版本数据，而无需对这行记录加锁，从而提高并发性能。</p><p>在 <code>Repeatable Read</code> 和 <code>Read Committed</code> 两个隔离级别下，如果是执行<strong>普通的 select 语句</strong>（不包括<code>select ... lock in share mode</code>，<code>select ... for update</code>）就会使用一致性非锁定读。并且在 <code>Repeatable Read</code> 下 MVCC 实现了可重复读和防止部分幻读。</p><blockquote><p>在不同的事务隔离级别下，一致性非锁定读的行为会有一定差异，比如在REPEATABLE READ隔离级别下，每次一致性读取都会看到事务开始时的同一视图，而在READ COMMITTED隔离级别下，每次读取可能会看到稍有不同的已提交版本。</p></blockquote><h4 id="锁定读"><a href="#锁定读" class="headerlink" title="锁定读"></a>锁定读</h4><p>锁定读是<strong>传统的锁定机制</strong>，它会<strong>在读取数据时对数据行加锁，以确保在读取期间不会有其他事务修改这些数据</strong> ，这种读也被称为<strong>当前读（current read）</strong>。<br>对于<code>SELECT ... FOR UPDATE</code>或<code>SELECT ... LOCK IN SHARE MODE</code>这样的查询语句，InnoDB会对读取到的数据行加行锁，使得其他事务不能对该行进行更新或删除，直到持有锁的事务结束为止。</p><p>相比之下，锁定读虽然提供了更强的事务隔离效果，但可能导致更高的并发环境下出现锁等待和死锁等问题。</p><h3 id="MVCC实现"><a href="#MVCC实现" class="headerlink" title="MVCC实现"></a>MVCC实现</h3><p>MVCC 的实现依赖于：<strong>隐藏字段</strong>、<strong>Read View</strong>、<strong>undo log</strong>。<br>在内部实现中，InnoDB 通过数据行的 DB_TRX_ID 和 Read View 来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。</p><h4 id="undo-log"><a href="#undo-log" class="headerlink" title="undo-log"></a>undo-log</h4><p>当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过 undo log 读取之前的版本数据，以此实现非锁定读。</p><blockquote><p>undo log 分为两种：</p><ul><li><strong>insert undo log</strong>：指在 insert 操作中产生的 undo log。因为 insert 操作的记录只对事务本身可见，对其他事务不可见，故该 undo log 可以在事务提交后直接删除。</li><li><strong>update undo log</strong>：update 或 delete 操作中产生的undo log。该undo log可能需要提供 MVCC 机制，因此不能在事务提交时就进行删除。提交时放入undo log链表，等待purge线程 进行最后的删除。</li></ul></blockquote><h4 id="隐藏字段"><a href="#隐藏字段" class="headerlink" title="隐藏字段"></a>隐藏字段</h4><p>在内部，InnoDB 存储引擎为<strong>每行数据</strong>添加了三个隐藏字段：</p><ul><li><strong>DB_TRX_ID</strong>：用于记录最后一次修改该行记录的事务ID。注意，delete操作在内部被视为更新，只不过会在记录头<code>Record header</code>中的 <code>deleted_flag</code>字段将其标记为已删除。</li><li>DB_ROLL_PTR：回滚指针，指向该行的<code>undo log</code>。如果该行未被更新，则为空。</li><li>DB_ROW_ID：如果没有设置主键且该表没有唯一非空索引时，InnoDB 会使用该id来生成聚簇索引。</li></ul><p>当我们更新一条数据，InnoDB会更新行记录的 DB_TRX_ID 属性为当前的事务Id。</p><h4 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h4><p>Read View主要是用来做<strong>可见性判断</strong>，里面保存了 <strong>“当前对本事务不可见的其他活跃事务”</strong>。</p><blockquote><p>在数据库系统中，<strong>活跃事务</strong>是指已经执行了一部分操作（如读取或写入数据），但尚未最终确认或撤销其更改的事务。</p></blockquote><p>主要有以下字段：</p><ul><li><strong>m_low_limit_id</strong>：“高水位线”，生成ReadView时系统将要分配给下一个事务的Id值。</li><li><strong>m_up_limit_id</strong>：“低水位线”，低水位，取m_ids列表的第一个节点，因为m_ids是升序列表，因此也就是m_ids中事务Id最小的那个。</li><li><strong>m_ids</strong>：一个自定义类型的容器，存储了一系列事务ID，表示在Read View创建时活跃的未提交事务ID集合，Read View不会看到这些事务所做的修改。（由于事务Id大的也可能提交比较早，所以不能仅仅依靠<code>m_up_limit_id</code>，需要做进一步判断，通过m_id来判断该事务是否提交）</li><li>m_creator_trx_id：创建当前Read View的事务ID。</li><li>m_low_limit_no：Read View不需要查看事务号严格小于此值的事务的undo日志，这些事务的undo日志在purge过程中可以被安全移除，如果不被其他Read View需要的话。</li><li>m_closed：标志Read View是否已经被关闭，如果关闭，则表示这个Read View不再有效。</li></ul><p>高低水位线说明：<br><img src="/2024/03/22/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_concurrent/MVCC_ReadView.svg"></p><h4 id="数据可见性算法"><a href="#数据可见性算法" class="headerlink" title="数据可见性算法"></a>数据可见性算法</h4><p>读已提交级别下，在 InnoDB 存储引擎中，创建一个新事务后，执行每个 select 语句前，都会创建一个Read View。<br>可重复读级别下，只在事务开始后的第一次select 数据前生成一个Read View。</p><p>当用户在这个事务中要读取某个记录行的时候，InnoDB 会将该记录行的DB_TRX_ID与Read View中的一些变量及当前事务ID进行比较，判断是否满足可见性条件。</p><p><strong>具体判断过程</strong>：</p><ol><li>判断<code>DB_TRX_ID==m_creator_trx_id</code>：即记录版本上一次修改为当前事务自己的修改，那么无论何种情况，事务总是能看到自己做的修改。</li><li>判断<code>DB_TRX_ID &lt; m_up_limit_id</code>：表明被访问版本的事务在当前事务生成ReadView前已经提交，所以该版本可以被当前事务访问。</li><li>判断<code>DB_TRX_ID &gt;= m_low_limit_id</code>：表明被访问版本的事务在当前事务生成 ReadView 后才开启，所以该版本不可以被当前事务访问。需通过记录行的<code>DB_ROLL_PTR</code>指向的<code>undo log</code>取出快照记录，用快照记录的<code>DB_TRX_ID</code>重新进入判断。</li><li>如果被访问版本的 trx_id 属性值在 ReadView 的 m_up_limit_id 和 m_low_limit_id 之间，那就需要判断 trx_id 属性值是不是在 m_ids 列表中，这边会通过二分法查找。如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。</li></ol><p>由于可重复读级别下，Read View只有一个，因此多次select间隔期间，即使有旧事务进行修改并提交，当前读事务也会由于该提交事务的ID在m_ids中导致葫芦该提交结果，进行访问undo log；而在读已提交的情况下，多次select间隔期间，如果有新事务进行修改并提交，由于新事务已被提交，不会存在有新构建的快照中的m_ids中，所以可读到新事务提交的结果。</p><h3 id="MVCC对幻读的解决程度"><a href="#MVCC对幻读的解决程度" class="headerlink" title="MVCC对幻读的解决程度"></a>MVCC对幻读的解决程度</h3><p>MVCC 解决了部分幻读，但并没有完全解决幻读。<br>对于快照读，MVCC 因为因为从 ReadView 读取，所以必然不会看到新插入的行，所以天然就解决了幻读的问题。而对于当前读的幻读，MVCC 是无法解决的。</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><blockquote><p><a href="https://juejin.cn/post/7094049650428084232">参考文章</a></p></blockquote><h3 id="锁类型介绍"><a href="#锁类型介绍" class="headerlink" title="锁类型介绍"></a>锁类型介绍</h3><p>InnoDB中有7种锁：</p><h4 id="共享锁-排他锁"><a href="#共享锁-排他锁" class="headerlink" title="共享锁&#x2F;排他锁"></a>共享锁&#x2F;排他锁</h4><ul><li><strong>共享锁（S锁）</strong>：在事务要读一条记录时，需要先获取该记录的S锁。</li><li><strong>排他锁（X锁）</strong>：在事务需要改动一条记录时，需要先获取该记录的X锁。</li></ul><p>如果一行已经一个事务被上了<strong>S锁</strong>，当另一个事务试图再次上锁时：</p><ul><li>试图上S锁：通过，该记录上存在了由两个不同事务持有的S锁。</li><li>试图上X锁：拒绝，上锁操作被堵塞。</li></ul><p>如果一行已经一个事务被上了<strong>X锁</strong>，当另一个事务试图再次上锁时：</p><ul><li>试图上S锁：拒绝，上锁操作被堵塞。</li><li>试图上X锁：拒绝，上锁操作被堵塞。</li></ul><p>S锁和X锁的兼容关系示意表：</p><table><thead><tr><th>兼容性</th><th>S锁</th><th>X锁</th></tr></thead><tbody><tr><td><strong>S锁</strong></td><td>兼容</td><td>不兼容</td></tr><tr><td><strong>X锁</strong></td><td>不兼容</td><td>不兼容</td></tr></tbody></table><p>共享锁和排他锁一样可以存在于表上。</p><h4 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h4><p>意向锁是一种不与行级锁冲突的<strong>表级锁</strong>。<br>在未来的某个时刻，事务可能要加S锁或者X锁时，因此先提前声明一个意向。</p><p>由于InnoDB同时存在行级锁和表级锁，如果一个表的某些记录被添加了X锁或S锁，当另一个事务试图获得表级S锁或表级X锁时，需要遍历每一行来保证没有冲突的锁，这是一个非常耗时的操作，因此InnoDB提出了意向锁，用来代表一个表是否已经被上了行级的X锁或S锁。</p><ul><li><strong>意向共享锁（IS锁）</strong>：<strong>Intention Shared Lock</strong>，当事务准备在某些记录上加S锁时，需要现在表级别加一个IS锁。</li><li><strong>意向排他锁（IX锁）</strong>：<strong>Intention Exclusive Lock</strong>，当事务准备在某条记录上加上X锁时，需要现在表级别加一个IX锁。</li></ul><p>当一个事务需要给一个表的某几行添加S锁时，其需要同时给表添加一个IS锁；如果一个表上有IS锁，就说明该表有几行正在被读，因此不能添加表级的X锁。<br>当一个事务需要给一个表的某几行添加X锁时，其需要同时给表添加一个IX锁；如果一个表上有IX锁，就说明该表有几行正在被写，因此不能添加表级的S锁和X锁。</p><blockquote><p>注意：由于IX和IS锁仅仅是意向，并不会真正锁住对应的表，因此IX和IS是相互兼容的。</p></blockquote><p>兼容性示意图：</p><table><thead><tr><th>兼容性</th><th>IS锁</th><th>IX锁</th><th>表级S锁</th><th>表级X锁</th></tr></thead><tbody><tr><td><strong>IS锁</strong></td><td>兼容</td><td>兼容</td><td>兼容</td><td>不兼容</td></tr><tr><td><strong>IX锁</strong></td><td>兼容</td><td>兼容</td><td>不兼容</td><td>不兼容</td></tr><tr><td><strong>表级S锁</strong></td><td>兼容</td><td>不兼容</td><td>兼容</td><td>不兼容</td></tr><tr><td><strong>表级X锁</strong></td><td>不兼容</td><td>不兼容</td><td>不兼容</td><td>不兼容</td></tr></tbody></table><p>注意：意向锁的存在是为了让数据库系统高效地管理行级锁，但是其不会影响行级S锁或X锁的添加。</p><h4 id="记录锁（Record-Lock）"><a href="#记录锁（Record-Lock）" class="headerlink" title="记录锁（Record Lock）"></a>记录锁（Record Lock）</h4><p><strong>记录锁（Record Lock）</strong>是数据库管理系统中一种<strong>针对单行记录</strong>的锁定方式，是一种X锁。<br>它会在对应的记录上加上记录锁，以<strong>阻止其他事务插入，更新，删除</strong>。</p><blockquote><p>记录锁是加在索引上的，即使一个表没有索引，InnoDB也会隐式的创建一个索引，并使用这个索引实施记录锁。它会阻塞其他事务对这行记录的插入、更新、删除。</p></blockquote><h4 id="间隙锁（Gap-Lock）"><a href="#间隙锁（Gap-Lock）" class="headerlink" title="间隙锁（Gap Lock）"></a>间隙锁（Gap Lock）</h4><p>间隙锁（Gap Lock）是InnoDB用来解决幻读问题的一种锁。<br>间隙锁是一种加在两个索引之间的锁，或者加在第一个索引之前，或最后一个索引之后的间隙。它锁住的是一个区间，而不仅仅是这个区间中的每一条数据。</p><p>当一个事务对某个索引区间使用范围查询并申请了间隙锁时，其他事务无法在这个区间内插入新的记录。这样可以防止事务在第一次读取范围后，由于新插入的数据满足原始查询条件而出现不一致的查询结果。</p><h4 id="临键锁（Next-Key-Lock）"><a href="#临键锁（Next-Key-Lock）" class="headerlink" title="临键锁（Next-Key Lock）"></a>临键锁（Next-Key Lock）</h4><p><strong>Next-key锁</strong>是<strong>记录锁和间隙锁的组合</strong>，它指的是加在某条记录以及这条记录前面间隙上的锁。说得更具体一点就是：临键锁会封锁索引记录本身，以及索引记录之前的区间，即它的锁区间是前开后闭，比如锁住了id&#x3D;1，会锁住(x,1]。</p><h4 id="插入意向锁"><a href="#插入意向锁" class="headerlink" title="插入意向锁"></a>插入意向锁</h4><p>插入意向锁，是插入一行记录操作之前需要获得的一种间隙锁，这个锁释放了一种插入方式的信号。 其是行级别的锁的一种特殊形式，但它并不是直接锁定某个具体的行记录，而是锁定索引记录之间的间隙，表示事务打算在该间隙内插入新行。<br>作用：</p><ul><li><strong>并发插入协调（提升效率）</strong>：当多个事务同时尝试在同一个索引间隙中插入数据时，<strong>每个事务首先都会获取一个插入意向锁</strong>，而不是立即（使用写锁）阻塞彼此。这样可以允许多个事务在不同的间隙位置并发插入数据，因为插入意向锁之间是兼容的。</li></ul><h4 id="锁模式兼容矩阵"><a href="#锁模式兼容矩阵" class="headerlink" title="锁模式兼容矩阵"></a>锁模式兼容矩阵</h4><p>兼容矩阵：（一个事务对一条记录持有锁，另一个事务申请）</p><table><thead><tr><th>兼容性</th><th>申请间隙锁</th><th>申请插入意向锁锁</th><th>申请记录锁</th><th>申请临键锁</th></tr></thead><tbody><tr><td>已持有<strong>间隙锁</strong></td><td>兼容</td><td>冲突</td><td>兼容</td><td>兼容</td></tr><tr><td>已持有<strong>插入意向锁</strong></td><td>兼容</td><td>兼容</td><td>兼容</td><td>兼容</td></tr><tr><td>已持有<strong>记录锁</strong></td><td>兼容</td><td>兼容</td><td>冲突</td><td>冲突</td></tr><tr><td>已持有<strong>临键锁</strong></td><td>兼容</td><td>冲突</td><td>冲突</td><td>冲突</td></tr></tbody></table><p>说明：</p><ul><li>持有了间隙锁&#x2F;临键锁后，不可插入，自然不支持获得插入意向锁。</li><li>记录锁和临键锁不可共享，自然是冲突的。</li><li>一个事务持有了插入意向锁，这意味着它计划在某个间隙内插入数据，但还没有实际执行插入操作。此时，其他事务仍有可能获取到该相同间隙的间隙锁。这是因为插入意向锁与间隙锁服务的目标不同，插入意向锁并不阻止其他事务锁定间隙，它仅仅表明了事务有在该间隙内插入数据的意向，而间隙锁则负责阻止其他事务在该范围内插入数据。</li></ul><h4 id="自增锁"><a href="#自增锁" class="headerlink" title="自增锁"></a>自增锁</h4><p>自增锁是一种特殊的表级别锁。它是专门针对AUTO_INCREMENT类型的列，对于这种列，如果表中新增数据时就会去持有自增锁。简言之，如果一个事务正在往表中插入记录，所有其他事务的插入必须等待，以便第一个事务插入的行，是连续的主键值。</p><p>参数innodb_autoinc_lock_mode：</p><ul><li>0：传统锁模式，使用表级AUTO_INC锁。一个事务的INSERT-LIKE语句在语句执行结束后释放AUTO_INC表级锁，而不是在事务结束后释放。</li><li>1：连续锁模式，连续锁模式对于Simple inserts不会使用表级锁，而是使用一个轻量级锁来生成自增值，因为InnoDB可以提前直到插入多少行数据。自增值生成阶段使用轻量级互斥锁来生成所有的值，而不是一直加锁直到插入完成。对于bulk inserts类语句使用AUTO_INC表级锁直到语句完成。</li><li>2：交错锁模式，所有的INSERT-LIKE语句都不使用表级锁，而是使用轻量级互斥锁。</li></ul><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p>介绍完InnoDB的七种锁后，将讲解如何给一条SQL加锁。<br>主要分为9种情况：</p><p>组合一：查询条件是主键，RC隔离级别<br>组合二：查询条件是唯一索引，RC隔离级别<br>组合三：查询条件是普通索引，RC隔离级别<br>组合四：查询条件上没有索引，RC隔离级别<br>组合五：查询条件是主键，RR隔离级别<br>组合六：查询条件是唯一索引，RR隔离级别<br>组合七：查询条件是普通索引，RR隔离级别<br>组合八：查询条件上没有索引，RR隔离级别<br>组合九：Serializable隔离级别</p><h4 id="RC隔离级别：主键为查询条件"><a href="#RC隔离级别：主键为查询条件" class="headerlink" title="RC隔离级别：主键为查询条件"></a>RC隔离级别：主键为查询条件</h4><p>如：在一个事务中执行删除操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_A (id <span class="hljs-type">int</span>,name <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>),<span class="hljs-keyword">primary</span> key ( id));<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_A <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> t_A <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>该记录（聚簇索引）会被添加<strong>一</strong>个<strong>X记录锁</strong>。</p><h4 id="RC隔离级别：唯一索引为查询条件"><a href="#RC隔离级别：唯一索引为查询条件" class="headerlink" title="RC隔离级别：唯一索引为查询条件"></a>RC隔离级别：唯一索引为查询条件</h4><p>如：在一个事务中执行删除操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_A (name <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>),id <span class="hljs-type">int</span>,<span class="hljs-keyword">primary</span> key (name),<span class="hljs-keyword">unique</span> key(id));<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_A <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> t_A <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>会加<strong>两</strong>个<strong>X记录锁</strong>，一把锁对应于<strong>id唯一索引</strong>上的<code>id=1</code>的记录，另一把锁对应于聚簇索引上的<code>[name=&#39;a&#39;,id=1]</code>的记录。</p><h4 id="RC隔离级别：普通索引为查询条件"><a href="#RC隔离级别：普通索引为查询条件" class="headerlink" title="RC隔离级别：普通索引为查询条件"></a>RC隔离级别：普通索引为查询条件</h4><p>如：在一个事务中执行删除操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_A (name <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>),id <span class="hljs-type">int</span>,<span class="hljs-keyword">primary</span> key (name),key(id));<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_A <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>),(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> t_A <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>会加<strong>多</strong>个<strong>X记录锁</strong>，几把锁对应于<strong>id普通索引</strong>上的<code>id=1</code>的记录，另外几把锁对应于聚簇索引上的<code>[name=&#39;a&#39;,id=1][name=&#39;b&#39;,id=1]</code>的记录。</p><h4 id="RC隔离级别：无索引为查询条件"><a href="#RC隔离级别：无索引为查询条件" class="headerlink" title="RC隔离级别：无索引为查询条件"></a>RC隔离级别：无索引为查询条件</h4><p>如：在一个事务中执行删除操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_A (name <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>),id <span class="hljs-type">int</span>,<span class="hljs-keyword">primary</span> key (name));<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_A <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>),(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> t_A <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>会加<strong>多</strong>个<strong>X记录锁</strong>，所有锁对应于聚簇索引上的<code>[name=&#39;a&#39;,id=1][name=&#39;b&#39;,id=1]</code>的记录。</p><h4 id="RR隔离级别：主键为查询条件"><a href="#RR隔离级别：主键为查询条件" class="headerlink" title="RR隔离级别：主键为查询条件"></a>RR隔离级别：主键为查询条件</h4><p>与<strong>RC隔离级别：主键为查询条件</strong>一致。</p><h4 id="RR隔离级别：唯一索引为查询条件"><a href="#RR隔离级别：唯一索引为查询条件" class="headerlink" title="RR隔离级别：唯一索引为查询条件"></a>RR隔离级别：唯一索引为查询条件</h4><p>与<strong>RC隔离级别：唯一索引为查询条件</strong>一致。</p><h4 id="RR隔离级别：普通索引为查询条件"><a href="#RR隔离级别：普通索引为查询条件" class="headerlink" title="RR隔离级别：普通索引为查询条件"></a>RR隔离级别：普通索引为查询条件</h4><p>会添加<strong>X锁</strong>与<strong>间隙锁Gap Lock</strong>。</p><p>如：在一个事务中执行更新操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t5 ( id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, c <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>, d <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">PRIMARY</span> KEY (id), KEY c (c)) ENGINE<span class="hljs-operator">=</span>InnoDB;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t5 <span class="hljs-keyword">values</span>(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>),(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>),(<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>),(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>),(<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>);<br><span class="hljs-keyword">update</span> t5 <span class="hljs-keyword">set</span> d<span class="hljs-operator">=</span>d<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> c <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>示意图：<br><img src="/2024/03/22/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_concurrent/RR%E6%99%AE%E9%80%9A.png"></p><p>c&#x3D;10这个记录更新时，不仅会有两把X锁，还会把区间（10,15）加间隙锁，因此要插入（12,12,12）记录时，会阻塞。</p><h4 id="RR隔离级别：无索引为查询条件"><a href="#RR隔离级别：无索引为查询条件" class="headerlink" title="RR隔离级别：无索引为查询条件"></a>RR隔离级别：无索引为查询条件</h4><p>会添加<strong>X锁</strong>与<strong>间隙锁Gap Lock</strong>。</p><p>如：在一个事务中执行更新操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t5 ( id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, c <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>, d <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">PRIMARY</span> KEY (id)) ENGINE<span class="hljs-operator">=</span>InnoDB;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t5 <span class="hljs-keyword">values</span>(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>),(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>),(<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>),(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>),(<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>);<br><span class="hljs-keyword">update</span> t5 <span class="hljs-keyword">set</span> d<span class="hljs-operator">=</span>d<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> c <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>示意图：<br><img src="/2024/03/22/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_concurrent/RR%E6%97%A0.png"></p><p>如果查询条件列没有索引，主键索引的所有记录，都将加上X锁，每条记录间也都加上间隙Gap锁。大家可以想象一下，任何加锁并发的SQL，都是不能执行的，全表都是锁死的状态。如果表的数据量大，那效率就更低。</p><h4 id="Serializable串行化"><a href="#Serializable串行化" class="headerlink" title="Serializable串行化"></a>Serializable串行化</h4><p>在Serializable串行化的隔离级别下，对于写的语句，比如update account set balance&#x3D; balance-10 where name&#x3D;‘Jay’;，跟RC和RR隔离级别是一样的。不一样的地方是，在查询语句，如select balance from account where name &#x3D; ‘Jay’;，在RC和RR是不会加锁的（仅MVCC），但是在Serializable串行化的隔离级别，即会加锁。</p>]]></content>
    
    
    <categories>
      
      <category>后端开发</category>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
      <tag>脏读</tag>
      
      <tag>Dirty read</tag>
      
      <tag>丢失修改</tag>
      
      <tag>Lost to modify</tag>
      
      <tag>不可重复读</tag>
      
      <tag>Unrepeatable read</tag>
      
      <tag>幻读</tag>
      
      <tag>Phantom read</tag>
      
      <tag>锁</tag>
      
      <tag>MVCC</tag>
      
      <tag>Multi-Version Concurrency Control</tag>
      
      <tag>多版本并发控制</tag>
      
      <tag>READ-UNCOMMITTED</tag>
      
      <tag>读取未提交</tag>
      
      <tag>READ-COMMITTED</tag>
      
      <tag>读取已提交</tag>
      
      <tag>REPEATABLE-READ</tag>
      
      <tag>可重复读</tag>
      
      <tag>SERIALIZABLE</tag>
      
      <tag>可串行化</tag>
      
      <tag>一致性非锁定读</tag>
      
      <tag>锁定读</tag>
      
      <tag>undo log</tag>
      
      <tag>快照读</tag>
      
      <tag>snapshot read</tag>
      
      <tag>当前读</tag>
      
      <tag>current read</tag>
      
      <tag>隐藏字段</tag>
      
      <tag>ReadView</tag>
      
      <tag>DB_TRX_ID</tag>
      
      <tag>DB_ROLL_PTR</tag>
      
      <tag>共享锁</tag>
      
      <tag>S锁</tag>
      
      <tag>排他锁</tag>
      
      <tag>X锁</tag>
      
      <tag>意向锁</tag>
      
      <tag>意向共享锁</tag>
      
      <tag>IS锁</tag>
      
      <tag>意向排他锁</tag>
      
      <tag>IX锁</tag>
      
      <tag>Intention Shared Lock</tag>
      
      <tag>Intention Exclusive Lock</tag>
      
      <tag>记录锁</tag>
      
      <tag>Record Lock</tag>
      
      <tag>间隙锁</tag>
      
      <tag>Gap Lock</tag>
      
      <tag>临建锁</tag>
      
      <tag>Next-Key Lock</tag>
      
      <tag>插入意向锁</tag>
      
      <tag>自增锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL：日志</title>
    <link href="/2024/03/21/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_log/"/>
    <url>/2024/03/21/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_log/</url>
    
    <content type="html"><![CDATA[<p>MySQL 日志 主要包括错误日志、查询日志、慢查询日志、事务日志、二进制日志几大类。本文将讲解其中比较重要的<strong>二进制日志binlog（归档日志）</strong>、<strong>事务日志redo log（重做日志）</strong>和<strong>undo log（回滚日志）</strong>。</p><h1 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h1><p>MySQL<strong>二制进日志（binlog）</strong>，也叫做<strong>变更日志（update log）</strong>。<br>二进制日志中记录了<strong>对MySQL数据库执行更改的所有操作</strong>，并且记录了语句发生时间、执行时长、操作数据等其它额外信息。</p><p>二进制日志主要用于<strong>数据库恢复</strong>和<strong>主从复制</strong>，以及审计操作，它包含了所有能够重现数据库状态变更所必需的信息。。如果 MySQL 数据库意外停止，可以通过二进制日志文件来查看用户执行了哪些操作，对数据库服务器文件做了哪些修改，然后根据二进制日志文件中的记录来恢复数据库服务器。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>二进制日志（binlog）中记录了对MySQL数据库执行更改的所有操作，并且记录了语句发生时间、执行时长、操作数据等其它额外信息：<br>主要包含以下内容：</p><ul><li><strong>逻辑操作</strong>：对数据库执行的原始SQL语句或其等价物。具体内容与格式有关：<ul><li><strong>Statement格式</strong>：记录执行的SQL语句本身，例如INSERT INTO table VALUES(…)、UPDATE table SET column&#x3D;… WHERE condition等。</li><li><strong>Row格式</strong>：记录每个受影响行的实际变化，而不是整个SQL语句。它会详细说明哪个表的哪一行如何被修改。</li><li><strong>Mixed格式</strong>：混合使用Statement和Row格式，MySQL根据SQL语句的特点自动选择最佳方式。</li></ul></li><li><strong>事务边界</strong>：<ul><li>Binlog以事务为单位记录变更，确保了事务的原子性和一致性。每个事务的所有操作作为一个整体被记录，且事务开始和结束都有相应的标志。</li></ul></li><li><strong>GTID（Global Transaction Identifier）</strong>：在支持GTID的MySQL版本中，binlog还会包含全局事务ID，用于主从复制时精确地跟踪和同步事务。</li><li><strong>DDL操作</strong>：对于数据定义语言（如CREATE TABLE、ALTER TABLE、DROP TABLE等）也会记录在binlog中。</li><li>其他元数据：事件头信息，如事务ID、时间戳、服务器ID等，用于数据恢复和复制过程中的校验和同步。</li></ul><h2 id="写入机制"><a href="#写入机制" class="headerlink" title="写入机制"></a>写入机制</h2><p>事务执行过程中，会先把日志写到binlog cache，事务提交的时候，再把binlog cache写到binlog文件中。<br>系统会给每个线程分配一个块内存作为binlog cache，以确保一个事务的binlog的一次性写入的。</p><p>示意图：<br><img src="/2024/03/21/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_log/writeBinlog.png"></p><p>注意，如果<code>write</code>操作不会将binlog文件写入磁盘（仅仅是存入缓存），<code>fsync</code>才是将binlog文件写入磁盘的真正动作。如果机器宕机，Buffer Pool里面的 binlog 就会丢失。</p><blockquote><p><strong>sync_binlog参数</strong>可用于控制write和fsync的时机。</p><ul><li>0：sync_binlog为0时，每次提交事务都进行write，执行fsync时机由操作系统决定。</li><li>1：每次提交事务都会执行fsync。</li><li>N(N&gt;1)：表示每次提交事务都write，但累积N个事务后才fsync。</li></ul></blockquote><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li><strong>基于时间点的恢复</strong>：在备份文件恢复的基础上，通过binlog日志，可以将数据库恢复到某一时间点；</li><li><strong>主从复制</strong>：在主从复制模式下，必须在主服务器上开启binlog日志；</li><li><strong>操作审计</strong>：对所有更改数据的操作进行审计。</li></ol><blockquote><p>操作审计：</p><ul><li>数据追踪与回溯：通过分析binlog，可以追溯数据库中的任何数据变更历史，这对于数据安全性、合规性要求高的场景尤其重要，比如金融、医疗等行业，需要记录详细的交易历史以供审计或法律调查。</li><li>审计复核：binlog可用于数据完整性验证，通过重新播放binlog中的事件，可以检查数据库是否按照预期进行了操作，从而帮助发现潜在的误操作或恶意篡改行为。</li><li>安全审计：安全审计时，binlog可以帮助识别未经授权的访问尝试、非法数据修改等安全事件，因为它记录了所有的数据修改语句。</li></ul><p>注意：MySQL本身的审计功能并非直接依赖binlog，而是通过专门的审计插件（如MySQL Enterprise Audit Plugin）或其他审计工具来实现更全面和规范的审计需求，这些工具可以提供更多定制化的审计过滤、报告生成等功能。不过，binlog确实是进行事后审计和数据一致性检查的重要数据源之一。</p></blockquote><h1 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h1><p><strong>undo log</strong>是一种用于<strong>撤销回退</strong>的日志。<br>在事务没提交之前，MySQL会先<strong>记录更新前的数据到 undo log日志文件里面</strong>，当事务回滚时或者数据库崩溃时，可以利用 undo log来进行回退。</p><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><ol><li><strong>提供回滚操作</strong>：在进行数据更新操作的时候，会记录undo log。如果因为某些原因导致事务回滚，那么这个时候MySQL就要执行回滚（rollback）操作，利用undo log将数据恢复到事务开始之前的状态。<ol><li>比如我们执行下面一条update语句：<code>update user set name = &quot;李四&quot; where id = 1;   ---修改之前name=张三</code></li><li>此时undo log会记录update之前的状态（id&#x3D;1,name&#x3D;‘张三’）；如果这个修改出现异常，就可以使用undo log日志中的操作来实现回滚操作，如：<code>update user set name = &quot;张三&quot; where id = 1;</code>，以保证事务的一致性。</li></ol></li><li><strong>实现多版本并发控制（MVCC）</strong>。</li></ol><p><strong>MVCC</strong>，即<strong>多版本控制</strong>。在MySQL数据库InnoDB存储引擎中，用undo Log来实现多版本并发控制(MVCC)。当读取的某一行被其他事务锁定时，它可以从undo log中分析出该行记录以前的数据版本是怎样的，从而让用户能够<strong>快照读</strong>读取到当前事务操作之前的数据。</p><blockquote><p><strong>快照读</strong>：SQL读取的数据是快照版本，也就是历史版本，不用加锁，普通的SELECT就是快照读。<br><strong>当前读</strong>：SQL读取的数据是最新版本。通过锁机制来保证读取的数据无法被其他事务进行修改。UPDATE、DELETE、INSERT、SELECT … LOCK IN SHARE MODE、SELECT … FOR UPDATE都是当前读。</p></blockquote><h2 id="存储机制"><a href="#存储机制" class="headerlink" title="存储机制"></a>存储机制</h2><p>undo log的存储由<code>InnoDB存储引擎</code>实现，其采用<strong>分段(segment)<strong>的方式进行存储的。<br><strong>rollback segment</strong>称为</strong>回滚段</strong>，每个回滚段中有1024个<code>undo log segment</code>。在MySQL5.5之后，可以支持128个rollback segment，每一个回滚段，内部由1024个undo segment 组成，即总共可以记录128 * 1024个undo操作。</p><p>存储结构示意图：<br><img src="/2024/03/21/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_log/undolog1.svg"></p><p>回滚指针第一次如果是insert语句的话，回滚指针为NULL，第二次update之后的undo log的回滚指针就会指向刚刚那一条undo log日志，依次类推，就会形成一条undo log的回滚链，方便找到该条记录的历史版本。</p><p>多个事务并行操作某一行数据时，不同事务对该行数据的修改会产生多个版本，然后通过回滚指针（roll_pointer），连成一个链表，这个链表就称为版本链。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>在更新数据之前，MySQL会提前生成undo log日志，当事务提交的时候，并不会立即删除undo log，因为后面可能需要进行回滚操作。<br>要执行回滚（rollback）操作时，从缓存中读取数据。undo log日志的删除是通过通过后台<strong>purge线程</strong>进行回收处理的。</p><p>示意图：<br><img src="/2024/03/21/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_log/undolog2.svg"></p><p>举例：</p><ol><li>事务A执行update操作，此时事务还没提交，会将数据进行备份到对应的undo buffer，然后由undo buffer持久化到磁盘中的undo log文件中，<strong>此时undo log保存了未提交之前的操作日志</strong>，接着将操作的数据，也就是Teacher表的数据持久保存到InnoDB的数据文件IBD。</li><li>此时事务B进行查询操作，直接<strong>从undo buffer缓存中进行读取</strong>，这时事务A还没提交事务，如果要<strong>回滚（rollback）事务，就直接从undo buffer缓存读取。</strong></li></ol><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>使用undo log实现<strong>原子性</strong>和<strong>持久化</strong>的事务的流程：</p><ol><li>事务开始</li><li>第一次更改：<ol><li>将name&#x3D;A记录至undo log</li><li>更改Buffer Pool中的name&#x3D;B（原name&#x3D;A）</li></ol></li><li>第二次更改：<ol><li>将name&#x3D;B记录至undo log</li><li>更改Buffer Pool中的name&#x3D;C</li></ol></li><li>持久化undo log（Undo Log在事务执行过程中就已经逐步地持久化到了磁盘中）</li><li>提交事务，此时事务才真正完成，同时持久化Buffer Pool中的改动至磁盘。对于MySQL复制环境，在提交事务后，Binlog也会被持久化到磁盘。</li></ol><p><strong>注意：在更新数据前会提前记录undo log。</strong></p><p>执行该流程的优点：</p><ol><li><strong>成功情况</strong>：事务提交将与数据一起写入磁盘。</li><li><strong>异常情况</strong>：<ol><li>持久化undo log后发生异常：undo log是完整的，可以用来回滚。</li><li>持久化undo log前或时发生异常：磁盘上的数据保持在事务开始前。</li></ol></li></ol><blockquote><p>感觉思路有点像磁盘的RAID1级或缓存的差异失效时间，提供了两个备份，因此任何时间点发生崩溃都可以保证数据不丢失。</p></blockquote><h1 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h1><p><strong>redo log（重做日志）</strong>，也叫重放日志。和undo log回滚日志一样，都是在数据库发生意外时用来进行数据恢复的，之前已经介绍了undo log，我们都知道undo log记录的是数据更新前的样子，主要保证事务的原子性；而redo log则记录的是<strong>事务执行过程中的修改情况</strong>，redo log主要保证事务的持久性。</p><p>Redo Log 并不是直接用于保存事务提交后的“脏页”本身，而是用于<strong>保存那些在事务执行过程中对数据页所做的修改操作的日志记录</strong>。当一个事务在InnoDB存储引擎中执行时，它首先修改内存中的数据页（这些数据页位于Buffer Pool中），这些被修改过的数据页被称为“脏页”。</p><p>Redo Log 记录了足以重新执行（redo）这些修改操作所需的信息，即使在系统发生故障（如宕机）的情况下，也能确保当数据库重启时，能够<strong>通过重做(redo)这些日志记录来恢复未持久化到磁盘的事务影响</strong>。<br><strong>在事务提交时，Redo Log 会被刷新到磁盘上的 redo log 文件中，这个过程通常早于对应数据页被刷回磁盘（即脏页flush到磁盘数据文件）。</strong>这种机制使得MySQL能够满足ACID中的持久性要求，即一旦事务提交，其对数据库的影响即使在系统崩溃后也能保持不变。</p><h2 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h2><ol><li><strong>保证事务的持久性</strong>：如果buffer pool缓冲池中的<strong>脏数据还没有进行刷盘</strong>的时候，此时数据库发生崩溃，重启服务后，我们可以通过redo log日志找到需要重放到磁盘文件的那些数据记录。</li><li><strong>提高事务提交的速度</strong>：buffer pool缓冲池中的数据直接刷新到磁盘，是一个随机IO，效率较差，而把buffer pool中的数据记录到redo log，是一个顺序IO，可以提高事务提交的速度。可将redo log持久化作为事务完成的标志（崩溃了也能通过redo log恢复），所以速度更快。</li></ol><h2 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h2><p>redo log由两部分组成：</p><ul><li>redo log buffer：重做日志缓存，存在于内存中，容易发生丢失。</li><li>redo log file：重做日志文件，存在于磁盘中，不容易发生丢失。</li></ul><p>为了确保每次日志都能写入到事务日志文件中，在每次将log buffer中的日志写入日志文件的过程中都会调用一次操作系统的<strong>fsync操作（即fsync()系统调用）</strong>。因为MySQL是工作在用户空间的，log buffer处于用户空间的内存中。要写入到磁盘上的log file中，中间还要经过操作系统内核空间的os buffer，调用fsync()的作用就是将OS buffer中的日志刷到磁盘上的log file中。</p><p>redo log的工作原理示意图：（包括binlog、undo log、redo log）<br><img src="/2024/03/21/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_log/log_all.svg"></p><h2 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h2><p>之前的undo log中的事务执行流程并不完整，现在提供补充redo log后的完整流程：<br>数据需要在事务提交前写到磁盘，<strong>只要事务成功提交，数据必然已经持久化到磁盘。</strong></p><ol><li>事务开始</li><li>每次数据更改步骤：<ol><li>对于第一次更改（如将name从A改为B）：<ol><li>创建一个Undo Log条目，记录原始值A以及变更前的数据状态。</li><li>更新内存中的Buffer Pool（即Page Cache），将name字段改为B。</li></ol></li><li>对于第二次更改（如将name从B改为C）：<ol><li>再创建一个新的Undo Log条目，记录原始值B及变更前的状态。</li><li>更新内存中的Buffer Pool，将name字段改为C。</li></ol></li></ol></li><li><strong>Undo Log在事务执行过程中按照checkpoint机制或者达到一定条件时会被刷入磁盘，以保证事务的持久性</strong>。</li><li>在事务准备提交阶段，<strong>Redo Log会被先于事务提交持久化到磁盘</strong>，通常通过fsync()系统调用确保其内容已经稳定存储。</li><li>提交事务，此时事务才真正完成，同时持久化Buffer Pool中的改动至磁盘（通过Redo Log恢复）。对于MySQL复制环境，在提交事务后，Binlog也会被持久化到磁盘。</li></ol><p>异常情况说明：</p><ul><li>成功情况：一旦事务成功提交，意味着Redo Log已持久化，通过Redo Log可以重播事务的所有更改，即使系统崩溃重启也能恢复数据到最新状态。<strong>只要事务成功提交，数据必然已经持久化到磁盘。</strong></li><li>异常情况：<ul><li>如果在持久化Undo Log之后发生异常，由于Undo Log和Redo Log都已经持久化，可以根据Redo Log进行前滚恢复，若需要回滚事务，则可以使用Undo Log来还原数据。</li><li>如果在持久化Undo Log之前或过程中发生异常，由于InnoDB遵循“Write-Ahead Logging”原则（即修改数据前先写日志），因此磁盘上的数据仍然是事务开始前的状态，不会出现数据不一致的情况。在系统恢复时，未完成的事务可以通过检查Undo Log来决定是否需要回滚。</li></ul></li></ul><h1 id="日志一致"><a href="#日志一致" class="headerlink" title="日志一致"></a>日志一致</h1><p>由于binlog和redo log的写入并不是一个原子性操作，所以可能发生写完redo log日志后，binlog日志写期间发生了异常的情况。<br>对此，InnoDB使用了<strong>两阶段提交</strong>的方案。</p><p>将redo log的写入拆成了两个步骤prepare和commit，这就是两阶段提交。示意图：<br><img src="/2024/03/21/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_log/%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.png"></p><p>使用两阶段提交后，写入binlog时发生异常也不会有影响，因为MySQL根据redo log日志恢复数据时，发现redo log还处于prepare阶段，并且没有对应的binlog日志，就会回滚该事务。</p>]]></content>
    
    
    <categories>
      
      <category>后端开发</category>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
      <tag>MVCC</tag>
      
      <tag>多版本并发控制</tag>
      
      <tag>undo log</tag>
      
      <tag>日志</tag>
      
      <tag>binlog</tag>
      
      <tag>Statement格式</tag>
      
      <tag>Row格式</tag>
      
      <tag>Mixed格式</tag>
      
      <tag>sync_binlog</tag>
      
      <tag>Buffer Pool</tag>
      
      <tag>rollback segment</tag>
      
      <tag>回滚段</tag>
      
      <tag>redo log</tag>
      
      <tag>两阶段提交</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL：索引</title>
    <link href="/2024/03/20/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_index/"/>
    <url>/2024/03/20/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_index/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文将初步介绍MySQL数据库索引的数据结构与用处。</p></blockquote><p>索引是一种用来<strong>快速查询</strong>和<strong>检索数据</strong>的数据结构。许多查询往往只涉及到数据库的一部分，比如查询出某个ID为xxx的学生，系统如果需要读取每个学生来遍历获得该条记录，那么这种操作方式无疑是低效的。在理想情况下，系统应该能直接定位这些记录。</p><p>索引底层数据结构存在很多种类型，常见的索引结构有: B 树， B+树 和 Hash、红黑树。</p><blockquote><p>在 MySQL 中，无论是 Innodb 还是 MyIsam，都使用了 <strong>B+树</strong>作为索引结构。</p></blockquote><h1 id="索引底层数据结构"><a href="#索引底层数据结构" class="headerlink" title="索引底层数据结构"></a>索引底层数据结构</h1><h2 id="二叉查找树（BST）"><a href="#二叉查找树（BST）" class="headerlink" title="二叉查找树（BST）"></a>二叉查找树（BST）</h2><p>当二叉查找树是平衡的时候，也就是树的每个节点的左右子树深度相差不超过 1 的时候，查询的时间复杂度为 O(log2(N))，具有比较高的效率。然而，当二叉查找树不平衡时，例如在最坏情况下（有序插入节点），树会退化成线性链表（也被称为斜树），导致查询效率急剧下降，时间复杂退化为 O（N）。</p><p>由于二叉查找树的性能非常依赖于它的平衡程度，这就导致其不适合作为 MySQL 底层索引的数据结构。为了解决这个问题，并提高查询效率，人们发明了多种在二叉查找树基础上的改进型数据结构，如平衡二叉树、B-Tree、B+Tree 等。</p><h2 id="自平衡二叉查找树（AVL）"><a href="#自平衡二叉查找树（AVL）" class="headerlink" title="自平衡二叉查找树（AVL）"></a>自平衡二叉查找树（AVL）</h2><p>AVL 树的特点是保证任何节点的左右子树高度之差不超过 1，因此也被称为高度平衡二叉树，它的查找、插入和删除在平均和最坏情况下的时间复杂度都是 O(logn)。</p><p>由于 AVL 树需要频繁地进行旋转操作来保持平衡，因此会有较大的计算开销进而降低了查询性能。并且， 在使用 AVL 树时，每个树节点仅存储一个数据，而每次进行磁盘 IO 时只能读取一个节点的数据，如果需要查询的数据分布在多个节点上，那么就需要进行多次磁盘 IO。所以在实际应用中，AVL 树使用的并不多。</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>红黑树是一种自平衡二叉查找树，通过在插入和删除节点时进行颜色变换和旋转操作，使得树始终保持平衡状态。</p><p>虽然红黑树在插入和删除节点时只需进行 O(1) 次数的旋转和变色操作，即可保持基本平衡状态，但是红黑树并不追求严格的平衡，而是大致的平衡。正因如此，红黑树的查询效率稍有下降，因为红黑树的平衡性相对较弱，可能会导致树的高度较高，这可能会导致一些数据需要进行多次磁盘 IO 操作才能查询到，这也是 MySQL 没有选择红黑树的主要原因。</p><h2 id="B树-B-树"><a href="#B树-B-树" class="headerlink" title="B树&amp;B+树"></a>B树&amp;B+树</h2><p>B 树也称 B-树,全称为<strong>多路平衡查找树</strong>。</p><blockquote><p>目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。</p></blockquote><h3 id="B-树叶节点"><a href="#B-树叶节点" class="headerlink" title="B+树叶节点"></a>B+树叶节点</h3><p>典型的B+树叶节点会包含n-1个搜索码值（即字段值）和n个指针（指向记录或下一节点）。<br>示意图：（n&#x3D;4）<br><img src="/2024/03/20/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_index/B+%E5%8F%B6%E8%8A%82%E7%82%B9.svg"></p><p>一个叶节点必须容纳$\lceil (n-1)&#x2F;2 \rceil 到 n-1$个值。</p><h3 id="B-树非叶节点"><a href="#B-树非叶节点" class="headerlink" title="B+树非叶节点"></a>B+树非叶节点</h3><p>B+树的非叶节点是叶节点之上的一个多级（稀疏）索引，其结构和叶节点相同，但是其指针均指向非叶节点。<br>一个非叶节点必须容纳$\lceil n&#x2F;2 \rceil 到 n$个指针。一个节点中的指针数被称为<strong>扇出（fanout）</strong>。非叶节点也被称为<strong>内部节点（internal node）</strong>。（根节点的指针数可少于$\lceil n&#x2F;2 \rceil$）</p><p>对于一个内部节点来说，其指针$P_i$指向的子树中，子树的最大值必须小于等于该指针后的搜索码值，子树的最小值必须大于等于该指针前的搜索码值。<br>示意图：（n&#x3D;4）<br><img src="/2024/03/20/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_index/B+root.svg"></p><p>B+树是一定平衡的，即根到叶节点的每个条路径长度都一致。</p><blockquote><p>注意：上述是最好要求搜索码值是唯一的。如果不唯一，数据库会将搜索码从一个值变成一个二元组，比如nameA&#x3D;nameB，那么当name字段变成搜索码时，nameA在节点中的搜索码值可能变成(nameA,0)，nameB变成(nameA,1)，以保证搜索码值唯一。如果不使用二元组替换，这将导致B+树的节点会变成一个链表，或者需要更改整个B+树的存储逻辑，过于繁琐。</p></blockquote><h3 id="B-树查询"><a href="#B-树查询" class="headerlink" title="B+树查询"></a>B+树查询</h3><blockquote><p>目前不考虑搜索码值可重复的情况。</p></blockquote><p>查询过程：</p><ol><li>查询起始：<ul><li>查询从根节点开始，根节点始终位于内存中。</li><li>根据要查找的键值，在根节点中执行二分查找或按照索引顺序查找合适的指针。</li></ul></li><li>节点间导航：<ul><li>找到与目标键值最接近的键，对应的指针会指向下一个层级的节点。</li><li>依据指针继续访问下一层级的节点，这个过程同样进行二分查找或顺序查找，不断缩小查找范围。</li></ul></li><li>递归查找：<ul><li>重复上述步骤，沿着B+树的层级结构自顶向下移动，每次都会根据中间节点中的键值指引到更低层级的节点。</li></ul></li><li>抵达叶子节点：<ul><li>当查询到达叶子节点时，该节点包含了实际的数据记录或者如果是辅助索引，则存储了主键值。</li><li>对于精确匹配的查询，直接在叶子节点中找到键值相等的记录即可。</li><li>对于范围查询，可以通过叶子节点之间的链表进行高效的顺序扫描。</li></ul></li></ol><p>在应用场景下，一个B+树节点通常可以容纳几百至上千个键值对（计算方式为：$(磁盘页大小-元数据)&#x2F;(键值大小 + 指针大小)$，磁盘IO一次读出一页，即一个节点），所需磁盘IO次数为$log_{100}(X)$相比平衡二叉树中一个节点仅两个子节点的搜索效率$log_2(X)$要高非常多。</p><h3 id="B-树更新"><a href="#B-树更新" class="headerlink" title="B+树更新"></a>B+树更新</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>插入：先使用查询，找到将搜索码值将出现的叶节点。然后在该叶节点的对应位置进行插入操作。<br>当叶子节点的值的数量在插入后大于n-1时，需要进行拆分操作，将该叶子节点拆成两个叶子节点，前一个有$\lceil n&#x2F;2 \rceil$个节点，后一个有剩余的节点，然后将拆分的叶子节点添加到父节点中。如果父节点在添加了一个节点后也放不下了需要进行拆分，则继续进行拆分，在父父节点添加父节点拆成两个节点的节点，以此不断循环，如果根节点也放不下了，那么将根节点也拆分，并重新添加一个新的根节点。</p><p>示意图：<br><img src="/2024/03/20/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_index/B+insert1.svg"></p><p>如果此时再插入一个id&#x3D;7.5的记录，就会将5-7的叶子节点拆分，然后第一个内部节点需要多一个指针，就会导致第一个内部节点再次拆分，进而多出一个内部节点。（画图略）</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>删除即是插入的逆操作，边界条件下需要将叶子节点进行合并，进而导致内部节点的合并，以致最后的减深度。（自己类推即可，不做描述）</p><blockquote><p>待完善……</p></blockquote><h3 id="B树与B-树的异同"><a href="#B树与B-树的异同" class="headerlink" title="B树与B+树的异同"></a>B树与B+树的异同</h3><ul><li>B 树的所有节点既存放键(key) 也存放数据(data)，而<strong>B+树只有叶子节点存放 key 和 data</strong>，其他内节点只存放 key。</li><li>B 树的叶子节点都是独立的；B+树的叶子节点有一条<strong>引用链</strong>指向与它相邻的叶子节点。</li><li>在 B 树中进行范围查询时，首先找到要查找的下限，然后对 B 树进行中序遍历，直到找到查找的上限；而 B+树的范围查询，只需要对链表进行遍历即可。</li></ul><p>综上，B+树与 B 树相比，具备更少的 IO 次数、更稳定的查询效率和更适于范围查询这些优势。</p><h2 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h2><p>哈希表可以做到快速检索数据（接近O(1)）。<br>MySQL 的 InnoDB 存储引擎不直接支持常规的哈希索引，但是，InnoDB 存储引擎中存在一种特殊的哈希表：<strong>自适应哈希索引（Adaptive Hash Index）</strong>。自适应哈希索引并不是传统意义上的纯哈希索引，而是结合了 B+Tree 和哈希索引的特点，以便更好地适应实际应用中的数据访问模式和性能需求。自适应哈希索引的每个哈希桶实际上是一个小型的 B+Tree 结构。这个 B+Tree 结构可以存储多个键值对，而不仅仅是一个键。这有助于减少哈希冲突链的长度，提高了索引的效率。</p><p>在MySQL运行的过程中，如果InnoDB发现，有很多寻路很长（比如B+树层数太多、回表次数多等情况）的SQL，并且有很多SQL会命中相同的页面（Page）的话，InnoDB会在自己的内存缓冲区（Buffer Pool）里，开辟一块区域，建立自适应哈希索引（Adaptive Hash Index，AHI）：一个动态创建和维护的哈希索引机制，主要目的是为了提高某些工作负载下的数据检索速度。</p><p>聚簇索引访问记录过程：<br><img src="/2024/03/20/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_index/B+tree.png"><br>普通索引访问记录过程：<br><img src="/2024/03/20/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_index/B+tree2.png"></p><p>通过普通索引查询记录时，分为两步：</p><ol><li>查询会先访问普通索引，定位到主键值9；</li><li>再通过步骤1得到的主键值，回表到聚集索引上经过二次遍历定位到具体的完整记录。</li></ol><p>从上面的流程图可以看出，不管是聚集索引还是普通索引，记录定位的寻路路径（Search Path）都很长。回到Adaptive Hash Index的概念上：在MySQL运行的过程中，如果InnoDB发现：有很多寻路很长（比如B+树层数太多、回表次数多等情况）的SQL；有很多SQL会命中相同的页面（Page），就会建立自适应哈希索引（Adaptive Hash Index，AHI），以加速查询。</p><p>MySQL建立Adaptive Hash Index的过程：</p><ol><li><strong>监控与识别热点</strong>：<ul><li>InnoDB存储引擎会持续监控缓冲池（Buffer Pool）中的页面访问模式。</li><li>当发现某个索引频繁被访问时，特别是对于点查询（即通过主键或唯一二级索引查找行记录的操作），InnoDB会判断是否适合构建哈希索引以加速这类查询。</li></ul></li><li><strong>自动创建哈希索引</strong>：<ul><li>如果InnoDB确定建立哈希索引可以带来性能提升，它将在内存中为那些经常访问的索引页上的键值构建一个哈希索引结构。</li><li>这个哈希索引是在缓冲池内部创建的，并且仅针对已经加载到内存中的索引部分。</li></ul></li><li><strong>插入与更新操作</strong>：<ul><li>随着DML操作（INSERT、UPDATE、DELETE）的发生，InnoDB会对相应的哈希索引进行同步更新，以确保哈希索引的正确性。</li></ul></li><li><strong>自适应调整</strong>：<ul><li>AHI具有自适应性，意味着它可以动态地创建、删除或者调整哈希索引，完全无需数据库管理员手动干预。</li><li>如果原先认为热点的索引不再频繁访问，或者由于内存压力导致缓冲池中的其他数据更需要空间，InnoDB会自动移除不再高效的哈希索引。</li></ul></li></ol><p>在Adaptive Hash Index中，Key就是经常访问到的索引键值，Value就是该索引键值匹配的完整记录所在页面（Page）的位置。因为是MySQL InnoDB自己维护创建的，所以称之为“自适应”哈希索引。</p><p><img src="/2024/03/20/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_index/%E8%87%AA%E9%80%82%E5%BA%94Hash%E8%A1%A8.png"></p><blockquote><p>在一般的哈希索引中，如果出现哈希冲突（即两个不同的键经过哈希函数计算后映射到同一个槽位），通常采用链表或其他方法链接冲突的键值对。但在InnoDB的AHI中，为了避免长链表带来的性能下降，特别是在内存有限且热点数据冲突较多的情况下，选择将哈希冲突的键值对组织成B+树结构。这样做的好处是：</p><ul><li>尽管AHI仍然是哈希索引的形式，但是B+树的特性使得即使在哈希冲突的情况下也能保持相对稳定的时间复杂度（O(log n)）来查找数据，相比于单纯的链表查询效率更高。</li><li>B+树天然支持范围查找，尽管AHI主要用于点查优化，但如果因为哈希冲突导致的键值分布在一个桶内，那么在这个小规模的B+树上进行局部范围查找也是可行的，这比纯哈希索引更有优势。</li></ul></blockquote><h1 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h1><blockquote><p>评价一个索引的因素：</p><ul><li><strong>访问类型</strong>：能有效支持的访问类型，如找到某个值、找到某个范围内的值。</li><li><strong>访问时间</strong>：使用该索引找到一个值或一个值的集合所需要的时间。</li><li><strong>插入时间</strong>：通过该索引，插入一个数据项的时间+插入后更新索引的时间。</li><li><strong>删除时间</strong>：通过该索引，找到该数据项并删除的时间+删除后更新索引的时间。</li><li><strong>空间花销</strong>：索引结构所需空间。</li></ul></blockquote><p><strong>搜索码</strong>：用于在文件中查找记录的属性或属性集被称为搜索码（search key）。如果一个文件有多个索引，则它就有多个搜索码。<br><strong>索引项（index entry）</strong>：又称<strong>索引记录（index record）</strong>，由一个<code>搜索码值</code>和<code>指针</code>构成。<code>指针</code>会指向该搜索码值对应的一条或多条记录。</p><h2 id="顺序索引"><a href="#顺序索引" class="headerlink" title="顺序索引"></a>顺序索引</h2><p><strong>顺序索引（ordered index）</strong>：基于值的顺序排序。</p><blockquote><p><strong>散列索引（hash index）</strong>：基于将值平均分布到若干桶中。值对应的桶由散列函数决定。 </p></blockquote><p>顺序索引有两类：</p><ul><li><strong>稠密索引（dense index）</strong>：每个搜索码值（即字段值）都被一个索引项所指向。具有相同搜索码值的其余记录会顺序地排序在第一条记录后。</li><li><strong>稀疏索引（sparse index）</strong>：只为某些搜索码值建立索引。只有聚集索引才能使用稀疏索引。当定位记录时，从最大搜索码值小于或等于所搜索的记录的搜索码值的索引项开始遍历，直到找到为止。</li></ul><p>稠密索引示意图：<br><img src="/2024/03/20/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_index/%E7%A8%A0%E5%AF%86%E7%B4%A2%E5%BC%95.svg"><br>稀疏索引示意图：<br><img src="/2024/03/20/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_index/%E7%A8%80%E7%96%8F%E7%B4%A2%E5%BC%95.svg"></p><h2 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h2><p><strong>聚集索引（clustering index）</strong>：又称<strong>主索引（primary index）</strong>，搜索码定义了文件的次序。<br><strong>非聚集索引（nonclustering index）</strong>：又称<strong>辅助索引（secondary index）</strong>，搜索码的次序与文件的排序次序不同。</p><h2 id="多级索引"><a href="#多级索引" class="headerlink" title="多级索引"></a>多级索引</h2><blockquote><p>注意：多级索引同时适用于索引顺序文件和B+树，只不过索引顺序文件中是外层索引块，B+树中是非叶节点。</p></blockquote><p>如果索引很小，就可以放在主存中，这样查找一个索引项的速度就会很快。但是如果索引很大，就会导致需要将其放在磁盘中，进而导致当使用索引进行搜索时，需要进行多次磁盘IO（尤其是使用二分法搜索索引时，可能导致$log_2(n)$次的磁盘IO）。多级索引就是为了解决这个问题。<br>假设有1000000条记录，一个索引块可保存100条索引项，那么就会存在10000个索引块。（一个块可能是4KB）<br>当进行查找时，二分法需要14次磁盘的随机读才能找到对应的索引块，这可能需要0.1s的时间。</p><p>为此，我们需要加快找到索引块的方式，多级索引就是一种方案。<br>索引项总是顺序排序的，我们将索引文件也看做是顺序文件，并对索引块再次建立一层稀疏索引：<br>示意图：<br><img src="/2024/03/20/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/mysql_index/%E5%A4%9A%E5%B1%82%E7%B4%A2%E5%BC%95.svg"></p><p>好了，假设一样是10000个索引块，现在通过外层索引（将原先的索引称为内层索引），我们只需要100个外层索引块即可建立指向10000索引项的的外层索引项，并且在读取某一个记录时，只需要查找外层索引→内层索引→数据块即可，仅一次内存访问和两次磁盘IO操作。<br>如果有更多的记录，我们同样可以继续建立更外层的索引。</p><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p>如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为<strong>覆盖索引（Covering Index）</strong>。<br>我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终是要执行“回表”操作的，也就是要通过主键再查找一次。<br>而覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。</p><h2 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h2><p>使用表中的多个字段创建索引，就是<strong>联合索引</strong>，也叫<strong>组合索引</strong>或<strong>复合索引</strong>。</p><p>如果有这样一个索引定义在table (col1, col2, col3)上，那么索引记录将是按照col1升序排列，对于col1相等的记录，则按照col2升序排列，以此类推。</p><h3 id="最左前缀匹配原则"><a href="#最左前缀匹配原则" class="headerlink" title="最左前缀匹配原则"></a>最左前缀匹配原则</h3><ul><li>最左前缀匹配原则意味着只要查询条件中包含了索引的最左侧列（这里是A），就可以利用索引来优化查询。也就是说，不只是查询条件只包括A列时能使用索引，当查询条件包含A和B（即A&#x3D;? AND B&#x3D;?），或者A、B和C（即A&#x3D;? AND B&#x3D;? AND C&#x3D;?）时，都可以利用这个联合索引来加快查询速度。</li><li>但是如果查询条件只包含B或C（即B&#x3D;? 或B&#x3D;? AND C&#x3D;?），因为(a, b, c) 是联合索引，是先按 a 排序，在 a 相同的情况再按 b 排序，在 b 相同的情况再按 c 排序。所以，b 和 c 是全局无序，局部相对有序的，这样在没有遵循最左匹配原则的情况下，是无法利用到索引的。</li></ul><p><strong>最左匹配原则会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like) 就会停止匹配。</strong></p><ul><li>向右匹配的概念是，一旦满足最左列的条件后，数据库会继续检查下一个索引列（即从左到右），只要查询条件允许。</li><li>停止匹配原则在于，如果查询条件中出现了一个范围查询（如A &gt; ?、A &lt; ?、B BETWEEN ? AND ?等），那么在遇到这个范围查询的列之后的索引列将不再用于索引查找。例如，对于上述索引，若查询条件为A &#x3D; ? AND B &gt; ? AND C &#x3D; ?，虽然A列和B列都能利用索引，但由于B列进行了范围查询，因此C列将不会使用索引来优化查询，数据库系统可能需要进行额外的全表扫描或其他操作来获取满足C列条件的记录。</li></ul><blockquote><p>注意，如果范围查询中，存在确定情况下的记录（即&gt;&#x3D;、&lt;&#x3D;、Between…and…、like导致的$[a,b)$区间），则在刚好&#x3D;的情况下，范围查询索引右侧的索引仍旧可以起效，但是如果是不确定的情况（即&gt;、&lt;、like中去除了a后的$(a,b)$），则会停止匹配。<br>比如条件为a&gt;&#x3D;1 and b&#x3D;1，针对a&#x3D;1的记录，判定b时仍然可使用联合索引；但是对于a&gt;1的记录，则只能使用联合索引中a的部分。<br>相关来源：<a href="https://mp.weixin.qq.com/s/8qemhRg5MgXs1So5YCv0fQ">小林coding</a></p></blockquote><h1 id="索引失效场景"><a href="#索引失效场景" class="headerlink" title="索引失效场景"></a>索引失效场景</h1><ol><li><strong>联合索引失效</strong><ul><li>未符合联合索引要求的最左前缀匹配原则（即不包含联合索引最左侧的字段）。<ul><li>注意：MySQL8新增索引跳跃扫描的功能，即第一列索引的唯一值较少时，即使 where 条件没有第一列索引，查询的时候也可以用到联合索引。</li></ul></li><li>向右匹配时遇到范围查询。</li></ul></li><li><strong>where范围过大</strong><ul><li>where查询范围过大，可能导致MySQL最优选择全表扫描，进而导致索引失效。</li></ul></li><li><strong>where条件中包含函数或计算</strong><ul><li>由于索引保存的是索引字段的原始值，而不是经过函数&#x2F;计算后的值，自然就没办法走索引了。<ul><li>注意：MySQL 8.0 开始，索引特性增加了函数索引，可以针对函数计算后的值建立一个索引。</li></ul></li></ul></li><li><strong>like %…</strong><ul><li>范围过大造成索引没有意义从而失效的情况。</li></ul></li><li><strong>条件包含or导致失效</strong><ul><li>如果在OR前的条件列是索引列，而在OR后的条件列不是索引列，那么索引会失效，因为验证后一个条件是需要遍历全表的。<ul><li>在Or的条件中两边都加上索引，即可避免全表扫描。</li></ul></li></ul></li><li><strong>(not) in …</strong><ul><li>当IN的取值范围较大时会导致索引失效，走全表扫描，与like %…类似。</li></ul></li><li><strong>order By</strong><ul><li>在需要排序的场景下，存在两种策略：<ul><li>索引+回表：走索引，索引是排好序的，但是需要回表。</li><li>全表扫描：直接全表扫描排序，不用回表。</li></ul></li><li>MySQL认为后一种效率更高，因此orderBy情况下索引会失效。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>后端开发</category>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
      <tag>B+树</tag>
      
      <tag>自适应哈希索引</tag>
      
      <tag>Adaptive Hash Index</tag>
      
      <tag>二叉查找树</tag>
      
      <tag>BST</tag>
      
      <tag>自平衡二叉查找树</tag>
      
      <tag>AVL</tag>
      
      <tag>多路平衡查找树</tag>
      
      <tag>顺序索引</tag>
      
      <tag>散列索引</tag>
      
      <tag>聚集索引</tag>
      
      <tag>主索引</tag>
      
      <tag>搜索码</tag>
      
      <tag>非聚集索引</tag>
      
      <tag>辅助索引</tag>
      
      <tag>覆盖索引</tag>
      
      <tag>联合索引</tag>
      
      <tag>最左前缀匹配原则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA：AOT入门</title>
    <link href="/2024/03/18/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JIT_AOT/"/>
    <url>/2024/03/18/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JIT_AOT/</url>
    
    <content type="html"><![CDATA[<p>本文将介绍使用AOT相比使用JVM运行java程序的优点，以及如何使用AOT生成可执行文件。</p><blockquote><p>资料来源：<br><a href="https://www.graalvm.org/">GraalVM官网</a><br><a href="https://mp.weixin.qq.com/s/4haTyXUmh8m-dBQaEzwDJw">阿里巴巴微信公众号</a></p></blockquote><h1 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h1><p>传统的一个 Java 应用从代码编写到启动运行大致可以分为如下步骤：</p><ol><li>首先，编写<code>.java</code>源代码程序。</li><li>然后，借助<strong>javac</strong>工具将<code>.java</code>文件翻译为<code>.class</code>的<strong>字节码</strong>。字节码是 Java 中非常重要的内容之一，正是因为它的出现，Java 才实现对底层环境的屏蔽，达到 Write once, run anywhere 的效果。</li><li>基于步骤2的<code>.class</code>文件会被打包成 <strong>jar</strong> 包或者 <strong>war</strong> 包进行部署执行，部署过程中通过Java虚拟机加载应用程序然后<strong>解释字节码</strong>运行业务逻辑。<ul><li>我们需要格外注意的是，<code>.class-&gt;机器码</code>的过程中，JVM类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了<strong>JIT（Just in Time Compilation）</strong>编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说Java 是<strong>编译与解释共存</strong>的语言。</li></ul></li></ol><p>示意图：<br><img src="/2024/03/18/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JIT_AOT/java_jdk.svg"></p><p><img src="/2024/03/18/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JIT_AOT/java2.svg"></p><h1 id="AOT"><a href="#AOT" class="headerlink" title="AOT"></a>AOT</h1><h2 id="传统方案的缺陷"><a href="#传统方案的缺陷" class="headerlink" title="传统方案的缺陷"></a>传统方案的缺陷</h2><p><img src="/2024/03/18/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JIT_AOT/JVM_invoke.png"><br>Java 程序启动运行详细过程如上图所示。</p><p>具体过程：</p><ol><li>一个 Java 应用启动过程首先需要<strong>加载</strong>该应用程序对应的<strong>JVM 虚拟机软件程序到内存中</strong>，如上图<span style="color: #fe4006;">红色</span>部分描述所示。</li><li>然后 JVM 虚拟机再<strong>加载对应的应用程序到内存中</strong>，该过程对应上图中的<span style="color: #ccfefe;">浅蓝色</span>类加载（Class Load，CL）部分。</li><li>在类加载过程中，<strong>应用程序</strong>就会开始<strong>被解释执行</strong>，对应上图中<span style="color: #adce00;">浅绿色</span>部分。</li><li>解释执行过程 JVM 对垃圾对象进行回收，对应上图中的<span style="color: #fed220;">黄色</span>部分。</li><li>随着程序的运行的深入，JVM 会采用<strong>及时编译（Just In Time，JIT）技术</strong>对执行频率较高的代码进行编译优化，以便提升应用程序运行速度。JIT 过程对应上图中的<span style="color: #fefefe;">白色</span>部分。</li><li>经过 JIT 编译优化后的代码对应图中<span style="color: #00ad00;">深绿色</span>部分。</li></ol><p>经过上述分析，不难看出，一个 Java 程序从启动到达到被JIT动态编译优化会经过<strong>VM init</strong>，<strong>App init</strong>和<strong>App active</strong>几个阶段，相比于其他一些编译型语言，其<strong>冷启动问题</strong>比较严重。</p><p>除了冷启动问题，在一个 Java 程序运行过程中，什么都不做首先就需要加载一个 JVM 虚拟机，该操作一般占用一定内存。另外，由于 Java 程序是先解释执行字节码，然后再做 JIT 编译优化。由于相比于一些编译型语言其将编译优化的动作后置到运行时，因此非常容易出现实际加载的代码比实际需要运行的代码多很多的情况，造成了一些无效内存占用情况。综上所述就是为什么很多人常诟病 Java 程序<strong>运行内存占用高</strong>的几点主要原因。</p><h2 id="解决方案：AOT"><a href="#解决方案：AOT" class="headerlink" title="解决方案：AOT"></a>解决方案：AOT</h2><p><strong>提前编译（Ahead-of-Time Compilation，AOT Compilation）</strong>或者叫<strong>静态编译</strong>在 Java 领域很早就被提了出来。其核心思想就是让 Java 程序也跟其他程序语言，比如 C&#x2F;C++ 一样，先编译后执行解决上述问题，将 Java 程序的编译阶段提前到程序启动前，然后在编译阶段进行代码编译优化，让程序启动既巅峰，消除冷启动，降低运行时内存开销。</p><p>Java 领域静态编译的实现技术有很多，其中最具代表性的还属 Oracle 推出的 <strong>GraalVM</strong> 开源高性能多语言运行时平台。</p><blockquote><p><img src="/2024/03/18/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JIT_AOT/GraalVM.png"><br>GraalVM 中通过提供 Truffle 解释器实现框架，让开发人员可以使用 Truffle 提供的 API 快速实现特定语言的解释器从而实现对上图中各种编程语言所写的程序都能进行编译运行的效果，从而成为一个多语言运行时平台。GraalVM 实现静态编译能力的编译器就是 GraalVM JIT Compiler。静态编译框架和运行时由 Substrate VM 子项目实现，兼容 OpenJDK 运行时实现，提供了原生镜像程序运行时的异常处理、同步调度、线程管理、内存管理等功能。<br>因此，GraalVM 不仅可以作为一个多语言运行时平台，而且由于其中提供的 GraalVM JIT Compiler 静态编译器，其可用来对 Java 程序进行静态编译。</p></blockquote><p>基于静态编译的 Java 程序相比于目前应用广泛的 JVM 运行时编译 Java 程序，整个从代码编写到编译执行的区别如下：<br><img src="/2024/03/18/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JIT_AOT/nativeImage.png"></p><p>相比于 JVM 运行时方式，静态编译在运行之前会先对程序解析编译，然后生成一个跟运行时环境强相关的 <strong>native image 可执行文件</strong>，最后直接执行该文件即可启动程序进行执行。</p><h3 id="静态编译过程"><a href="#静态编译过程" class="headerlink" title="静态编译过程"></a>静态编译过程</h3><blockquote><p>静态编译过程到底会对 Java 程序做哪些解析操作？静态编译后的可执行程序垃圾回收问题怎么解决？</p></blockquote><p>GraalVM 静态编译实现示意图：<br><img src="/2024/03/18/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80/Java/JIT_AOT/%E9%9D%99%E6%80%81%E7%BC%96%E8%AF%91.png"></p><p>图中左侧前三个输入内容 Applicaton，Libraries 和 JDK 是一个 Java 程序编译运行必备的三部分，不必多说。而 <strong>Substrate VM</strong> 就是 GraalVM 中实现静态编译的核心部分，在整个静态编译过程中扮演了重要作用。<br>在静态分析过程中Substrate VM 通过<strong>上下文不敏感的指向分析（Points-to Analysis）</strong>来对应用程序做<strong>静态分析</strong>，其可以在不需要运行程序的情况下，基于源程序分析给出所有可能的可达函数列表然后作为后续编译阶段的输入对程序<strong>进行静态编译</strong>。<br>在静态分析完成后，基于静态分析结果的可达函数列表，会调用介绍的 GraalVM 中的 GraalVM JIT Compiler 编译器将应用程序编译为与目标平台强相关的本地代码以完成编译过程。<br>编译完成后，就会进入到上图中右侧 Native 可执行文件生成阶段。在该过程中，Substrate VM 会将静态编译阶段确定和初始化的内容以及跟 Substrate VM 运行时以及 JDK 库中的数据一起保存到最终可执行文件的 Image Heap 中。其中 <strong>Substrate VM 运行时</strong>就为最终可执行文件提供了运行过程中所需的垃圾回收、异常处理等能力。</p><h4 id="静态分析局限性"><a href="#静态分析局限性" class="headerlink" title="静态分析局限性"></a>静态分析局限性</h4><p>在Substrate VM的静态分析过程中，由于静态分析无法覆盖 Java 中的反射、动态代理、JNI 调用等动态特性。这也造成了很多的 Java 框架由于在实现过程中使用了大量的上述特性，因此，都难以直接基于 Substrate VM 完成对自身所有代码的静态分析，需要通过<strong>额外的外部配置</strong>来解决静态分析本身的不足。</p><blockquote><p>一个java项目，该如何进行静态编译适配呢？其最核心要解决的本质问题，就是将开源框架中的 GraalVM 无法识别和处理的动态内容转换为其可识别的内容即可。</p><p>Spring 社区为了应对Spring项目中反射和动态代理等特性在静态编译环境下的挑战，开发了<strong>AOT Engine</strong>工具。AOT Engine专注于在构建阶段对Spring应用中的特定内容进行静态分析与转换处理，这些内容包括但不限于使用@Configuration注解声明的配置类及其初始化逻辑。<br>通过AOT Engine，能够识别并预先处理那些原本只能在运行时动态生成的类结构，如基于Java的动态代理类。这样，在静态编译阶段就能够有效生成这些原本动态创建的对象，确保它们能被Substrate VM或类似支持提前编译的技术识别和兼容。<br>因此，AOT Engine有效地解决了Spring应用在静态编译场景下可能遇到的问题，使得Spring应用能够适应静态编译并实现性能优化，同时保持框架的灵活性和功能完整性。</p><p>对于非 Spring 体系项目或者自身使用了一些 JDK 中原生的反射或者其他 Java 动态特性，针对自身代码中的 Java 动态用法需要在项目中提供对应的静态配置文件才能在静态编译过程中让编译器识别其中的动态特性，对其进行编译构建才能实现项目的顺利编译与执行。<br>针对这种情况，GraalVM 提供了一个名叫 <strong>native-image-agent</strong> 的 Tracing Agent 来帮助大家更方便地收集元数据并准备配置文件。该 Agent 会在常规 Java VM 上的应用程序运行过程中自动收集其中的动态特性使用情况并将其转换为 GraalVM 可以识别的配置文件。最后，将通过 Agent 生成的框架自身的动态配置文件存放在项目的：META-INF&#x2F;native-image&#x2F;&lt;group.id&gt;&#x2F;&lt;artifact.id&gt; 目录下，就可以在静态编译过程中根据这些配置内容，识别项目包中的动态特性。</p></blockquote><h2 id="基于静态编译构建微服务"><a href="#基于静态编译构建微服务" class="headerlink" title="基于静态编译构建微服务"></a>基于静态编译构建微服务</h2><blockquote><p>Spring Cloud Alibaba 2022.0.0.0 版本所包含的所有中间件客户端已完成了构建 GraalVM 原生应用的适配。为用户提供了开箱即用的静态编译能力。</p></blockquote><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li>安装 GraalVM 发行版。（windows安装可参考：<a href="https://medium.com/graalvm/using-graalvm-and-native-image-on-windows-10-9954dc071311">Using GraalVM and Native Image on Windows 10</a>）</li><li>检查 java -version 的输出来验证是否配置了正确的版本。</li></ol><blockquote><p>建议不要使用Windows。</p></blockquote><h3 id="应用构建"><a href="#应用构建" class="headerlink" title="应用构建"></a>应用构建</h3><ol><li>要使用 GraalVM 静态编译能力构建微服务，首先确保项目的<code>Spring Boot</code>版本为<code>3.0.0</code>或以上<code>Spring Cloud</code>版本为<code>2022.0.0</code>或以上。然后在项目中引入<code>Spring Cloud Alibaba 2022.0.0.0</code>版本的所需模块依赖即可。</li><li>通过maven命令生成应用中反射、序列化和动态代理所需的 Hints 配置文件：<code>mvn -Pnative spring-boot:run</code>（前提是应用中引入了<code>spring-boot-starter-parent</code>父模块）</li><li>之后应用会启动，进行预执行，需要尽可能完整的测试一遍应用的所有功能，保证应用的大部分代码都被测试用例覆盖，该过程会基于 GraalVM 的 native-image-agent 收集程序中的动态特性，这样可以确保完整生成应用运行过程中的所有必须的动态属性。</li><li>运行完所有测试用例后，我们发现<code>resource/META-INF/native-image</code>目录下会生成以下一些<code>hints</code>文件:<ul><li>resource-config.json：应用中资源 hint 文件</li><li>reflect-config.json：应用中反射定义 hint 文件</li><li>serialization-config.json：应用中序列化内容 hint 文件</li><li>proxy-config.json：应用中 Java 代理相关内容 hint 文件</li><li>jni-config.json：应用中 Java Native Interface（JNI）内容 hint 文件</li></ul></li></ol><blockquote><p>上述预执行过程主要为了扫描应用自身业务代码以及其他第三方包中的动态特性，以便后续静态编译过程能顺利进行，应用能正常启动。</p><p>如果没有使用动态特性，可直接进行下一步。</p></blockquote><h3 id="静态编译"><a href="#静态编译" class="headerlink" title="静态编译"></a>静态编译</h3><p>通过maven命令来构建原生镜像：<code>mvn -Pnative native:compile</code><br>成功执行后，可在<code>/target</code>目录看到生成的可执行文件。</p><h3 id="执行可执行文件"><a href="#执行可执行文件" class="headerlink" title="执行可执行文件"></a>执行可执行文件</h3><p>进入<code>/target</code>，命令行输入<code>./&lt;可执行文件名称&gt;</code>，即可发现项目被光速启动了。</p><blockquote><p>这是真TM快啊！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>后端开发</category>
      
      <category>语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>JDK</tag>
      
      <tag>AOT</tag>
      
      <tag>JIT</tag>
      
      <tag>GraalVM</tag>
      
      <tag>运行时编译</tag>
      
      <tag>及时编译</tag>
      
      <tag>静态编译</tag>
      
      <tag>静态分析</tag>
      
      <tag>提前编译</tag>
      
      <tag>字节码</tag>
      
      <tag>冷启动问题</tag>
      
      <tag>native image</tag>
      
      <tag>Substrate VM</tag>
      
      <tag>Substrate VM运行时</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列：8.消息功能特性</title>
    <link href="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-message/"/>
    <url>/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-message/</url>
    
    <content type="html"><![CDATA[<h1 id="普通消息"><a href="#普通消息" class="headerlink" title="普通消息"></a>普通消息</h1><p>普通消息是RocketMQ中最基础的消息。常用于微服务解耦、数据集成等场景。</p><blockquote><p>数据集成：在不同系统、应用程序或数据存储之间传输、转换、共享和同步数据的情况。</p></blockquote><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li><strong>初始化</strong>：消息被生产者构建并完成初始化，待发送到服务端的状态。</li><li><strong>待消费</strong>：消息被发送到服务端，对消费者可见，等待消费者消费的状态。</li><li><strong>消费中</strong>：消息被消费者获取，并按照消费者本地的业务逻辑进行处理的过程。</li><li><strong>消费提交</strong>：消费者完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被<br>处理（包括消费成功和失败）。</li><li><strong>消息删除</strong>：RocketMQ 按照消息保存机制滚动清理最早的消息数据，将消息从物理文件中<br>删除。</li></ol><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul><li>在broker中先提前创建NORMAL类型的消息主题：<code>sh mqadmin updateTopic-n &lt;nameserver_address&gt;-t &lt;topic_name&gt;-c &lt;cluster_name&gt;-a +message.type=NORMAL</code></li><li>在客户端SDK中向该主题发送消息即可。</li></ul><p>普通消息没什么好讲的，补充一下同步消息和异步消息的概念吧。</p><h2 id="同步消息"><a href="#同步消息" class="headerlink" title="同步消息"></a>同步消息</h2><p><strong>同步消息</strong>：生产者发送一条消息给Broker，需要阻塞等待Broker返回响应，然后才会继续发送后续的消息。</p><p>示意图：<br><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-message/%E5%90%8C%E6%AD%A5%E6%B6%88%E6%81%AF.svg"></p><p>如果在发行消息时，发送消息未送达，或未接受到Broker的ack响应，都会重新发送，直到失误一定次数后抛出异常。</p><h2 id="异步消息"><a href="#异步消息" class="headerlink" title="异步消息"></a>异步消息</h2><p><strong>异步消息</strong>：发送一条消息给Broker，不需要阻塞等待Broker返回响应，可直接继续发送后续的消息。<br>当异步消息发送成功或失败时，会回调在发送时设置的回调函数进行操作。</p><p>示意图：<br><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-message/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF.svg"></p><h1 id="延时消息"><a href="#延时消息" class="headerlink" title="延时消息"></a>延时消息</h1><p><strong>延时消息</strong>为RocketMQ中的高级特性消息。常用于分布式定时调度、任务超时处理场景。</p><blockquote><p>分布式定时调度：如每天5点执行文件清理<br>任务超时处理：订单下单后暂未支付，需要等待一段时间后关闭订单</p></blockquote><p>RocketMQ延时消息设置的延时时间是当前系统时间后的某一个时间戳，而不是一段延时时长，定时时间的格式为毫秒级的Unix时间戳。</p><p>社区版的定时消息支持18个等级的延迟：</p><table><thead><tr><th>延迟等级</th><th>延迟时间</th><th>延迟等级</th><th>延迟时间</th></tr></thead><tbody><tr><td>1</td><td>1s</td><td>10</td><td>6min</td></tr><tr><td>2</td><td>5s</td><td>11</td><td>7min</td></tr><tr><td>3</td><td>15s</td><td>12</td><td>8min</td></tr><tr><td>4</td><td>30s</td><td>13</td><td>9min</td></tr><tr><td>5</td><td>1min</td><td>14</td><td>10min</td></tr><tr><td>6</td><td>2min</td><td>15</td><td>20min</td></tr><tr><td>7</td><td>3min</td><td>16</td><td>30min</td></tr><tr><td>8</td><td>4min</td><td>17</td><td>1h</td></tr><tr><td>9</td><td>5min</td><td>18</td><td>2h</td></tr></tbody></table><h2 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li>初始化：消息被生产者构建并完成初始化，待发送到服务端的状态。</li><li><strong>定时中：消息被发送到服务端，和普通消息不同的是，服务端不会直接构建消息索引，而是会将定时消息单独存储在定时存储系统中，等待定时时刻到达。</strong></li><li>待消费：定时时刻到达后，服务端将消息重新写入普通存储引擎，对下游消费者可见，等待消费者消费的状态。</li><li>消费中：消息被消费者获取，并按照消费者本地的业务逻辑进行处理的过程。</li><li>消费提交：消费者完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。</li><li>消息删除：RocketMQ 按照消息保存机制滚动清理最早的消息数据，将消息从物理文件中删除。</li></ol><h2 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h2><p>使用mqadmin工具创建延迟类型的主题：<code>sh mqadmin updateTopic-n &lt;nameserver_address&gt;-t &lt;topic_name&gt;-c &lt;cluster_name&gt;-a +message.type=DELAY</code></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="1-SCHEDULE-TOPIC-XXXX"><a href="#1-SCHEDULE-TOPIC-XXXX" class="headerlink" title="1.SCHEDULE_TOPIC_XXXX"></a>1.SCHEDULE_TOPIC_XXXX</h3><p>当Broker接收到延迟消息时，会将该消息的Topic和MessageQueueID等属性作为消息扩展属性存储起来，然后将该消息存储到<strong>SCHEDULE_TOPIC_XXXX</strong>主题中，根据延时等级存储到对应的18个消息队列。</p><h3 id="2-定时线程池"><a href="#2-定时线程池" class="headerlink" title="2.定时线程池"></a>2.定时线程池</h3><p>Broker 会开启一个定时线程池，里面一共有18个核心线程，这个线程池的任务就是定时调度（间隔100ms）查看SCHEDULE_TOPIC_XXXX下的每个队列的消息，一旦有到期的消息，就分发到原Topic的队列中供消费者消费。</p><p>示意图：<br><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-message/delayMessage.svg"></p><h1 id="顺序消息"><a href="#顺序消息" class="headerlink" title="顺序消息"></a>顺序消息</h1><p>顺序消息为RocketMQ中的高级特性消息，常用于有序事件处理、数据库变更增量同步等场景。</p><blockquote><p>数据库变更增量同步：如数据库操作日志，不可乱序。</p></blockquote><h2 id="生命周期-2"><a href="#生命周期-2" class="headerlink" title="生命周期"></a>生命周期</h2><p>顺序消息生命周期与普通消息生命周期相同。</p><h2 id="使用方式-2"><a href="#使用方式-2" class="headerlink" title="使用方式"></a>使用方式</h2><ol><li>使用mqadmin工具创建顺序消息类型的主题：<code>sh mqadmin updateTopic-n &lt;nameserver_address&gt;-t &lt;topic_name&gt;-c &lt;cluster_name&gt;-a +message.type=FIFO</code></li><li>发送消息时需要设置<strong>MessageGroup</strong>，该值用于为消息设置<strong>GroupID</strong>，同一个GroupID的消息只会被其中一个消费者（如果有一个包含多个消费者的消费者组订阅顺序主题）消费，从而确保消息的顺序性。</li><li>消费消息时，必须提交消费结果。同一个<strong>MessageGroup</strong>的消息，如果前序消息没有消费完成，再次调用Receive是获取不到后续消息的。</li></ol><h2 id="保证顺序性"><a href="#保证顺序性" class="headerlink" title="保证顺序性"></a>保证顺序性</h2><p>为保证顺序性，需同时保证<strong>生产顺序性</strong>和<strong>消费顺序性</strong>。</p><ul><li>保证消息<strong>生产的顺序性</strong>，必须满足<strong>单一生产者</strong>、<strong>串行发送</strong>两个条件。<ul><li><strong>单一生产者</strong>：消息生产的顺序性仅支持单一生产者，不同生产者分布在不同的系统，即使设置相同的消息组，不同生产者之间产生的消息也无法判定其先后顺序。</li><li><strong>串行发送</strong>：生产者客户端支持多线程安全访问，但如果生产者使用多线程并行发送，则不同线程间产生的消息将无法保证先后顺序。</li></ul></li><li>保证消息<strong>消费的顺序性</strong>，必须满足<strong>投递顺序</strong>、<strong>有限重试</strong>两个条件。<ul><li><strong>投递顺序</strong>：RocketMQ通过客户端SDK和服务端通信协议保障消息按照服务端存储顺序投递，但业务方消费消息时需要严格按照接收—处理—应答的语义处理消息，避免因异步处理导致消息乱序。（消费者类型为PushConsumer时，RocketMQ保证消息按照存储顺序一条一条投递给消费者，若消费者类型为SimpleConsumer，则消费者有可能一次拉取多条消息。此时，消息消费的顺序性需要由业务方自行保证。）</li><li><strong>有限重试</strong>：RocketMQ顺序消息投递仅在重试次数限定范围内，即一条消息如果一直重试失败，超过最大重试次数后将不再重试，跳过这条消息消费，不会一直阻塞后续消息处理。（顺序消息消费失败进行消费重试时，为保障消息的顺序性，后续消息不可被消费，必须等待前面的消息消费完成后才能被处理。）</li></ul></li></ul><p>服务端顺序存储逻辑如下：相同消息组的消息按照先后顺序被存储在同一个队列；不同消息组的消息可以混合在同一个队列中，且不保证连续：<br><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-message/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E9%80%BB%E8%BE%91.png"><br>如上图所示，同组的消息均保证顺序。</p><h2 id="全局与分区"><a href="#全局与分区" class="headerlink" title="全局与分区"></a>全局与分区</h2><p><strong>全局顺序消息</strong>：需要将所有的消息发送到同一个队列（设置同一个MessageGroup），并且消费不能并发消息，性能差。<br><strong>分区顺序消息</strong>：仅保证同一批业务逻辑相关消息的顺序，而并发度取决于Topic下的队列数，不同队列之间可以并发处理顺序消息，互不影响，性能较好。</p><h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><p>rocketMq的顺序消息，通过两种机制来保证消息只会被一个线程处理：</p><ol><li>borker维护全局队列锁，保证只有一个客户端可获得该队列消息。</li><li>客户端内维护了局部队列锁，保证在一个JVM应用里面，这个队列只会被一个线程消费。</li></ol><h3 id="1-维护全局队列锁"><a href="#1-维护全局队列锁" class="headerlink" title="1. 维护全局队列锁"></a>1. 维护全局队列锁</h3><p>在 RocketMQ 中，有两种基本的消息消费模型：<strong>并发消费（MessageListenerConcurrently 实现）</strong>和<strong>有序消费（MessageListenerOrderly 实现）</strong>。<br>并发消费不保证消息的消费顺序，而<strong>有序消费则保证了在同一个消息队列（Queue）中消息的消费顺序与生产顺序一致</strong>。</p><p><code>ConsumeMessageOrderlyService</code>该类在初始化的时候会生成一个定时线程池，然后在<code>ConsumeMessageOrderlyService</code>启动的时候，会创建一个任务，1s执行一次<code>lockMQPeriodically</code>这个方法，就是<strong>给当前客户端所消费的所有队列</strong>去broker进行上锁。（ConsumeMessageOrderlyService执行在消费者本地）<br><code>lockMQPeriodically</code>内部会调用<code>lockBatchMQ</code>发送上全局锁请求到Broker，对MessageQueue进行上锁，并获得上锁结果。</p><p>上全局锁过程：</p><ol><li>循环判断当前队列，是否被当前的客户端持有，如果已经持有了，那么更新下持有时间。对未持有锁的队列，存入<code>notLocakedMqs</code>。</li><li>循环<code>notLocakedMqs</code>，尝试获取全局锁。尝试过程如下：<ol><li>获得用来锁全局锁信息的锁。    </li><li>每个队列（当前客户端所消费的所有队列）的全局锁信息。</li><li>当锁信息为空时，说明当前队列没有被上锁，设置该队列锁为当前客户所有。</li><li>如果队列锁为当前队列所有，则更新持有时间。</li><li>如果队列锁已过期，无论之前是什么客户端持有，都获得该队列锁并更新持有时间。</li><li>否则说明该锁已被其他客户端持有，获得失败。</li></ol></li></ol><p>当获得了全局队列锁后，即可进入本地队列锁。</p><h3 id="2-维护本地队列锁"><a href="#2-维护本地队列锁" class="headerlink" title="2.维护本地队列锁"></a>2.维护本地队列锁</h3><p><code>ConsumeMessageOrderlyService</code>中对消息消费的策略：</p><ol><li>当从broker拉取到的消息后，会放入<code>ProcessQueue</code>，<code>ProcessQueue</code>内部会根据offset对消息做有序存储，保证单个队列的消息是有序的。</li><li>只有当<code>ProcessQueue</code>中存在消息且目前不在消费（目前无线程正在消费），才会构建<code>ConsumerRequest</code>消费任务到线程池去进行消费。</li><li><code>ConsumerRequest</code>的消费策略（<code>run</code>方法）：<ol><li>获取本地的队列锁，本地的队列锁获取成功，则进行处理；如果获取失败则调用tryLockLaterAndReconsume延迟消费消息。</li><li>再次判断全局队列锁有无获得成功，未成功则退出。</li><li>调用监听器消费信息，获得结果。</li><li>当结果为异常时，重试。</li></ol></li></ol><blockquote><p>当消费者数量变更的时候，会触发负载均衡，客户端会重新计算消费的队列，这个时候会把不需要再消费的队列的全局锁释放掉，同时还是去borker里面对新消费的队列进行上锁，如果上锁失败，那么这个队列的消息是不能消费的，只有上锁成功才能被消费。</p></blockquote><h1 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h1><p>事务消息为RocketMQ中的高级特性消息，应用于保证分布式事务的最终一致性场景。</p><p>RocketMQ的事务消息支持<strong>二阶段的提交能力</strong>。将二阶段提交和本地事务绑定，实现全局提交结果的一致性。</p><blockquote><p>需要注意的是，事务消息的特点是支持回滚消息（即二阶段未通过后可将消息移出），而不是通过RocketMQ来管理分布式事务并实现最终一致性。比如有一段代码，要求具有原子性，其中包括发送一些消息、更改一些数据等功能，当发生异常时，要求数据库可回滚，消息也可回滚。</p></blockquote><h2 id="事务消息处理流程"><a href="#事务消息处理流程" class="headerlink" title="事务消息处理流程"></a>事务消息处理流程</h2><ol><li>生产者将消息发送至Broker。</li><li>Broker持久化消息，返回ACK。目前消息状态为（事务待提交）。</li><li>生产者开始执行本地事务逻辑。</li><li>生产者根据本地事务执行结果向服务端提交二次确认结果（Commit或是Rollback），服务端收到确认结果后处理逻辑如下：<ol><li>二次确认结果为Commit：服务端将半事务消息标记为可投递，并投递给消费者。</li><li>二次确认结果为Rollback：服务端将回滚事务，不会将半事务消息投递给消费者。</li></ol></li><li>在断网或者是生产者应用重启的特殊情况下，若服务端未收到发送者提交的二次确认结果，或服务端收到的二次确认结果为Unknown未知状态，经过固定时间后，服务端将对消息生产者即生产者集群中任一生产者实例发起<strong>消息回查</strong>。 </li><li>生产者收到消息回查后，需要检查对应消息的本地事务执行的最终结果。</li><li>生产者根据检查到的本地事务的最终状态再次提交二次确认，服务端仍按照步骤4对半事务消息进行处理。</li></ol><h2 id="生命周期-3"><a href="#生命周期-3" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li><strong>初始化</strong>：半事务消息被生产者构建并完成初始化，待发送到服务端的状态。</li><li><strong>事务待提交</strong>：半事务消息被发送到服务端，和普通消息不同，并不会直接被服务端持久化，而是会被单独存储到事务存储系统中，等待第二阶段本地事务返回执行结果后再提交。此时消息对下游消费者不可见。</li><li><strong>消息回滚</strong>：第二阶段如果<strong>事务执行结果明确为回滚</strong>，服务端会将半事务消息回滚，该事务消息流程终止。</li><li><strong>提交待消费</strong>：第二阶段如果<strong>事务执行结果明确为提交</strong>，服务端会将半事务消息重新存储到普通存储系统中，此时消息对下游消费者可见，等待被消费者获取并消费。</li><li><strong>消费中</strong>：消息被消费者获取，并按照消费者本地的业务逻辑进行处理的过程。 此时服务端会等待消费者完成消费并提交消费结果，如果一定时间后没有收到消费者的响应，RocketMQ会对消息进行重试处理。</li><li><strong>消费提交</strong>：消费者完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。</li><li><strong>消息删除</strong>：RocketMQ按照消息保存机制滚动清理最早的消息数据，将消息从物理文件中删除。</li></ol><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>使用mqadmin工具创建事务类型主题：<code>sh mqadmin updateTopic -n &lt;nameserver_address&gt; -t &lt;topic_name&gt; -c &lt;cluster_name&gt; -a +message.type=TRANSACTION</code>。</li><li>事务生产者需要提供一个事务检查器，用于检查确认异常半事务的中间状态，比如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构造事务生产者：事务消息需要生产者构建一个事务检查器，用于检查确认异常半事务的中间状态。</span><br><span class="hljs-type">Producer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> provider.newProducerBuilder()<br>        .setTransactionChecker(messageView -&gt; &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 事务检查器一般是根据业务的ID去检查本地事务是否正确提交还是回滚，此处以订单ID属性为例。</span><br><span class="hljs-comment">             * 在订单表找到了这个订单，说明本地事务插入订单的操作已经正确提交；如果订单表没有订单，说明本地事务已经回滚。</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> messageView.getProperties().get(<span class="hljs-string">&quot;OrderId&quot;</span>);<br>            <span class="hljs-keyword">if</span> (Strings.isNullOrEmpty(orderId)) &#123;<br>                <span class="hljs-comment">// 错误的消息，直接返回Rollback。</span><br>                <span class="hljs-keyword">return</span> TransactionResolution.ROLLBACK;<br>            &#125;<br>            <span class="hljs-keyword">return</span> checkOrderById(orderId) ? TransactionResolution.COMMIT : TransactionResolution.ROLLBACK;<br>        &#125;)<br>        .build();<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>注意：消息回查时，对于正在进行中的事务不要返回Rollback或Commit结果，应继续保持Unknown的状态。如果事务执行较慢，消息回查太快，可以将第一次事务回查时间设置较大一些或让程序能正确识别正在进行中的事务。</p></blockquote><h2 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="1-RMQ-SYS-TRANS-HALF-TOPIC"><a href="#1-RMQ-SYS-TRANS-HALF-TOPIC" class="headerlink" title="1. RMQ_SYS_TRANS_HALF_TOPIC"></a>1. RMQ_SYS_TRANS_HALF_TOPIC</h3><p>和顺序消息类似，发送事务消息到Broker时，Broker会检查是否为事务消息，是则会将原先的Topic、queue存储在属性中，并将该事务消息的topic替换为<code>RMQ_SYS_TRANS_HALF_TOPIC</code>，存入该主题。</p><h3 id="2-TransactionMessageCheckService"><a href="#2-TransactionMessageCheckService" class="headerlink" title="2. TransactionMessageCheckService"></a>2. TransactionMessageCheckService</h3><p>该主题内消息会不被消费者消费，而是等到生产者提交或回滚，再将该消息发往Topic或直接丢弃。<br>会有一个**定时线程<code>TransactionMessageCheckService</code>**，定时扫描<code>RMQ_SYS_TRANS_HALF_TOPIC</code>下的消息，反查生产者的反差接口来判断事务有无成功，成功则投递到原Topic，失败则丢弃，未知则跳过。</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
      <tag>RocketMQ</tag>
      
      <tag>普通消息</tag>
      
      <tag>同步消息</tag>
      
      <tag>异步消息</tag>
      
      <tag>延时消息</tag>
      
      <tag>SCHEDULE_TOPIC_XXXX</tag>
      
      <tag>MessageGroup</tag>
      
      <tag>顺序消息</tag>
      
      <tag>生产顺序性</tag>
      
      <tag>消费顺序性</tag>
      
      <tag>单一生产者</tag>
      
      <tag>串行发送</tag>
      
      <tag>投递顺序</tag>
      
      <tag>有限重试</tag>
      
      <tag>全局顺序消息</tag>
      
      <tag>分区顺序消息</tag>
      
      <tag>ConsumeMessageOrderlyService</tag>
      
      <tag>全局队列锁</tag>
      
      <tag>本地队列锁</tag>
      
      <tag>事务消息</tag>
      
      <tag>RMQ_SYS_TRANS_HALF_TOPIC</tag>
      
      <tag>TransactionMessageCheckService</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列：7.消息消费</title>
    <link href="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/"/>
    <url>/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/</url>
    
    <content type="html"><![CDATA[<h1 id="推模式与拉模式"><a href="#推模式与拉模式" class="headerlink" title="推模式与拉模式"></a>推模式与拉模式</h1><h2 id="推消息"><a href="#推消息" class="headerlink" title="推消息"></a>推消息</h2><p>推消息是指，当Broker接受到消息后，会主动将消息推送给消费者。</p><p><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/mq-push1.svg"></p><p>该模式的优缺点：</p><ul><li>优点：实时性高，消费者简单。</li><li>缺点：Broker无法得知消费者状态，可能导致推送过多消息。</li></ul><h3 id="改进推模式"><a href="#改进推模式" class="headerlink" title="改进推模式"></a>改进推模式</h3><p>上述模式中，Broker无法得知消费者的状态，因此添加反馈机制：</p><p><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/mq-push2.svg"></p><p>Broker在推送消息前，先获得消费者的状态，再进行消息推送。</p><p>优缺点：</p><ul><li>优点：可以实现削峰填谷，及时性高。</li><li>缺点：Broker职责过多（需维护消费者状态），影响性能（如果消费者较多）。</li></ul><p>所以<strong>推模式适用在消费者不多、消息量不大、及时性要求高的场景</strong>。</p><h2 id="拉消息"><a href="#拉消息" class="headerlink" title="拉消息"></a>拉消息</h2><p>拉消息是指，消费者主动从Broker获得消息。</p><p><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/mq-pull1.svg"></p><p>优缺点：</p><ul><li>优点：该方式可以充足考虑到消费者的性能，消费者会自行决定处理消息的速率。</li><li>缺点：及时性低，如果消费者请求频率过高，会导致消息忙请求；频率低则会导致消息及时性低。<br><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/mq-pull2.svg"></li></ul><h3 id="改进拉模式"><a href="#改进拉模式" class="headerlink" title="改进拉模式"></a>改进拉模式</h3><p>拉模式存在一种变种：<strong>长轮询</strong>。</p><blockquote><p>在传统的轮询中，客户端会定期向服务器发送请求，询问是否有新的数据。这种方式效率较低，因为大部分时间服务器都没有新数据可供返回。</p><p>长轮询改进了这一点。在长轮询中，客户端发送一个请求到服务器，服务器不会立即返回结果。相反，服务器会保持连接打开，直到有新数据可供返回，或者超时时间到达。一旦有新数据到达，服务器就会立即返回响应给客户端，客户端收到响应后立即发起下一次长轮询请求。<br>长轮询的优点是可以实现实时更新，而不需要客户端频繁地发送请求。然而，它也有一些缺点，比如增加了服务器的负载和连接维持的开销。另外，长轮询也可能导致延迟，因为服务器只有在有新数据到达时才会返回响应。</p></blockquote><p>比如，消费者发送拉取请求到 Broker 时，如果此时有消息，那么 Broker 直接响应返回消息，如果没消息就 hold 住这个请求，比如等 15s，在 15s 内如果有消息过来就立马响应这个请求返回消息。</p><p>通过长轮询，消费请求<strong>即避免了忙请求的情况，也进一步的提升了消息的及时性</strong>。RocketMQ和Kafka都是使用这种方式来实现获取消息的。</p><h2 id="RocketMQ的pushConsumer和pullConsumer"><a href="#RocketMQ的pushConsumer和pullConsumer" class="headerlink" title="RocketMQ的pushConsumer和pullConsumer"></a>RocketMQ的pushConsumer和pullConsumer</h2><p>RocketMQ即有pushConsumer也有pullConsume，但是RocketMQ本质上只实现了拉模式，pullConsumer就是去拉消息很好理解，至于还有个pushConsumer，实际上是伪推模式，底层的实现还是基于长链接的长轮询去拉取消息。pushConsumer的实现是背后有个线程会一直从Broker拉取消息，如果当前有过多的消息未被消费，那就过一会儿再执行，一旦有消息返回就回调用户定义的MessageListener来消费消息。</p><h1 id="消费过程"><a href="#消费过程" class="headerlink" title="消费过程"></a>消费过程</h1><h2 id="1-消费者启动"><a href="#1-消费者启动" class="headerlink" title="1. 消费者启动"></a>1. 消费者启动</h2><p>消费者启动后，需要先访问<strong>名称服务器（namesrv）</strong>，获得订阅的Topic的路由信息，然后即可连接到Broker。<br>示意图：<br><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/consumer%E8%BF%9E%E6%8E%A5Broker.svg"></p><h2 id="2-消费者负载均衡"><a href="#2-消费者负载均衡" class="headerlink" title="2. 消费者负载均衡"></a>2. 消费者负载均衡</h2><h3 id="队列粒度负载均衡"><a href="#队列粒度负载均衡" class="headerlink" title="队列粒度负载均衡"></a>队列粒度负载均衡</h3><p>队列粒度负载均衡策略中，同一消费者分组内的多个消费者将按照队列粒度消费消息，即<strong>每个队列仅被一个消费者消费</strong>。</p><p>示意图：<br><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/%E9%98%9F%E5%88%97%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A11.png"></p><p>图中，主题中的三个队列Queue1、Queue2、Queue3被分配给消费者分组中的两个消费者，每个队列只能分配给一个消费者消费，该示例中由于队列数大于消费者数，因此，消费者A2被分配了两个队列。<strong>若队列数小于消费者数量，可能会出现部分消费者无绑定队列的情况。</strong></p><p>当发生消费者上&#x2F;下线时，或过一定时间，Broker就会发生<strong>重平衡</strong>，以此实现<strong>动态的负载均衡功能</strong>。</p><blockquote><p>注意：队列粒度负载均衡策略保证同一个队列仅被一个消费者处理，该策略的实现依赖消费者和服务端的信息协商机制，RocketMQ 并不能保证协商结果完全强一致。因此，在消费者数量、队列数量发生变化时，可能会出现短暂的队列分配结果不一致，从而导致少量消息被重复处理。</p></blockquote><p>相对于后续的消息粒度负载均衡策略，队列粒度负载均衡策略分配粒度较大，不够灵活。但该策略在流式处理场景下有天然优势，能够保证同一队列的消息被相同的消费者处理，对于批量处理、聚合处理更友好。</p><h3 id="消息粒度负载均衡"><a href="#消息粒度负载均衡" class="headerlink" title="*消息粒度负载均衡"></a>*消息粒度负载均衡</h3><p>5.0版本之后的RocketMQ支持消息粒度负载均衡，对于PushConsumer和SimpleConsumer类型的消费者，默认且仅使用消息粒度负载均衡策略。<br><strong>消息粒度负载均衡策略中，同一消费者分组内的多个消费者将按照消息粒度平均分摊主题中的所有消息，即同一个队列中的消息，可被平均分配给多个消费者共同消费。</strong></p><p>示意图：<br><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/%E6%B6%88%E6%81%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A11.png"></p><p>图中，消费者分组Group A中有三个消费者A1、A2和A3，这三个消费者将共同消费主题中同一队列Queue1中的多条消息。<br>注意：消息粒度负载均衡策略保证同一个队列的消息可以被多个消费者共同处理，但是该策略使用的消息分配算法结果是随机的，并不能指定消息被哪一个特定的消费者处理。</p><p>消息粒度的负载均衡机制，是基于内部的单条消息确认语义实现的。消费者获取某条消息后，服务端会将该消息加锁，保证这条消息对其他消费者不可见，直到该消息消费成功或消费超时。因此，即使多个消费者同时消费同一队列的消息，服务端也可保证消息不会被多个消费者重复消费。</p><blockquote><p>在顺序消息中，消息的顺序性指的是同一消息组内的多个消息之间的先后顺序。因此，顺序消息场景下，消息粒度负载均衡策略还需要保证同一消息组内的消息，按照服务端存储的先后顺序进行消费。不同消费者处理同一个消息组内的消息时，会严格按照先后顺序锁定消息状态，确保同一消息组的消息串行消费。<br>比如，队列Queue1中有4条顺序消息，这4条消息属于同一消息组G1，存储顺序由M1到M4。在消费过程中，前面的消息M1、M2被消费者1处理时，只要消费状态没有提交，消费者2是无法并行消费后续的M3、M4消息的，必须等前面的消息提交消费状态后才能消费后面的消息。</p></blockquote><p>消息粒度消费负载均衡策略下，同一队列内的消息离散地分布于多个消费者，适用于绝大多数在线事件处理的场景。只需要基本的消息处理能力，对消息之间没有批量聚合的诉求。而对于流式处理、聚合计算场景，需要明确地对消息进行聚合、批处理时，更适合使用队列粒度的负载均衡策略。</p><h2 id="3-拉取消息"><a href="#3-拉取消息" class="headerlink" title="3. 拉取消息"></a>3. 拉取消息</h2><p>（继队列粒度负载均衡）</p><p>为了应对消费者的拉请求，RocketMQ内部实现有一套复杂的机制。<br>其涉及到三个组件：</p><ol><li><strong>PullMessageService</strong>：RocketMQ消费者端在<strong>拉取消息时的核心服务线程</strong>。在RocketMQ的拉取模式（PULL模式）下工作，负责周期性地从Broker服务器拉取消息。它主要执行以下功能：<ol><li>监听并处理pullRequestQueue中的PullRequest请求，这些请求代表了需要从特定MessageQueue拉取消息的任务。</li><li>向Broker发起远程调用，根据拉取策略和配置从指定的消息队列中批量拉取消息。</li><li>将从Broker获取到的一批消息添加到对应的ProcessQueue中。</li><li>如果Broker返回了消息，那么PullMessageService会在处理这批消息的同时，根据一定的拉取策略（如基于长轮询、固定间隔时间等），构建一个新的PullRequest，这个新的PullRequest会继续请求从同一个或者下一个MessageQueue拉取更多的消息。</li></ol></li><li><strong>ProcessQueue</strong>：RocketMQ在消费端维护的<strong>一个内存队列结构</strong>，用来缓存从Broker拉取回来但尚未完全消费完的消息集合。它的作用主要包括：<ol><li>存储已拉取但未消费或正在消费的消息，实现本地缓存和流量控制。</li><li>实现消费过程中的幂等性和顺序消费，例如通过跟踪每个消息的消费状态来避免重复消费。</li><li>参与消费限流和堆积管理，如果ProcessQueue中的消息过多，则PullMessageService可能会停止拉取新的消息，防止消费端因处理能力不足而造成消息积压。</li></ol></li><li><strong>ConsumeMessageService</strong>：RocketMQ消费者端用于<strong>消费消息的服务</strong>，无论是在Push模式还是Pull模式下都起着关键作用。它通常包含一个线程池来处理消息消费任务：<ol><li>在Push模式下，Broker主动推送消息给消费者时，ConsumeMessageService接收到消息后将其分发到对应的线程池进行消费。</li><li>在Pull模式下，虽然实际拉取操作由PullMessageService完成，但是拉取回来的消息最终也会交由ConsumeMessageService的线程池进行处理和消费。</li><li>负责消费者的负载均衡和消息消费进度的持久化，确保消息被正确且唯一地消费。</li><li>…（ConsumeMessageService功能较多，此处仅介绍这些）</li></ol></li></ol><p>示意图：<br><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/%E6%8B%89%E5%8F%96%E6%B6%88%E6%81%AF.svg"></p><h3 id="保存Offset"><a href="#保存Offset" class="headerlink" title="保存Offset"></a>保存Offset</h3><ul><li><strong>广播模式</strong>：在广播模式下，消费点位将存储在消费者本地磁盘上，因为广播模式是将消息广播给每个消费者，它不需要有个统一的地方来管理这个位置，每个消费者自己维护就行。</li><li><strong>集群模式</strong>：在集群模式下，消费点位存储在 Broker ，这样其他的消费者可以从Broker获取消费点位。<ul><li>当消费者成功消费一条消息后，它会向Broker发送消费确认请求，其中包括了本次消费的消息所在MessageQueue的标识和新的消费位点（即下一条待消费消息的Offset）。Broker接收到消费确认请求后，会更新该消费组在这个MessageQueue上的Offset信息。</li></ul></li></ul><h1 id="消费重试"><a href="#消费重试" class="headerlink" title="消费重试"></a>消费重试</h1><p>消费者出现异常，消费某条消息失败时，RocketMQ会根据消费重试策略<strong>重新投递该消息</strong>进行故障恢复。</p><blockquote><p>推荐场景：</p><ul><li>业务处理失败，且失败原因跟当前的消息内容相关，比如该消息对应的事务状态还未获取到，<strong>预期一段时间后可执行成功</strong>。</li><li>消费失败的原因不会导致连续性，即当前消息消费失败是一个<strong>小概率事件</strong>，不是常态化的失败，后面的消息大概率会消费成功。此时可以对当前消息进行重试，避免进程阻塞。</li></ul></blockquote><p><strong>消费重试</strong>：消费者在消费某条消息失败后，RocketMQ服务端会根据重试策略重新消费该消息，<strong>超过一次定数后若还未消费成功</strong>，则该消息将不再继续重试，直接被发送到死信队列中。</p><p>导致消息重试的原因：</p><ul><li>消费失败，包括消费者返回消息失败状态标识或抛出非预期异常。</li><li>消息处理超时，包括在PushConsumer中排队超时。</li></ul><h2 id="PushConsumer消费重试策略"><a href="#PushConsumer消费重试策略" class="headerlink" title="PushConsumer消费重试策略"></a>PushConsumer消费重试策略</h2><blockquote><p>状态机示意图：<br><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/PushConsumer%E6%B6%88%E8%B4%B9%E9%87%8D%E8%AF%95.png"></p><ul><li>Ready：已就绪状态。消息在Apache RocketMQ服务端已就绪，可以被消费者消费。</li><li>Inflight：处理中状态。消息被消费者客户端获取，处于消费中还未返回消费结果的状态。</li><li>WaitingRetry：待重试状态，PushConsumer独有的状态。当消费者消息处理失败或消费超时，会触发消费重试逻辑判断。如果当前重试次数未达到最大次数，则该消息变为待重试状态，经过重试间隔后，消息将重新变为已就绪状态可被重新消费。多次重试之间，可通过重试间隔进行延长，防止无效高频的失败。</li><li>Commit：提交状态。消费成功的状态，消费者返回成功响应即可结束消息的状态机。</li><li>DLQ：死信状态。消费逻辑的最终兜底机制，若消息一直处理失败并不断进行重试，直到超过最大重试次数还未成功，此时消息不会再重试，会被投递至死信队列。您可以通过消费死信队列的消息进行业务恢复。</li></ul></blockquote><p>一个消息被处理后可能会有三种结果：</p><ol><li>消费成功。</li><li>消费失败或过期<ol><li>重试次数未达到最大次数，进入待重试状态。</li><li>重试次数达到最大次数，进入死信状态。</li></ol></li></ol><p>时间轴图：<br><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/PushConsumer%E6%97%B6%E9%97%B4.png"></p><p><strong>Wait Retry</strong>：待重试状态，PushConsumer独有的状态。当消费者消息处理失败或消费超时，会触发消费重试逻辑判断。如果当前重试次数未达到最大次数，则该消息变为<strong>待重试状态</strong>，经过<strong>重试间隔</strong>后，消息将重新变为已就绪状态可被重新消费。多次重试之间，可通过重试间隔进行延长，防止无效高频的失败。</p><blockquote><p>具体重试间隔、重试次数可查看<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/10consumerretrypolicy">官网</a>。</p></blockquote><h2 id="SimpleConsumer消费重试策略"><a href="#SimpleConsumer消费重试策略" class="headerlink" title="SimpleConsumer消费重试策略"></a>SimpleConsumer消费重试策略</h2><blockquote><p>状态机示意图：<br><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/SimpleConsumer%E6%B6%88%E8%B4%B9%E9%87%8D%E8%AF%95.png"><br>Ready：已就绪状态。消息在Apache RocketMQ服务端已就绪，可以被消费者消费。<br>Inflight：处理中状态。消息被消费者客户端获取，处于消费中还未返回消费结果的状态。<br>Commit：提交状态。消费成功的状态，消费者返回成功响应即可结束消息的状态机。<br>DLQ：死信状态。消费逻辑的最终兜底机制，若消息一直处理失败并不断进行重试，直到超过最大重试次数还未成功，此时消息不会再重试，会被投递至死信队列。您可以通过消费死信队列的消息进行业务恢复。</p></blockquote><p>SimpleConsumer类型下，消费者的重试间隔是<strong>预分配</strong>的，每次获取消息消费者会在调用API时设置一个<strong>不可见时间参数 InvisibleDuration</strong>，即消息的最大处理时长。若消息消费失败触发重试，不需要设置下一次重试的时间间隔，直接复用不可见时间参数的取值。</p><p><strong>消息重试间隔&#x3D;不可见时间－消息实际处理时长</strong></p><blockquote><p>InvisibleDuration参数主要用于控制消息可见性的延迟时间，特别是在Pull模式下具有特殊的意义。当消费者在Pull模式下拉取消息时，InvisibleDuration指的是消息被拉取之后，在这段时间内这条消息对于其他消费者是不可见的，也就是消息处于“隐形”状态。</p><ul><li>当消费者拉取到一条消息后开始处理，但处理过程中还未完成消费确认（ACK），此时若该消息立即对其他消费者可见，可能导致消息被重复消费。设置InvisibleDuration可以在一段时间内阻止其他消费者看到这条消息，给当前消费者足够的时间来完成消息处理并提交确认。</li><li>如果某个消费者在处理消息时出现异常，未能在InvisibleDuration结束前完成ACK，消息将会在InvisibleDuration过后再次变为可见，允许其他消费者或者其他副本的消费者有机会重新拉取并处理该消息。</li></ul></blockquote><p>时间轴图：<br><img src="/2024/03/14/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-consume/SimpleConsumer%E6%97%B6%E9%97%B4.png"></p><h1 id="消息过滤"><a href="#消息过滤" class="headerlink" title="消息过滤"></a>消息过滤</h1><p>RocketMQ提供了两种方法：Tag标签过滤、SQL属性过滤。</p><blockquote><p>当消费者拉取消息时，Broker只会个给消费者想要的消息，不需要的会被自动认为已消费。</p></blockquote><h2 id="Tag标签过滤"><a href="#Tag标签过滤" class="headerlink" title="Tag标签过滤"></a>Tag标签过滤</h2><p>每一条消息仅支持设置一个tag。<code>message.setTags(&quot;TagA&quot;)</code></p><p>当消费者进行订阅时，可指定自己需要的Tag。该订阅关系会随着心跳消息发送给Broker，Broker即可知道消费者们的过滤条件，然后在Broker端进行过滤，并将过滤后的消息发送给消费者。</p><p>消费者订阅Tag有多个类型：</p><ul><li>单Tag匹配：只接收具有某个Tag的标签，<code>consumer.subscribe(&quot;TopicA&quot;, &quot;TagA&quot;)</code>。</li><li>多Tag匹配：可接收多个Tag，Tag之间使用<code>||</code>隔开，<code>consumer.subscribe(&quot;TopicA&quot;, &quot;TagA||TagB||TagC&quot;)</code>。</li><li>全匹配：忽略Tag，<code>consumer.subscribe(&quot;TopicA&quot;, &quot;*)</code>。</li></ul><h3 id="Tag标签过滤原理"><a href="#Tag标签过滤原理" class="headerlink" title="Tag标签过滤原理"></a>Tag标签过滤原理</h3><p>每条消息在ConsumeQueue中，处理commitlog offset、size属性外，还有一个tag hashcode属性。<br>Broker在消费者来拉消息的时候，利用请求的 offset 的从ConsumerQueue能直接得到消息的tag hashcode，且本地已经存储了当前消费者的订阅消息，可直接利用 hashcode 对比当前消息是否应该被该消费者拉取。如果hashcode不一致，则跳过这条消息以达到过滤的作用。</p><p>使用tag Hashcode而不是Tag原字符串的原因是tag Hashcode是定长的，更适合放到ConsumeQueue中（ConsumeQueue也是定长的）。至于可能引起的Hash冲突，只要让消费者再次进行过滤即可。</p><h2 id="SQL属性过滤"><a href="#SQL属性过滤" class="headerlink" title="SQL属性过滤"></a>SQL属性过滤</h2><p>生产者可在消息中添加多个属性，如：<code>message.putUserProperty(&quot;propertyA&quot;,&quot;123&quot;)</code>。<br>然后消费者即可设置对应的SQL过滤条件：（SQL过滤支持使用Tags中属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">consumer.subscribe(<span class="hljs-string">&quot;TopicA&quot;</span>, MessageSelector.bySQL(<span class="hljs-string">&quot;(TAGS is not null and TAGS in (&#x27;TagA&#x27;,&#x27;TagB&#x27;)) and (propertyA is not null and a between 0 and 200)&quot;</span>));<br></code></pre></td></tr></table></figure><p>SQL属性过滤是使用SQL92语法来作为过滤规则表达式的：</p><table><thead><tr><th>语法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>IS NULL</td><td>判断属性不存在。</td><td>a IS NULL ：属性a不存在。</td></tr><tr><td>IS NOT NULL</td><td>判断属性存在。</td><td>a IS NOT NULL：属性a存在。</td></tr><tr><td>&gt; &gt;&#x3D; &lt; &lt;&#x3D;</td><td>用于比较数字，不能用于比较字符串，否则消费者客户端启动时会报错。（可转化为数字的字符串也被认为是数字。）</td><td>a IS NOT NULL AND a &gt; 100：属性a存在且属性a的值大于100。 a IS NOT NULL AND a &gt; ‘abc’：错误示例，abc为字符串，不能用于比较大小。</td></tr><tr><td>BETWEEN xxx AND xxx</td><td>用于比较数字，不能用于比较字符串，否则消费者客户端启动时会报错。等价于&gt;&#x3D; xxx AND &lt;&#x3D; xxx。表示属性值在两个数字之间。</td><td>a IS NOT NULL AND (a BETWEEN 10 AND 100)：属性a存在且属性a的值大于等于10且小于等于100。</td></tr><tr><td>NOT BETWEEN xxx AND xxx</td><td>用于比较数字，不能用于比较字符串，否则消费者客户端启动会报错。等价于&lt; xxx OR &gt; xxx，表示属性值在两个值的区间之外。</td><td>a IS NOT NULL AND (a NOT BETWEEN 10 AND 100)：属性a存在且属性a的值小于10或大于100。</td></tr><tr><td>IN (xxx, xxx)</td><td>表示属性的值在某个集合内。集合的元素只能是字符串。</td><td>a IS NOT NULL AND (a IN (‘abc’, ‘def’))：属性a存在且属性a的值为abc或def。</td></tr><tr><td>&#x3D; &lt;&gt;</td><td>等于和不等于。可用于比较数字和字符串。</td><td>a IS NOT NULL AND (a &#x3D; ‘abc’ OR a&lt;&gt;’def’)：属性a存在且属性a的值为abc或a的值不为def。</td></tr><tr><td>AND OR</td><td>逻辑与、逻辑或。可用于组合任意简单的逻辑判断，需要将每个逻辑判断内容放入括号内。</td><td>a IS NOT NULL AND (a &gt; 100) OR (b IS NULL)：属性a存在且属性a的值大于100或属性b不存在。</td></tr></tbody></table><h3 id="SQL属性过滤原理"><a href="#SQL属性过滤原理" class="headerlink" title="SQL属性过滤原理"></a>SQL属性过滤原理</h3><p>SQL属性过滤需要从commitlog获取消息，然后解析其中的属性，接着再做SQL匹配，不匹配的消息被过滤，校验通过的消息被消费者拉取到本地。</p><blockquote><p>此时因为不会存在 hash 碰撞的情况，所以消费者本地不需要再进行二次校验。</p></blockquote><p>SQL由于需要进行SQL解析，且还要从磁盘中获得消息实际数据，所以性能较差。</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
      <tag>RocketMQ</tag>
      
      <tag>推消息</tag>
      
      <tag>拉消息</tag>
      
      <tag>长轮询</tag>
      
      <tag>队列粒度负载均衡</tag>
      
      <tag>消息粒度负载均衡</tag>
      
      <tag>PullMessageService</tag>
      
      <tag>ProcessQueue</tag>
      
      <tag>ConsumeMessageService</tag>
      
      <tag>消费重试</tag>
      
      <tag>消息重试间隔</tag>
      
      <tag>Wait Retry</tag>
      
      <tag>不可见时间</tag>
      
      <tag>InvisibleDuration</tag>
      
      <tag>Tag标签过滤</tag>
      
      <tag>tag hashcode</tag>
      
      <tag>SQL属性过滤</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列：6.消息存储原理</title>
    <link href="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-storage/"/>
    <url>/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-storage/</url>
    
    <content type="html"><![CDATA[<p>消息队列必须保证消息存储的可靠性，这是消息队列可以做到异步、削峰填谷的基础。<br>本文将讲解消息队列是如何实现消息的存储的。</p><h1 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h1><h2 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h2><p>类似MySQL或Redis，RocketMQ的消息持久化也是直接存储到<strong>本地硬盘</strong>中的。<br>在面对削峰填谷的需求下，可靠性、性能、存储量都无比重要：消息不能丢失，消息得快速写入（但是不急着读取），并且需要存储大量消息。<br>硬盘非常适合满足上述需求：</p><ul><li><strong>可靠性</strong>：可以通过设置RAID等级来保证数据可靠性。</li><li><strong>快速写入</strong>：硬盘支持顺序写入，能够快速写入大量数据。</li><li><strong>存储量</strong>：硬盘是存储量非常大的存储介质，要想超越硬盘只能使用云盘，但云盘的速度较慢。</li></ul><blockquote><p>为什么不使用类似MySQL或Redis的软件作为存储层？原因很简单，引入额外的软件作为中介会降低性能和可靠性。在削峰填谷、超高并发的场景下，减少中间层可以显著提升性能和可靠性。</p></blockquote><h2 id="commitlog"><a href="#commitlog" class="headerlink" title="commitlog"></a>commitlog</h2><p>RocketMQ将消息存储到一个commitlog文件中，不同Topic的消息会被存储在同一个commitlog文件中，每个消息都会占据一行。<br>示意图：<br><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-storage/commitlog.svg"></p><p>将不同Topic的消息存在一块呢，是为了充足利用硬盘的<strong>顺序写</strong>的特性。虽然硬盘可能支持同时写入多个文件来保持顺序写入，但如果同时写入的文件数等于topic的数量，且Topic数量较多，就无法保证顺序写入（因为不同文件通常会存储在不同扇区，导致随机写入；而在硬盘空间充足的情况下，将不同topic的消息存储在同一个文件中可以确保顺序写入）。</p><h1 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h1><p>将不同的Topic存入同一个commitlog文件中，会带来一个问题：消费者如何快速找到commitlog里的消息呢？</p><h2 id="消费队列（ConsumeQueue）"><a href="#消费队列（ConsumeQueue）" class="headerlink" title="消费队列（ConsumeQueue）"></a><strong>消费队列（ConsumeQueue）</strong></h2><p>这里就要用到一个非常重要的概念：<strong>消费队列（ConsumeQueue）</strong>。<br>当消费者获得一个消息时，其是从通过ConsumeQueue获得这个消息的具体地址；一个主题会包含多个消息队列，一个消息队列对应一个ConsumeQueue…</p><p>那么消息队列是如何获得消息的呢？自然是从commitlog中来的。RocketMQ会定时分发commitlog中的消息到ConsumeQueue（大概是1ms解析一条），分发程序会根据消息行中的信息，将消息的<strong>起始偏移量</strong>和<strong>消息长度</strong>放入ConsumeQueue，对应到MessageQueue就是放入了一条消息；等到消费者读取这条消息时，就会再次访问硬盘获得该消息并发送到消费者。</p><blockquote><p>为什么不直接在ConsumeQueue中存储消息，随机读取硬盘不是很慢吗？这是为了减少内存的空间使用，以时间换空间，分发消息没有那么高的时间性能要求，因此这里决定使用时间换空间。</p></blockquote><p>示意图：<br><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-storage/%E6%B6%88%E8%B4%B9%E9%98%9F%E5%88%97.svg"></p><blockquote><p>注意：ConsumeQueue也是需要持久化的，否则会丢失消息的位置。</p></blockquote><h2 id="读取流程"><a href="#读取流程" class="headerlink" title="读取流程"></a>读取流程</h2><p>在之前的<a href="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-publishsubscribe/" title="消息队列：5.发布订阅模式">消息队列：5.发布订阅模式</a>中，我们就提到过一个概念：<strong>offset</strong>，用来记录消费到哪个位置。该词的全称是<strong>consumerOffset</strong>，需要区别于前面提到过的消息存储的起始偏移量<strong>commitlog offset</strong>。</p><p><strong>消费者消费消息的流程</strong>：</p><ol><li>根据订阅关系，找到订阅的consumerQueue。</li><li>通过consumerOffset获得consumerQueue中对应的消息指针。</li><li>根据消息指针中的commitlog offset和size（或length）信息，访问硬盘，获得完整消息。</li></ol><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>一个消息中可以添加key属性，以此记录在索引表中，当需要检索该消息时快速找到。<br>该索引表文件，即为<strong>indexFile</strong>。</p><p>indexFile的格式如下图所示：<br><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-storage/indexFile.svg"></p><p>给新消息建立索引的过程：</p><ol><li>获得新消息的key。</li><li>计算新消息的keyhash&#x3D;hash(key)。</li><li>取余，获得对应的槽位：slotpos&#x3D;keyhash%500w。</li><li>查看该槽位是否被占用。<ul><li>如果未被占用，这将该消息的commitlog offset、size、keyhash信息存到一个空的index item位置，然后将该index item的下标放入slot。</li></ul></li><li>如果被占用，查看该slot记录的index item的下标，寻找一个空的index item，将当前消息存入，并将冲突消息的下标存到当前index item的prevIndex字段，然后重置slot的下标为当前消息的index item的下标。（类似链表的头插法）。</li></ol><p>索引消息的过程：</p><ol><li>获得key。</li><li>计算keyhash。</li><li>计算slotpos。</li><li>查看该槽位记录下标的index item中的keyhash是否对应，如果不对应就看prevIndex字段对应的index item中的keyhash是否对应，一直找到对应的那个，然后返回。如果没有对应的，就是不存在。</li></ol><blockquote><p>这样的设计有些类似简单文件系统中superblock、inode table、data region的设计。</p></blockquote><h1 id="底层优化"><a href="#底层优化" class="headerlink" title="底层优化"></a>底层优化</h1><p>操作系统会为每个进程提供虚拟内存，虚拟内存通过页表映射到物理内存。<br>在物理内存中，操作系统会留出一定内存用于运行内核程序，以此区分用户态和内核态的空间。<br>当进程处于用户态时，需要进行系统调用，才能进入内核态，并访问所有的内存空间和I&#x2F;O设备。</p><h2 id="初始情况"><a href="#初始情况" class="headerlink" title="初始情况"></a>初始情况</h2><p>举例：Java读取文件并发送到网络（通过文件系统调用和网卡I&#x2F;O）</p><p><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-storage/%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%B9%B6%E5%8F%91%E9%80%81%E5%88%B0%E7%BD%91%E7%BB%9C.svg"></p><p>按时间顺序说明其过程：</p><ol><li><strong>打开本地文件</strong>：<ol><li>在Java程序中，首先通过<code>FileInputStream</code>或<code>Files.newInputStream()</code>打开磁盘上的目标文件，这一步通常发生在用户空间。</li><li>Java运行时系统发出系统调用到操作系统内核，请求打开文件。</li><li>内核验证权限并找到文件，创建一个描述符（句柄），用于后续对该文件的读取操作。</li></ol></li><li><strong>读取文件数据</strong>：<ol><li>使用<code>FileInputStream</code>的<code>read(byte[] buffer)</code>方法从文件中读取数据，这是一个阻塞操作。</li><li><strong>当调用<code>read()</code>时，内核开始从磁盘读取数据到内核空间的缓冲区（如果数据不在缓存中）。</strong></li><li><strong>数据一旦被内核读取到缓冲区，内核将其复制到用户空间提供的缓冲区中（即Java程序的<code>byte[]</code>数组）。</strong></li></ol></li><li><strong>创建Socket连接</strong>：<ol><li>在Java程序中，创建一个<code>Socket</code>实例并连接到远程服务器地址。</li><li>这会触发TCP&#x2F;IP协议栈的操作，通过系统调用进入内核，建立网络连接。</li></ol></li><li><strong>获取Socket输出流</strong>：<ol><li>调用<code>Socket.getOutputStream()</code>获取一个<code>OutputStream</code>实例，这个实例与套接字关联，用于向网络发送数据。</li><li>再次涉及到内核调用，因为实际的网络数据发送是由内核的TCP&#x2F;IP协议栈处理的。</li></ol></li><li><strong>将文件数据写入Socket</strong>：<ol><li>循环读取文件输入流的数据，并调用<code>OutputStream</code>的<code>write(byte[] buffer, int offset, int length)</code>方法，将数据写入Socket。</li><li><strong>每次调用<code>write()</code>方法时，Java运行时会将用户空间的数据复制到内核空间的网络缓冲区。</strong></li><li><strong>内核在适当时候负责将这些数据封装成网络帧并通过物理网络接口发送出去。</strong></li></ol></li></ol><p>通过在内核空间建立文件的缓存，对于读写操作均有一定性能的优化：</p><ol><li>读：再次发送读该文件时，可以直接返回缓存，不用读磁盘。</li><li>写：可将写保存到缓存中，再延迟批量写入，减少I&#x2F;O调用次数。\</li></ol><p>但是这样存在一个问题：如果仅进行转发（如消息队列将消息发送到消费者时），该操作拷贝此时过多，并且占用内存较大。因此，引入<strong>零拷贝</strong>进行优化。</p><h2 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h2><h3 id="sendFile"><a href="#sendFile" class="headerlink" title="sendFile"></a>sendFile</h3><p>如果一个程序，对文件不做任何处理，就直接发送到网络，那么可以直接忽略<strong>将磁盘缓存区复制到用户空间再复制到网络缓冲区</strong>的过程，改为直接<strong>将内核空间中的磁盘缓存区复制到网络缓冲区</strong>，该方式通过<strong>sendFile（Linux的系统调用）</strong>实现。</p><p><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-storage/sendFile.svg"></p><p>在Java NIO（非阻塞I&#x2F;O）库中，可以通过<code>FileChannel.transferTo()</code>方法实现这一优化：</p><ol><li><strong>打开文件通道</strong>：使用<code>FileChannel.open()</code>方法打开文件，并获取到FileChannel对象。</li><li><strong>创建Socket通道</strong>：创建<code>SocketChannel</code>实例并与远程服务器建立连接。</li><li><strong>使用<code>transferTo()</code>方法</strong>：直接调用<code>FileChannel.transferTo(long position, long count, WritableByteChannel target)</code>方法，这里的<code>target</code>参数就是之前创建的<code>SocketChannel</code>。<br>此时，内核可以直接将文件数据从磁盘缓存区复制到网络缓冲区，无需经过用户空间，从而实现了零拷贝。</li></ol><h3 id="DMA-Gather"><a href="#DMA-Gather" class="headerlink" title="DMA Gather"></a>DMA Gather</h3><p>在某些现代操作系统和硬件支持下，我们可以进一步利用<strong>DMA（Direct Memory Access，直接内存访问）Gather</strong>特性对上述的零拷贝操作进行优化。<br>DMA允许硬件（如网卡）直接访问内存，而无需CPU的干预，这样可以减少CPU工作负载。DMA Gather则允许一次数据传输操作中，从内存中多个不连续的位置收集数据并发送到目标设备（例如网络接口）。<br>即文件从硬盘到内核空间的磁盘缓存区后，提供文件描述符和数据长度给网络缓存区，网卡即可使用DMA收集功能直接从磁盘缓存区中拷贝，进而减少了冲磁盘缓存区复制到网络缓冲区的操作。<br><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-storage/sendFile+DMAGather.svg"></p><p>对于Java应用程序来说，虽然不能直接控制DMA Gather的具体实现，但在底层操作系统和硬件的支持下，<code>FileChannel.transferTo()</code>方法调用可能已经隐式地利用了DMA Gather特性。当操作系统检测到数据需要从磁盘读取并发送到网络时，它可能会执行以下步骤：</p><ol><li><strong>DMA读取</strong>：内核启动磁盘控制器的DMA读取功能，直接从磁盘读取数据到内核空间的缓冲区，无需CPU参与数据搬移。</li><li><strong>DMA Gather</strong>：网卡同样启用DMA模式，并在内核的协调下执行Gather操作，<strong>从内核空间中存放文件数据的不同缓冲区（通常是页缓存的不连续区域）收集数据，一次性将这些数据打包并发送到网络接口。</strong></li></ol><p>sendFile+DMA Gather的机制很好，但是存在一个问题，就是java程序是无法获得消息的实际内容的。如果要开启消息过滤，就需要获得消息的内容，因此引入另一种机制：mmap。</p><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p><strong>mmap（Memory Mapping）</strong>是一种操作系统提供的内存管理功能，它允许将文件或者其他对象的内容映射到进程的地址空间中，形成内存映射文件。通过mmap，进程可以直接像访问普通内存一样来访问文件内容，而无需每次都调用<code>read</code>或<code>write</code>等系统调用来读写文件。</p><p>Java程序可以通过<code>JNI</code>或其他方式调用<code>mmap()</code>系统调用，将文件映射到进程的地址空间（用户空间）。此时，对文件的访问可以直接通过内存访问进行，避免了传统的<code>read()</code>系统调用，从而减少了内核空间到用户空间的一次数据复制。<br><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-storage/mmap.svg"></p><blockquote><p>mmap仅仅是将文件内容与虚拟内存添加了映射关系，实际上没有将文件从硬盘中加载到实际内存，因此需要做好缓存预热。</p></blockquote><h2 id="RocketMQ实际机制"><a href="#RocketMQ实际机制" class="headerlink" title="RocketMQ实际机制"></a>RocketMQ实际机制</h2><p>写入磁盘机制：</p><ol><li>异步刷盘：通过mmap，将写入操作写入系统的页缓存，等操作系统异步将修改过的页（脏页）写入到磁盘，可提升一点性能。</li><li>同步刷盘：通过mmap，将写入操作写入系统的页缓存，并立即刷盘，以保证消息不丢失。</li></ol><blockquote><p>刷盘：将数据从 page cache 写入到磁盘中。</p></blockquote><p>读取磁盘并发送到网络的机制：</p><ol><li>执行mmap，建立映射。（mmap操作后，物理内存中实际并没有分配资源，只有当进程访问到，发现内存中没数据才会进行缺页中断，分配资源，而这个缺页中断是系统调用，涉及上下文切换，比较耗费时间，因此进行内存预热）</li><li>文件预热：<ol><li>将当前映射的文件每个页都写入0字节，以保证触发页中断，将文件从磁盘加载到缓存。</li><li>调用 <code>mlock</code> 和 <code>madvise(MADV_WILLNEED)</code>，保证预热的页不会被页置换，并且建议进行页预读。</li></ol></li><li>write操作：当消费者拉取信息时，使用<code>write</code>从用户缓存写入到网络缓冲区，实际上由于mmap的原因，是直接从内核的磁盘缓存区write到网络缓存区。</li></ol><p>示意图：<br><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-storage/mmap+write.svg"></p><h1 id="对比RocketMQ与Kafka"><a href="#对比RocketMQ与Kafka" class="headerlink" title="对比RocketMQ与Kafka"></a>对比RocketMQ与Kafka</h1><h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2><p>RocketMQ采用多Topic混合存储一个文件的方式来保存消息，即一个CommitLog文件中会包含分给此Broker的所有消息，不论消息属于哪个Topic的哪个Queue。</p><p>然后再以Topic+队列维度，存储ConsumeQueue（一个MessageQueue对应一个ConsumeQueue文件）。消费者具体是通过ConsumeQueue得到消息的真实物理地址再去访问CommitLog获取消息的，所有ConsumeQueue可理解为消息的索引。</p><p><strong>每条消息存储至commitlog，都会在对应的ConsumeQueue生成一条记录</strong>，因此这个索引也叫<strong>稠密索引</strong>。</p><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><h3 id="分区（Partition）"><a href="#分区（Partition）" class="headerlink" title="分区（Partition）"></a>分区（Partition）</h3><p>Kafka和RocketMQ一样，Topic下也分了多个队列提高消费的并发度，但是在Kafka中不叫队列，叫<strong>分区（Partition）</strong>。<br>Kafka是以Partition为单位来存储消息的：</p><p><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-storage/kafka-storage.svg"></p><p>每个Topic的每个分区都会拥有自己的消息文件，且对应会有索引文件（还有一个时间索引文件这里不多介绍），它们的文件名一样（以第一条消息的offset命名，后缀为.log和.index）。</p><h3 id="稀疏索引"><a href="#稀疏索引" class="headerlink" title="稀疏索引"></a>稀疏索引</h3><p>Kafka不会为每条消息都对应生成一个索引，而是每隔几条消息再创建一条索引，这样能节省存储空间，能在内存中保存更多的索引，这样的索引叫<strong>稀疏索引</strong>。</p><p>索引逻辑：</p><ol><li>首先通过 offset 找到对应的索引文件。</li><li>再通过二分法遍历索引文件找到离目标消息最近的索引。</li><li>再利用这个索引内容从消息文件找到最近这条消息的位置。</li><li>再从这个位置开始顺序遍历消息文件找到目标消息。</li></ol><p>这样一次寻址的时间复杂度为$O(log_2n)+O(m)$，其中 n 为索引文件中的索引个数，m 为索引的稀疏程度。</p><blockquote><p>Kafka选择 用更少的空间，就需要花费更多的时间；而 RocketMQ 用的时间更少则花了更多的空间。</p></blockquote><h3 id="冷热分区"><a href="#冷热分区" class="headerlink" title="冷热分区"></a>冷热分区</h3><p>其实这个 Kafka 索引的二分查找是经过工程优化<strong>冷热分区的二分查找</strong>。如果按照正常的二分查找，那么需要读取索引的头和尾内容，尾的内容是最新写入的，很有可能已经在 pageCache ，而头的内容可能是很久之前的，很大概率不在 pageCache 中，因此需要从磁盘加载读取到 pageCache。</p><p>而内存是有限的，操作系统会通过类 LRU 机制进行页替换，当内存不足，很有可能因为加载这些很久以前的数据，导致内存中一些最近的 pageCache 被置换到磁盘中，而最近的 pageCache 的消息正常而言是近期会被消费者读取消费的，但这些消息又被挤出了内存，这样一来会频繁触发页中断，对性能很不好。且按照一般的逻辑，消费者要拉取的消息肯定是在索引文件的尾部，也就是最近写入的，而不是时间久远的头部，从头部找意义不大。<br><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-storage/kafka%E5%86%B7%E7%83%AD%E5%88%86%E5%8C%BA.svg"><br>因此 Kafka 给索引文件做了<strong>冷热分区</strong>，修改过的二分是先查热区的二分，如果查不到再从冷区开始，由于热区的数据本身都已经在 pageCache 中，因此对缓存友好，不会污染缓存，且很大可能性能找到对应的消息。</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
      <tag>RocketMQ</tag>
      
      <tag>commitlog</tag>
      
      <tag>ConsumeQueue</tag>
      
      <tag>consumerOffset</tag>
      
      <tag>commitlog offset</tag>
      
      <tag>indexFile</tag>
      
      <tag>用户空间</tag>
      
      <tag>内核空间</tag>
      
      <tag>零拷贝</tag>
      
      <tag>sendFile</tag>
      
      <tag>DMA Gather</tag>
      
      <tag>mmap</tag>
      
      <tag>稠密索引</tag>
      
      <tag>稀疏索引</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列：5.发布订阅模式</title>
    <link href="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-publishsubscribe/"/>
    <url>/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-publishsubscribe/</url>
    
    <content type="html"><![CDATA[<p>本文将讲解消息队列的两种实现模式：队列模式、发布订阅模式。</p><h1 id="队列模式"><a href="#队列模式" class="headerlink" title="队列模式"></a>队列模式</h1><p>作为一种数据结构，队列的特性是<strong>先进先出</strong>。<br>使用队列来存储消息时，生产者发送的消息会被放入到一个队列，然后由消费者们竞争着消费队列的信息。</p><blockquote><p>竞争意味着每条消息只会被一个消费者消费。</p></blockquote><p>在存储消息时，如果我们使用数据结构-队列对消息进行存储，就会存在一个问题：队列具有先进先出的特性，当读到后一个消息时，前一个消息就会被丢失，进而其他消费者就无法访问该消息。（即消费者之间的竞争关系导致无法合适地共享信息）</p><p><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-publishsubscribe/%E9%98%9F%E5%88%97%E6%A8%A1%E5%BC%8F.svg"></p><p>发布-订阅模式是为解决单个队列无法满足同时提供给多个消费者相同消息的需求的。</p><h1 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h1><h2 id="支持共享"><a href="#支持共享" class="headerlink" title="支持共享"></a>支持共享</h2><p>发布-订阅模式的目的：<strong>每个消费者都能选择想要消费某个队列，消费其中指定某个位置的消息。</strong><br>发布-订阅模式中我们需要引入两个概念——Topic、offset：</p><ul><li>Topic：主题，用于区别不同的队列。<ul><li>举例：生产者1负责生产订单记录，生产者2负责生产发货记录，消费者1负责处理订单记录，消费者2负责处理发货记录。那么自然不能只使用一个队列存储所有信息让消费者自己选择自己需要的信息，这应该是消息队列的责任。所用我们引入主题的概念，用以区别不同的队列，生产者1的消息发送、存储到订单主题的主题队列，生产者2的消息发送、存储到发货主题的主题队列；消费者1只对订单主题感兴趣，消息队列就只给它提供订单主题的主题队列中的信息……</li></ul></li><li>offset：消息位置，用以记录消费者在队列中处理到的信息位置。<ul><li>消费者每次处理一个信息，offset就+1，下一次转发给该消费者就是这个主题中的下一个消息。</li></ul></li></ul><p>示意图：<br><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-publishsubscribe/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%851.png"></p><h2 id="支持竞争"><a href="#支持竞争" class="headerlink" title="支持竞争"></a>支持竞争</h2><p>发布订阅模式解决了上述将全部消息提供给多个消费者的需求，但是存在一个问题，就是<strong>无法实现原先的竞争关系</strong>：某些消息不需要被同一类的不同消费者重复接收，但是只依赖offset的+1无法解决该问题。<br>可以复用原有队列的数据结构，但是原有队列处理方式还存在一个问题：竞争消费位置——<strong>同一类</strong>消费者无法同时消费多个消息，其必须一个一个地处理消息。<br>而且无论是消息粒度负载均衡策略还是队列粒度负载均衡策略，在消费者上线或下线、服务端扩缩容等场景下，都会触发短暂的重新负载均衡动作。此时可能会存在短暂的负载不一致情况，出现少量消息重复的现象。因此，还需要在下游消费逻辑中保证消息幂等以支持去重功能。<br>为了解决此问题，需要引入一个新机制：<strong>队列</strong>（消息队列-MessageQueue，在Kafka中被称为分区）。</p><p>同一个主题的消息，会被分开存放到不同队列中（主题与队列的关系为一对多），不同消费者可以接收不同队列中的信息，以做到同时消费。<br>示意图：<br><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-publishsubscribe/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%852.png"></p><p>一个消费者可对应一到多个队列（或分区）。对应多个时需保持多个offset。且要求消费者数量少于队列数量，以避免出现闲置的消费者。</p><p><img src="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-publishsubscribe/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%853.svg"></p><p>改进后的发布订阅还有一个优点：可以灵活实现<strong>重复消费</strong>或者<strong>跳过部分消息不消费</strong>的功能。</p><ul><li><strong>重复消费</strong>：比如消费者1已经消费到 Topic-A-queue1-20，即第 20 条消息，但是消费者1一不小心把之前消费得到的结果数据弄丢了，如果按照队列模式那就找不到消息了，因为消息已经出队了没了；而在发布-订阅模式中，我们仅需把这个消息位置变更成 Topic-A-queue1-20，这样又可以让消费者1重新消费，只需要简单地改一条数据就能实现这样功能。</li><li><strong>跳过部分消息不消费</strong>：假设 Topic-A-queue1 中第 21-30 这 10 条消息是错误的，我们可以修改当前的消息点位成 Topic-A-queue1-30，这样消费者1就直接跳过了这 10 条错误消息，从第 31 条消息开始消费。</li></ul><blockquote><p>目前讲解的是队列级的负载均衡，即消费者对应到具体队列（每个队列仅支持被一个消费者消费），实际上存在消息级的负载均衡，无需关注消费者和队列的相对数量，能够更均匀地分摊消息。可自行了解。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Topic</tag>
      
      <tag>MessageQueue</tag>
      
      <tag>队列模式</tag>
      
      <tag>发布订阅模式</tag>
      
      <tag>offset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列：4.Springboot集成RocketMQ</title>
    <link href="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-Springboot/"/>
    <url>/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-Springboot/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="RocketMQNote.pdf" width="100%" height="550" type="application/pdf"></div><blockquote><p>本文之前使用LaTeX书写，现直接使用PDF发布。<br>建议：rocketmq-spring-boot-starter相比原生SDK的功能要弱不少，如果需要实现复杂功能还是使用rocketmq-client-java比较合适。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
      <tag>RocketMQ</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列：3.领域模型</title>
    <link href="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-domainmodel/"/>
    <url>/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-domainmodel/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="RocketMQNote.pdf" width="100%" height="550" type="application/pdf"></div><blockquote><p>本文之前使用LaTeX书写，现直接使用PDF发布。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
      <tag>RocketMQ</tag>
      
      <tag>Producer</tag>
      
      <tag>NameSrv</tag>
      
      <tag>Broker</tag>
      
      <tag>Comsumer</tag>
      
      <tag>Producer group</tag>
      
      <tag>Comsumer group</tag>
      
      <tag>Broker cluster</tag>
      
      <tag>Topic</tag>
      
      <tag>MessageQueue</tag>
      
      <tag>Subscription</tag>
      
      <tag>同步RPC调用模型</tag>
      
      <tag>异步通信模型</tag>
      
      <tag>点对点模型</tag>
      
      <tag>发布订阅模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列：2.启动RocketMQ</title>
    <link href="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-start/"/>
    <url>/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/rocket-start/</url>
    
    <content type="html"><![CDATA[<h1 id="1-下载二进制文件包"><a href="#1-下载二进制文件包" class="headerlink" title="1. 下载二进制文件包"></a>1. 下载二进制文件包</h1><p>进入<a href="https://rocketmq.apache.org/zh/docs/quickStart/01quickstart">官网</a>，获得<a href="https://dist.apache.org/repos/dist/release/rocketmq/5.1.4/rocketmq-all-5.1.4-bin-release.zip">二进制压缩包下载地址</a>。</p><p>使用wget命令下载压缩包：<code>wget https://dist.apache.org/repos/dist/release/rocketmq/5.1.4/rocketmq-all-5.1.4-bin-release.zip</code><br>使用unzip命令解压二进制文件压缩包：<code>unzip rocketmq-all-5.1.4-bin-release.zip</code></p><h1 id="2-修改启动命令"><a href="#2-修改启动命令" class="headerlink" title="2. 修改启动命令"></a>2. 修改启动命令</h1><h2 id="修改Java虚拟机分配内存大小"><a href="#修改Java虚拟机分配内存大小" class="headerlink" title="修改Java虚拟机分配内存大小"></a>修改Java虚拟机分配内存大小</h2><p>直接启动很可能报错操作系统内存不足（RocketMQ对内存要求极高）：</p><blockquote><p>OpenJDK64-BitServerVMwarning: INFO: os::commit_memory(0x0000000700000000,4294967296,0)failed; error&#x3D;’Notenoughspace’(errno&#x3D;12)</p></blockquote><p>所以需要修改脚本文件，将分配给虚拟机改小，需要修改<code>runserver.sh</code> 、 <code>runbroker.sh</code> 和 <code>tools.sh</code> 文件，将所有<code>-Xms``-Xmx``-Xmn</code>参数都改小，<code>-Xmx</code>为内存上限，<code>-Xmn</code>为内存下限，<code>-Xms</code>为初始大小。</p><h2 id="修改java启动命令"><a href="#修改java启动命令" class="headerlink" title="修改java启动命令"></a>修改java启动命令</h2><p>如果java版本过高，可能会报错Option UseBiasedLocking was deprecated，需要继续修改配置文件：<br>在runbroker.sh 文件中，<code>numactl --interleave=all pwd &gt; /dev/null 2&gt;&amp;1</code>的文本上方添加<code>$JAVA $&#123;JAVA_OPT&#125; --add-exports=java.base/sun.nio.ch=ALL-UNNAMED $@</code>。<br>脚本修改后为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx512m&quot;<br>choose_gc_options<br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;<br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+AlwaysPreTouch&quot;<br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:MaxDirectMemorySize=15g&quot;<br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-UseLargePages -XX:-UseBiasedLocking&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">JAVA_OPT=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -Xdebug -Xrunjdwp:transport=dt_socket,address=9555,server=y,suspend=n&quot;</span></span><br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; $&#123;JAVA_OPT_EXT&#125;&quot;<br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -cp $&#123;CLASSPATH&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">JAVA <span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> --add-exports=java.base/sun.nio.ch=ALL-UNNAMED <span class="hljs-variable">$@</span></span><br><br>numactl --interleave=all pwd &gt; /dev/null 2&gt;&amp;1<br>if [ $? -eq 0 ]<br>then<br>if [ -z &quot;$RMQ_NUMA_NODE&quot; ] ; then<br>numactl --interleave=all $JAVA $&#123;JAVA_OPT&#125; $@<br>else<br>numactl --cpunodebind=$RMQ_NUMA_NODE --membind=$RMQ_NUMA_NODE $JAVA $&#123;JAVA_OPT&#125; $@<br>fi<br>else<br>&quot;$JAVA&quot; $&#123;JAVA_OPT&#125; $@<br>fi<br></code></pre></td></tr></table></figure><h1 id="3-启动RocketMQ"><a href="#3-启动RocketMQ" class="headerlink" title="3. 启动RocketMQ"></a>3. 启动RocketMQ</h1><p>（当前目录为rocketmq-all-5.1.4-bin-release）</p><ol><li><strong>启动名称服务器</strong>：执行命令：<code>nohup sh bin/mqnamesrv &amp;</code></li><li><strong>启动消息队列和代理服务器</strong>：<code>nohup sh bin/mqbroker -n localhost:9876 --enable-proxy &amp;</code></li></ol><blockquote><p>nohup代表“不挂起”。在终端中执行命令然后关闭终端时，与该命令相关联的进程通常也会终止。nohup可以防止这种情况发生。</p></blockquote><p>可查看nohup.out（<code>vim nohup.out</code>）或日志文件（<code>tail -f ~/logs/rocketmqlogs/proxy.log</code>）来判断消息队列有无启动成功。</p><h1 id="4-关闭RocketMQ"><a href="#4-关闭RocketMQ" class="headerlink" title="4. 关闭RocketMQ"></a>4. 关闭RocketMQ</h1><ul><li><strong>关闭消息队列</strong>：<code>sh bin/mqshutdown broker</code></li><li><strong>关闭名称服务</strong>：<code>sh bin/mqshutdown namesrv</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列：1.认识篇</title>
    <link href="/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/mq-introducte/"/>
    <url>/2024/03/13/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/mq-introducte/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>消息队列，顾名思义，存放消息（可类比为请求）的队列（一种先进先出的数据结构）。<br>其是一种常用于分布式系统的中间件，可以在不同的应用程序、服务或系统之间传递消息，并且常用于解耦合不同部分的系统，使得系统更加可扩展和灵活。<br><strong>基本原理：发送者将消息放入队列，接收者从队列中获取消息并处理。</strong><br>消息队列实质是一种方式，一种<strong>在不同组件之间传递消息的通信方式</strong>。发送者和接收者之间不需要直接通信，它们只需了解如何发送和接收消息即可。</p><h1 id="作用与优点"><a href="#作用与优点" class="headerlink" title="作用与优点"></a>作用与优点</h1><p>由上述内容，可推断出消息队列的一些作用：</p><ul><li><strong>解耦</strong>：发送者和接收者只需要关心发送消息和接受消息，不用关心彼此。</li><li><strong>异步</strong>：发送者不关心消息的处理，即不用等待消息的响应，故支持异步。</li><li><strong>削锋</strong>：某些活动的流量过大、请求过多，可能导致系统宕机；消息队列可以作为缓冲区，将这些请求暂时存储起来，以避免瞬时高流量，然后按照系统处理能力逐步消费，实现流量的平滑处理，从而降低系统的压力，避免宕机。<br>以及其身为分布式系统的固有优点：</li><li><strong>可扩展性</strong>：在解耦后，可方便地单独对发送者或接收者或消息队列进行动态伸缩。</li><li><strong>可靠性</strong>：由于消息队列允许多个消费者和生产者，并且通常支持消息持久化和复制，因此即使其中一个组件出现故障，系统仍然可以继续运行并且消息也不会丢失。</li></ul><h1 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h1><p>（此处仅介绍一些常见场景）</p><h2 id="异步场景举例：用户注册"><a href="#异步场景举例：用户注册" class="headerlink" title="异步场景举例：用户注册"></a>异步场景举例：用户注册</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>用户注册后需向其发送注册邮件和注册短信。</p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>用户注册后，将注册信息写入数据库；发送注册邮件；发送短信。<br>如不使用消息队列，不进行异步解耦，即注册服务器需要同步远程调用写入数据库、发送注册邮件、发送短信的三个函数，将与其他应用发生多次交互，同时还得等待响应，假设一个操作需要0.5s，则该操作会占用注册服务器一个线程的1.5s。<br>使用消息队列后，注册服务器直接向消息队列中写入三个消息（数据库写入消息、邮件发送消息、短信发送消息），并且是异步发送不用等待返回，假设一次发送消息为0.1s，也仅需0.3s。</p><h2 id="解耦场景举例：订单-库存管理"><a href="#解耦场景举例：订单-库存管理" class="headerlink" title="解耦场景举例：订单-库存管理"></a>解耦场景举例：订单-库存管理</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>用户下订单后，库存系统需要减少相对数量。</p><h3 id="设计-1"><a href="#设计-1" class="headerlink" title="设计"></a>设计</h3><p>用户下单后，订单系统需要通知库存系统。</p><h3 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h3><ul><li>原设计：订单系统调用库存系统的接口。<ul><li>存在缺陷：假如库存系统无法访问，则订单减库存将失败，从而导致订单失败；订单系统依赖库存系统接口，存在耦合。</li></ul></li><li>使用消息队列改进：订单系统发送订单消息（用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功），库存系统读取订单消息并自行处理（订阅订单消息，采用拉&#x2F;推的方式，获取下单信息，库存系统根据下单信息，进行库存操作）。<ul><li>解决缺陷：假如库存系统无法访问，订单系统仅需要发送消息，可保持运转；订单消息仅发送消息，消息解读由库存系统进行（发布-订阅或消息队列模式），降低耦合度。</li></ul></li></ul><h2 id="削锋场景举例：秒杀活动"><a href="#削锋场景举例：秒杀活动" class="headerlink" title="削锋场景举例：秒杀活动"></a>削锋场景举例：秒杀活动</h2><h3 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h3><p>在秒杀活动中，大量用户同时抢购商品，可能会导致系统压力激增。为了应对这一情况，需要一种机制来平稳处理激增的请求流量，避免系统崩溃或性能下降。</p><h3 id="设计-2"><a href="#设计-2" class="headerlink" title="设计"></a>设计</h3><p>传统的处理方式可能会导致系统崩溃或性能下降。为了解决这个问题，可以使用消息队列来削峰填谷。</p><h3 id="详细设计-1"><a href="#详细设计-1" class="headerlink" title="详细设计"></a>详细设计</h3><ol><li>秒杀活动开始：当秒杀活动开始时，用户可以提交秒杀请求。</li><li>请求入队：订单系统接收到用户的秒杀请求后，将请求消息写入消息队列，而不是立即处理。</li><li>消息处理：秒杀请求消息被消息队列按照一定的规则（如先进先出）分发给后端处理程序。</li><li>后端处理：后端处理程序逐条处理消息，检查库存并进行相应的处理（如减少库存、生成<br>订单等）。</li></ol><p>以此消息队列可平滑处理激增的请求流量，避免系统因突发流量而崩溃。</p><h2 id="日志处理场景"><a href="#日志处理场景" class="headerlink" title="日志处理场景"></a>日志处理场景</h2><h3 id="需求-3"><a href="#需求-3" class="headerlink" title="需求"></a>需求</h3><p>需要一种解决大量日志传输和实时处理的方案，以便对日志数据进行分析和可视化展示。</p><h3 id="设计-3"><a href="#设计-3" class="headerlink" title="设计"></a>设计</h3><p>设计一个分布式日志处理系统，包括以下组件：</p><ol><li>日志采集客户端：负责从各个日志源采集日志数据，并将数据定期写入消息队列中。</li><li>消息队列：接收来自日志采集客户端的日志数据，负责数据的存储和转发。</li><li>日志处理应用：订阅并消费Kafka队列中的日志数据，进行实时处理和分析。</li><li>Logstash：作为日志处理应用的一部分，负责对原始日志进行解析和转换，统一输出为JSON格式的数据。</li><li>Elasticsearch：作为日志处理应用的核心数据存储服务，接收Logstash处理后的JSON格式日志数据，实现实时的数据索引和查询。</li><li>Kibana：基于Elasticsearch 的数据可视化组件，用于将Elasticsearch中的数据进行可视化展示和分析。</li></ol><h2 id="消息通讯场景"><a href="#消息通讯场景" class="headerlink" title="消息通讯场景"></a>消息通讯场景</h2><h3 id="需求-4"><a href="#需求-4" class="headerlink" title="需求"></a>需求</h3><p>需要一种高效的消息通讯机制，可以用于点对点通讯或者创建聊天室等场景，以实现实时的消息传递和交流。</p><h3 id="设计-4"><a href="#设计-4" class="headerlink" title="设计"></a>设计</h3><p>设计一个基于消息队列的消息通讯系统，包括以下两种场景：</p><ol><li>点对点通讯：客户端A和客户端B使用同一队列进行消息通讯；消息队列负责接收和转发客户端A和客户端B的消息。</li><li>客户端A、客户端B等多个客户端订阅同一主题：当有客户端发布消息时，消息队列将消息广播给所有订阅了该主题的客户端，客户端收到消息后进行展示。</li></ol><h1 id="常用消息队列框架"><a href="#常用消息队列框架" class="headerlink" title="常用消息队列框架"></a>常用消息队列框架</h1><ol><li><strong>RabbitMQ</strong>：RabbitMQ 是一个开源的消息队列系统，实现了高级消息队列协议（AMQP），它是一个可靠、高可用、可扩展的消息代理。RabbitMQ提供了多种消息传递模式，如点对点、发布&#x2F;订阅等，适用于各种场景的应用程序。</li><li><strong>RocketMQ</strong>：RocketMQ 是阿里巴巴开源的分布式消息队列系统，具有高吞吐量、低延迟、高可用性等特点。它支持丰富的消息模型，包括顺序消息、事务消息等，适用于大规模分布式系统的消息通信。</li><li><strong>Kafka</strong>：Kafka是由Apache软件基金会开发的分布式流处理平台和消息队列系统。Kafka设计用于支持大规模的消息处理，具有高吞吐量、持久性、分区等特点，广泛应用于大数据领域。</li><li><strong>ActiveMQ</strong>：ActiveMQ 是一个开源的消息中间件，实现了JavaMessageService(JMS)规范。它支持多种传输协议，如TCP、UDP、SSL等，提供了丰富的功能，包括消息持久化、事务支持等。</li><li><strong>Amazon SQS</strong>：AmazonSQS（Simple Queue Service）是亚马逊提供的消息队列服务，可帮助构建分布式应用程序。它具有高可用性、可扩展性、灵活性等特点，适用于构建在亚马逊云平台上的应用程序。</li></ol>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
      <tag>RocketMQ</tag>
      
      <tag>解耦</tag>
      
      <tag>异步</tag>
      
      <tag>削锋</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu：初始化云服务器</title>
    <link href="/2024/03/12/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/%E5%AE%9E%E8%B7%B5/initUbuntu/"/>
    <url>/2024/03/12/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/%E5%AE%9E%E8%B7%B5/initUbuntu/</url>
    
    <content type="html"><![CDATA[<p>本文将介绍如何在一个新创建的ubuntu云服务上做一些准备工作，方便项目上线。</p><h1 id="更新软件列表"><a href="#更新软件列表" class="headerlink" title="更新软件列表"></a>更新软件列表</h1><p>执行<code>sudo apt update</code>，确保系统上安装的软件包列表是最新的，这样在安装新软件包或升级已安装的软件包时能够获得最新的版本和信息。</p><h1 id="开启sftp"><a href="#开启sftp" class="headerlink" title="开启sftp"></a>开启sftp</h1><p>执行<code>sudo apt install openssh-server</code>，方便进行文件传输。<br>执行后可使用winSCP方便地传文件。</p><h1 id="安装jdk17"><a href="#安装jdk17" class="headerlink" title="安装jdk17"></a>安装jdk17</h1><p>执行<code>sudo apt install openjdk-17-jdk</code>，以便后续运行jar包。<br>可使用<code>java -version</code>命令判断是否安装成功，以及查看java版本。<br>输出结果如：</p><blockquote><p>openjdk version “17.0.10” 2024-01-16<br>OpenJDK Runtime Environment (build 17.0.10+7-Ubuntu-122.04.1)<br>OpenJDK 64-Bit Server VM (build 17.0.10+7-Ubuntu-122.04.1, mixed mode, sharing)</p></blockquote><h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><p>执行<code>sudo apt install mysql-server</code>安装MySQL。<br>安装完成后，使用<code>sudo lsof -i | grep mysql</code>命令查看mysql是否开启运行。<br>输出应该为：</p><blockquote><p>ubuntu@VM-4-8-ubuntu:~$ sudo lsof -i | grep mysql<br>mysqld    19846           mysql   21u  IPv4  90057      0t0  TCP localhost:33060 (LISTEN)<br>mysqld    19846           mysql   23u  IPv4  90065      0t0  TCP localhost:mysql (LISTEN)</p></blockquote><p>（可以运行一下<code>sudo mysql_secure_installation</code>，执行自带的安全脚本，设置一些配置，开发环境不用在意这个）</p><h2 id="配置账号"><a href="#配置账号" class="headerlink" title="配置账号"></a>配置账号</h2><ol><li>使用<code>sudo mysql</code>进入MySQL页面。</li><li>使用<code>use mysql</code>进入MySQL数据库。</li><li>使用<code>update user set host = &#39;%&#39; where user = &#39;root&#39;;</code>命令设置root账户运行远程登录。</li><li>使用<code>flush privileges;</code>刷新配置。</li><li>使用<code>ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH MYSQL_NATIVE_PASSWORD BY &#39;你的密码&#39;</code> 修改root账号密码。</li><li>再次使用<code>flush privileges;</code>刷新配置。</li><li>使用<code>exit</code>退出。</li></ol><p>下次进入就要用<code>sudo mysql -u root -p</code>命令了。</p><h2 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h2><p>（注意要先把防火墙开放一下）<br>此时账户配置好了，但是Navicat还是连接不上，因为MySQl有个配置文件中设置了只接受某个特定id来源的请求，需要修改：</p><ol><li>进入MySQL的配置文件目录（<code>cd /etc/mysql</code>），查看里面哪个配置文件中包含了bind-address。（我的是&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf文件里面）</li><li>使用vim修改即可。<blockquote><p>bind-address            &#x3D; 127.0.0.1<br>mysqlx-bind-address     &#x3D; 127.0.0.1<br>修改为<br>bind-address            &#x3D; 0.0.0.0<br>mysqlx-bind-address     &#x3D; 0.0.0.0</p></blockquote></li><li>重启MySQL服务：<code>sudo service mysql restart</code></li></ol><p>即可使用Navicat连接。</p><h1 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h1><p>执行<code>sudo apt install redis-server</code>安装Redis。<br>安装完成后，可使用<code>sudo systemctl status redis-server</code>查看有无启动（默认是启动的）。<br>输出为：</p><blockquote><p>ubuntu@VM-4-8-ubuntu:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d$ sudo systemctl status redis-server<br>● redis-server.service - Advanced key-value store<br>     Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;redis-server.service; enabled; vendor preset: enabled)<br>     Active: active (running) since Tue 2024-03-12 18:14:04 CST; 48s ago<br>……</p></blockquote><p>可执行<code>redis-cli</code>进入本地Redis并测试有无启动成功：</p><blockquote><p>ubuntu@VM-4-8-ubuntu:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d$ redis-cli<br>127.0.0.1:6379&gt; ping<br>PONG<br>127.0.0.1:6379&gt; exit</p></blockquote><h2 id="配置远程连接-1"><a href="#配置远程连接-1" class="headerlink" title="配置远程连接"></a>配置远程连接</h2><ol><li>使用<code>sudo su</code>进入root账号（进入redis配置文件夹需要root权限）</li><li>使用<code>cd /etc/redis</code>进入配置文件夹</li><li>使用<code>vim redis.conf</code>修改文件（输入<code>/bind</code>进行查找，点击<strong>n</strong>查找下一个）</li><li>修改配置文件。<blockquote><p>bind 127.0.0.1 ::1<br>修改为<br>bind 0.0.0.0 ::1</p></blockquote></li><li>重启Redis服务（<code>sudo systemctl restart redis-server</code>）</li></ol><p>（注意开放6379的防火墙）<br>即可在远程连接到Redis。</p><blockquote><p>D:\Redis\Redis-x64-5.0.14.1&gt;redis-cli -h [数据删除]<br>[数据删除]:6379&gt; ping<br>PONG<br>[数据删除]:6379&gt; exit</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>项目实践</category>
      
      <category>准备工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云服务器</tag>
      
      <tag>ubuntu</tag>
      
      <tag>docker</tag>
      
      <tag>java</tag>
      
      <tag>sftp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canal入门篇：1.介绍&amp;配置&amp;启动</title>
    <link href="/2024/03/06/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6/canal/canal_config/"/>
    <url>/2024/03/06/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6/canal/canal_config/</url>
    
    <content type="html"><![CDATA[<p>本文将讲述canal的安装、配置、启动以及验证监听是否成功。</p><h1 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍[1]"></a>介绍<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="本文基于canalv1.1.7版本。">[1]</span></a></sup></h1><p><strong>中间件功能：基于数据库增量日志解析，提供增量数据的订阅&amp;消费。</strong>（目前主要支持了mysql）</p><p>使用canal的优点：</p><ul><li><strong>实时性</strong>：Canal 直接对接 MySQL 的二进制日志（Binlog），实现了近乎实时的数据同步，可以实现实时数据流处理和近实时的数据集成。</li><li><strong>轻量级</strong>：作为一个开源组件，Canal 采用 Java 编写，具有较好的跨平台性和扩展性，部署相对简单，资源占用较小，适合大规模分布式环境下的部署与使用。</li><li><strong>可靠性</strong>：基于 MySQL 的 Binlog 记录机制，Canal 可以确保数据的完整性，不会丢失任何有效的数据库更改操作。</li><li><strong>灵活性</strong>：Canal 提供了丰富的过滤和路由策略，允许用户根据需求精确配置需要同步的数据库、表甚至是字段级别的数据变更。</li><li><strong>低侵入性</strong>：无需在业务代码中插入额外逻辑，就能实现数据的实时抓取，业务代码与数据同步逻辑完全解耦。</li><li><strong>易用性</strong>：提供了简洁易懂的配置方式，支持多种输出方式，如消息队列、HTTP API 推送等，方便与其他系统进行集成。</li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><h3 id="1-MySQL主从复制原理"><a href="#1-MySQL主从复制原理" class="headerlink" title="1. MySQL主从复制原理"></a>1. MySQL主从复制原理</h3><ol><li><strong>主库 Binlog 日志</strong>：在主数据库（Master）中，所有对数据库的更改操作都被记录在<strong>二进制日志（Binary Log，即binlog）</strong>中。这个日志包含了所有数据修改语句（如INSERT、UPDATE、DELETE），或者更底层的事件，如行格式的二进制日志。</li><li><strong>日志传输</strong>：从数据库（Slave）连接到主数据库，请求主数据库发送 binlog 中的更新事件。主数据库有一个名为 <strong>Binlog Dump Thread</strong> 的线程，它负责读取 binlog 并将这些事件传送给从数据库。</li><li><strong>中继日志 Relay Log</strong>：从数据库接收到主数据库的更新事件后，将它们存储在自己的中继日志（Relay Log）中。</li><li><strong>事件重放</strong>：从数据库有自己的** SQL 线程（也称 I&#x2F;O 线程和 SQL 线程）**，I&#x2F;O 线程负责接收并写入 relay log，而 SQL 线程则负责读取 relay log 中的事件并在从数据库上重新执行（即重放）这些事件。</li></ol><p><img src="/2024/03/06/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6/canal/canal_config/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.png"></p><p>这个过程保证了主数据库的每一次更新操作都能在从数据库上按照同样的顺序执行一次，从而让从数据库的数据与主数据库保持一致。</p><blockquote><p>复制模式(MySQL 支持多种复制模式)：</p><ul><li>异步复制是最常见的模式，主库不等待从库确认就继续处理新的事务，因此可能存在一定的数据延迟。</li><li>半同步复制在主库提交事务之前至少需要一个从库确认已接收事件，提供了一定程度的数据一致性保障。</li><li>全同步复制要求所有从库都确认事务后，主库才提交事务，提供了最强的数据一致性，但可能会影响性能。</li></ul></blockquote><h3 id="2-canal工作原理"><a href="#2-canal工作原理" class="headerlink" title="2. canal工作原理"></a>2. canal工作原理</h3><p><img src="/2024/03/06/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6/canal/canal_config/canal%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"></p><ol><li><strong>模拟MySQL Slave</strong>： Canal通过模拟MySQL的Slave节点行为，连接到MySQL Master节点，并遵循MySQL的复制协议。它会像真正的MySQL slave那样，向MySQL master发送dump binlog的请求。</li><li><strong>获取Binary Log</strong>： 当MySQL Master接收到这个dump请求后，它会开始将自身的二进制日志（Binary Log）推送给Canal。Binary Log中记录了所有对数据库的更改操作，如INSERT、UPDATE、DELETE等。</li><li><strong>解析Binary Log</strong>： Canal接收并解析Master推送过来的Binary Log数据流，将其转换成结构化的事件（event）。这些事件包含了数据库变更的具体内容，如变更前后的行数据、执行的SQL语句等。</li></ol><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="/2024/03/06/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6/canal/canal_config/canal%E6%9E%B6%E6%9E%84.png"></p><ol><li>server：一个canal运行实例，对应于一个jvm</li><li>instance：对应于一个数据队列（1个server对应1..n个instance）<ol><li>eventParser：数据源接入，模拟slave协议和master进行交互，协议解析。</li><li>eventSink：Parser和Store链接器，进行数据过滤，加工，分发的工作。</li><li>eventStore：数据存储。</li><li>metaManager：增量订阅&amp;消费信息管理器。</li></ol></li></ol><blockquote><p>具体各个模块的功能请参考<a href="https://github.com/alibaba/canal/wiki/%E7%AE%80%E4%BB%8B">canal仓库</a></p></blockquote><h1 id="配置（快速启动canal）"><a href="#配置（快速启动canal）" class="headerlink" title="配置（快速启动canal）"></a>配置（快速启动canal）</h1><h2 id="1-更改MySQL配置"><a href="#1-更改MySQL配置" class="headerlink" title="1. 更改MySQL配置"></a>1. 更改MySQL配置</h2><p>修改MySQL配置文件my.ini，开启 Binlog 写入功能，并配置 binlog-format 为 ROW 模式：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">log-bin</span>=mysql-bin <span class="hljs-comment"># 开启 binlog</span><br><span class="hljs-attr">binlog-format</span>=ROW <span class="hljs-comment"># 选择 ROW 模式</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-number">1</span> <span class="hljs-comment"># 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复</span><br></code></pre></td></tr></table></figure><blockquote><p>Windows修改MySQL配置文件的方式：</p><ol><li><code>Win+R</code>打开<strong>运行</strong>，输入<code>services.msc</code>，进入服务页面。</li><li>找到对应的MySQL服务，双击查看<strong>可执行文件的路径：</strong>条目下的<code>--default-file=</code>后的my.ini文件位置。</li><li>修改该文件。</li><li>右键MySQL服务条目，点击<strong>重新启动</strong>，重启MySQL服务。</li></ol></blockquote><h2 id="2-安装canal"><a href="#2-安装canal" class="headerlink" title="2. 安装canal"></a>2. 安装canal</h2><p>进入Ubuntu安装canal：</p><ol><li>进入canal的<a href="https://github.com/alibaba/canal/releases">release页面</a>，选择对应版本的压缩包。（我下载的是canal.deployer-1.1.7.tar.gz<br>）</li><li>在ubuntu中拉取该压缩包：<code>wget https://github.com/alibaba/canal/releases/download/canal-1.1.7/canal.deployer-1.1.7.tar.gz</code></li><li>解压该压缩包<code>tar -zxf canal.deployer-1.1.7.tar.gz</code></li><li>修改配置文件<code>vim conf/example/instance.properties</code></li></ol><p>修改配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">canal.instance.master.<span class="hljs-attribute">address</span>=192.168.112.1:3306<br>canal.instance.master.journal.<span class="hljs-attribute">name</span>=mysql-bin.000353<br>canal.instance.master.<span class="hljs-attribute">position</span>=1<br><span class="hljs-built_in">..</span>.<br>canal.instance.<span class="hljs-attribute">dbUsername</span>=canal<br>canal.instance.<span class="hljs-attribute">dbPassword</span>=canal<br><span class="hljs-built_in">..</span>.<br>canal.instance.filter.<span class="hljs-attribute">regex</span>=api_open_platform\\..*<br></code></pre></td></tr></table></figure><ul><li>address: 数据库地址</li><li>journal.name: 日志文件名，去MySQL运行文件目录旁边找一下就能找到了</li><li>position: 从日志的第几个字节开始读取</li><li>dbUsername: 用户名</li><li>dbPassword: 用户密码</li><li>filter.regex：使用正则表达式选择数据库表（我设置的是监听api_open_platform数据库下所有的表）</li></ul><h2 id="3-启动canal"><a href="#3-启动canal" class="headerlink" title="3. 启动canal"></a>3. 启动canal</h2><ol><li><strong>开启命令</strong>：<code>bash bin/startup.sh</code>。</li><li><strong>查看日志命令</strong>：<code>vim logs/canal/canal.log</code>、<code>vim logs/example/example.log</code>。</li><li><strong>关闭命令</strong>：<code>bash bin/stop.sh</code>。</li></ol><p>成功后的运行日志：</p><ul><li>canal.log：<blockquote><p>2024-03-06 22:16:46.110 [main] INFO  com.alibaba.otter.canal.deployer.CanalLauncher - ## set default uncaught exception handler<br>2024-03-06 22:16:46.117 [main] INFO  com.alibaba.otter.canal.deployer.CanalLauncher - ## load canal configurations<br>2024-03-06 22:16:46.126 [main] INFO  com.alibaba.otter.canal.deployer.CanalStarter - ## start the canal server.<br>2024-03-06 22:16:46.152 [main] INFO  com.alibaba.otter.canal.deployer.CanalController - ## start the canal server[172.20.0.1(172.20.0.1):11111]<br>2024-03-06 22:16:47.076 [main] INFO  com.alibaba.otter.canal.deployer.CanalStarter - ## the canal server is running now ……</p></blockquote></li><li>example.log：<blockquote><p>2024-03-06 22:16:46.589 [main] INFO  c.a.otter.canal.instance.spring.CanalInstanceWithSpring - start CannalInstance for 1-example<br>2024-03-06 22:16:47.044 [main] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - –&gt; init table filter : ^api_open_platform..<em>$<br>2024-03-06 22:16:47.044 [main] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - –&gt; init table black filter : ^mysql.slave_.</em>$<br>2024-03-06 22:16:47.048 [main] INFO  c.a.otter.canal.instance.core.AbstractCanalInstance - start successful….<br>2024-03-06 22:16:47.116 [destination &#x3D; example , address &#x3D; &#x2F;192.168.112.1:3306 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - —&gt; begin to find start position, it will be long time for reset or first position<br>2024-03-06 22:16:47.132 [destination &#x3D; example , address &#x3D; &#x2F;192.168.112.1:3306 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - prepare to find start position mysql-bin.000353:4:1709690365000<br>2024-03-06 22:16:47.437 [destination &#x3D; example , address &#x3D; &#x2F;192.168.112.1:3306 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - —&gt; find start position successfully, EntryPosition[included&#x3D;false,journalName&#x3D;mysql-bin.000353,position&#x3D;4,serverId&#x3D;1,gtid&#x3D;<null>,timestamp&#x3D;1709690365000] cost : 292ms , the next step is binlog dump</p></blockquote></li></ul><h1 id="java连接canal"><a href="#java连接canal" class="headerlink" title="java连接canal"></a>java连接canal</h1><h2 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.otter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>canal.client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><blockquote><p>注：该函数仅用于测试能否连接。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;---------O(∩_∩)O哈哈~ initCanal() main方法-----------&quot;</span>);<br>    <span class="hljs-comment">//=================================</span><br>    <span class="hljs-comment">// 创建链接canal服务端</span><br>    <span class="hljs-type">CanalConnector</span> <span class="hljs-variable">connector</span> <span class="hljs-operator">=</span> CanalConnectors.newSingleConnector(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;192.168.146.132&quot;</span>,<span class="hljs-number">11111</span>), <span class="hljs-string">&quot;example&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">batchSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>    <span class="hljs-comment">//空闲空转计数器</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">emptyCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    System.out.println(<span class="hljs-string">&quot;---------------------canal init OK，开始监听mysql变化------&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        connector.connect();<br>        connector.subscribe(<span class="hljs-string">&quot;.*\\..*&quot;</span>);<br>        <span class="hljs-comment">//connector.subscribe(&quot;petstoredb.pets&quot;);</span><br>        connector.rollback();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">totalEmptyCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">600</span>;<br>        <span class="hljs-keyword">while</span> (emptyCount &lt; totalEmptyCount) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我是canal，每秒一次正在监听:&quot;</span>+ UUID.randomUUID().toString());<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> connector.getWithoutAck(batchSize); <span class="hljs-comment">// 获取指定数量的数据</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">batchId</span> <span class="hljs-operator">=</span> message.getId();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> message.getEntries().size();<br>            <span class="hljs-keyword">if</span> (batchId == -<span class="hljs-number">1</span> || size == <span class="hljs-number">0</span>) &#123;<br>                emptyCount++;<br>                <span class="hljs-keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>); &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//计数器重新置零</span><br>                emptyCount = <span class="hljs-number">0</span>;<br>                printEntry(message.getEntries());<br>            &#125;<br>            connector.ack(batchId); <span class="hljs-comment">// 提交确认</span><br>            <span class="hljs-comment">// connector.rollback(batchId); // 处理失败, 回滚数据</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;已经监听了&quot;</span>+totalEmptyCount+<span class="hljs-string">&quot;秒，无任何消息，请重启重试......&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        connector.disconnect();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printEntry</span><span class="hljs-params">(List&lt;Entry&gt; entrys)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Entry entry : entrys) &#123;<br>        <span class="hljs-keyword">if</span> (entry.getEntryType() == EntryType.TRANSACTIONBEGIN || entry.getEntryType() == EntryType.TRANSACTIONEND) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">RowChange</span> <span class="hljs-variable">rowChage</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取变更的row数据</span><br>            rowChage = RowChange.parseFrom(entry.getStoreValue());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;ERROR ## parser of eromanga-event has an error,data:&quot;</span> + entry.toString(),e);<br>        &#125;<br>        <span class="hljs-comment">//获取变动类型</span><br>        <span class="hljs-type">EventType</span> <span class="hljs-variable">eventType</span> <span class="hljs-operator">=</span> rowChage.getEventType();<br>        System.out.println(String.format(<span class="hljs-string">&quot;================binlog[%s:%s] , name[%s,%s] , eventType : %s&quot;</span>,<br>                entry.getHeader().getLogfileName(), entry.getHeader().getLogfileOffset(),<br>                entry.getHeader().getSchemaName(), entry.getHeader().getTableName(), eventType));<br>        <span class="hljs-keyword">for</span> (RowData rowData : rowChage.getRowDatasList()) &#123;<br>            <span class="hljs-keyword">if</span> (eventType == EventType.INSERT) &#123;<br>                rowData.getAfterColumnsList().forEach(column-&gt;System.out.println(column.getName() + <span class="hljs-string">&quot; : &quot;</span> + column.getValue() + <span class="hljs-string">&quot;    update=&quot;</span> + column.getUpdated()));<br>                <span class="hljs-comment">//redisInsert(rowData.getAfterColumnsList());</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (eventType == EventType.DELETE) &#123;<br>                rowData.getAfterColumnsList().forEach(column-&gt;System.out.println(column.getName() + <span class="hljs-string">&quot; : &quot;</span> + column.getValue() + <span class="hljs-string">&quot;    update=&quot;</span> + column.getUpdated()));<br>                <span class="hljs-comment">//redisDelete(rowData.getBeforeColumnsList());</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//EventType.UPDATE</span><br>                rowData.getAfterColumnsList().forEach(column-&gt;System.out.println(column.getName() + <span class="hljs-string">&quot; : &quot;</span> + column.getValue() + <span class="hljs-string">&quot;    update=&quot;</span> + column.getUpdated()));<br>                <span class="hljs-comment">//redisUpdate(rowData.getAfterColumnsList());</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出为：</p><blockquote><p>我是canal，每秒一次正在监听:0d7700c0-0117-4a28-8d82-0a6ccbafadfd<br>我是canal，每秒一次正在监听:a658edf6-e56c-458e-bf13-25a64bffa7ec<br>我是canal，每秒一次正在监听:a6896fce-8f48-4478-983e-cf4bb05c1393<br>我是canal，每秒一次正在监听:e180a475-8a4a-44ee-84fa-096c2f44db16<br>我是canal，每秒一次正在监听:0fd10344-7eb1-412d-90fc-185e3ec69c51<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;binlog[mysql-bin.000353:54296] , name[api_open_platform,interface_access] , eventType : INSERT<br>accesskey : a7e4c3c9-90be-434f-a201-1fb0c9c6921f    update&#x3D;true<br>verify_type : 1    update&#x3D;true<br>secretkey : 41ee07aa-bd35-45f0-aa6f-b39351d8db0c    update&#x3D;true<br>remaining_amount :     update&#x3D;true<br>remaining_times :     update&#x3D;true<br>interface_id : 10    update&#x3D;true<br>userid : 28    update&#x3D;true<br>call_times : 0    update&#x3D;true<br>failed_call_times : 0    update&#x3D;true<br>create_time : 2024-03-06 22:42:25    update&#x3D;true<br>update_time : 2024-03-06 22:42:25    update&#x3D;true<br>is_deleted : 0    update&#x3D;true<br>我是canal，每秒一次正在监听:1b80e597-9976-430a-b6f7-4fcaac936776<br>我是canal，每秒一次正在监听:9e89f0f4-0dfe-4f53-88c7-5731dbf0ebdf<br>我是canal，每秒一次正在监听:19322e19-0924-400d-a85b-bba58beb1a53<br>我是canal，每秒一次正在监听:0febf37a-df93-40b8-8c23-d0b89a1a1576</p></blockquote><p>至此，canal启动完成。<section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>本文基于canalv1.1.7版本。<br><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>canal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>canal</tag>
      
      <tag>双写一致性</tag>
      
      <tag>Dump</tag>
      
      <tag>Binary log</tag>
      
      <tag>mysql slave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canal入门篇：2.实现MySQL&amp;Redis双写一致性</title>
    <link href="/2024/03/06/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6/canal/canal_MySQL&amp;Redis/"/>
    <url>/2024/03/06/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6/canal/canal_MySQL&amp;Redis/</url>
    
    <content type="html"><![CDATA[<p>本文将介绍如何使用canal实现MySQl和Redis的双写一致性。前文为：<a href="/2024/03/06/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6/canal/canal_config/" title="canal入门篇：1.介绍&amp;配置&amp;启动">canal入门篇：1.介绍&amp;配置&amp;启动</a>。</p><blockquote><p><a href="https://github.com/shoumingchilun/API_OPEN_SPACE_CANAL">github仓库链接</a></p></blockquote><h1 id="canalAPI讲解"><a href="#canalAPI讲解" class="headerlink" title="canalAPI讲解"></a>canalAPI讲解</h1><p>本文将使用SpringBoot框架搭建一个应用，通过canal获得数据库的更改消息，并将发生变更的实体同步更新到Redis中。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>使用canal的好处：</p><ol><li><strong>透明性与低侵入</strong>：使用 Canal 通常不需要对既有业务逻辑进行大规模改造，因为它作为独立的服务组件，可以透明地监听和处理数据库的变化，将更新事件推送给相应的缓存系统，实现数据同步，降低了对业务代码的入侵性。</li><li><strong>扩展性与灵活性</strong>：Canal 支持多种数据源以及不同的消费方式，可以根据实际需求构建灵活的消息处理和分发机制。它可以与各种消息队列或数据处理系统集成，实现复杂的数据同步和多级缓存更新。</li><li><strong>可靠性</strong>：由于 Canal 是基于 MySQL 的主从复制协议设计的，它继承了数据库层面的数据可靠性保障。同时，消息投递失败时（未进行ACK）可以通过重试机制确保最终一致性，而且可以支持幂等处理，避免重复消费造成的问题。</li></ol><h2 id="类说明"><a href="#类说明" class="headerlink" title="类说明"></a>类说明</h2><h3 id="canal-Client"><a href="#canal-Client" class="headerlink" title="canal Client"></a>canal Client</h3><p>先介绍一下canal Client相关的一些配置类：</p><ul><li><strong>ClientIdentity</strong>：canal client和server交互之间的身份标识。</li><li><strong>CanalConnector</strong>：SimpleCanalConnector&#x2F;ClusterCanalConnector是两种connector的实现。simple针对的是简单的ip直连模式，cluster针对多ip的模式，可依赖CanalNodeAccessStrategy进行failover控制。（确保 Canal 在发生故障时能够无缝地切换到备份节点或者恢复服务，暂时不关注）</li><li><strong>CanalNodeAccessStrategy</strong>：SimpleNodeAccessStrategy&#x2F;ClusterNodeAccessStrategy是两种failover的实现。simple针对给定的初始ip列表进行failover选择，cluster基于zookeeper上的cluster节点动态选择正在运行的canal server。（暂时不关注）</li></ul><p>然后即可从<code>connector</code>中通过<code>get</code>&#x2F;<code>getWithoutAck</code>获得的<code>Message</code>的这个类，该类主要的功能就是使用<code>getEntries</code>函数获得包装好的<code>List&lt;Entry&gt;</code>对象。</p><h3 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h3><p>介绍一下Entry、RowChange、rowdata、column的概念。</p><ol><li><strong>Entry</strong>：Entry 是 Canal 解析 MySQL Binlog 后产生的基本单元，它<strong>代表了Binlog中的一条记录</strong>。每个Entry对象对应了MySQL数据库的一个事务或一个GTID事件（如果启用了GTID）。Entry包含了事务的相关元数据如执行时间、事务ID等，以及实际的数据库更改内容。</li><li><strong>RowChange</strong>： RowChange 是更进一步封装的事件变更细节，它描述了<strong>一次数据库表级别的行级别数据变化</strong>。一个RowChange对象对应binlog中的一次行变更事件，它可以包含多行数据的插入、更新或删除操作。</li><li><strong>RowData</strong>：RowData 表示<strong>单行数据的变更内容</strong>。对于RowChange中的每一次行操作（insert&#x2F;update&#x2F;delete），都会有对应的RowData对象来具体描述变更前后的列值信息。<ol><li>RowData有两个重要的字段：<ul><li>beforeColumnsList：在UPDATE或DELETE事件中，存储的是变更前的列数据集合。</li><li>afterColumnsList：在INSERT或UPDATE事件中，存储的是变更后的列数据集合。</li></ul></li><li>对于INSERT、UPDATE和DELETE事件，其表现形式不同：<ul><li>INSERT事件：RowData会包含这一行插入后的所有列值。</li><li>UPDATE事件：RowData包含两部分，即变更前的列值（beforeColumns）和变更后的列值（afterColumns）。</li><li>DELETE事件：RowData仅包含被删除前的那一行的所有列值。</li></ul></li></ol></li><li><strong>Column</strong>：Column 对象更加细致地表示了数据库表中某一列的数据变化情况，包括列名、列值、是否为空、是否是主键等属性信息。在RowData的beforeColumns和afterColumns列表中，每一项就是一个Column对象。</li></ol><h3 id="解析Entry"><a href="#解析Entry" class="headerlink" title="解析Entry"></a>解析Entry</h3><p>在获得一个<code>List&lt;Entry&gt;</code>后，我们需要对其中每个条目进行逐步解析：</p><ol><li><strong>判断类型</strong>：通过调用<code>getEntryType()</code>获得该<code>Entry</code>的<code>EntryType</code>，常见的类型有**事务开始(BEGIN)、事务结束(COMMIT)、行数据(ROWDATA)**等。</li><li>对于 <strong>ROWDATA 类型</strong>的 Entry，可以从中提取 <strong>RowChange 对象</strong>（包含了数据库行级别的变更详情）：通过调用<code>CanalEntry.RowChange.parseFrom(entry.getStoreValue())</code>获得 RowChange 对象。</li><li>获得 RowChange 对象后，可根据<code>EventType</code>获得具体操作的类型，如<code>INSERT</code>、<code>UPDATE</code>、<code>ALTER</code>等，如： <code>rowChage.getEventType()==EventType.DELETE</code>。</li><li>可从 <code>RowChange</code> 对象中获得 <code>RowData</code> 对象，并从后者中获得一行数据变更前的状态和变更后的状态，再从中获得单独的<code>column</code>进行解析： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (RowData rowData : rowChage.getRowDatasList()) &#123;<br>    rowData.getBeforeColumnsList().forEach(column -&gt; System.out.println(column.getName() + <span class="hljs-string">&quot; : &quot;</span> + column.getValue()));<br>    rowData.getAfterColumnsList().forEach(column -&gt; System.out.println(column.getName() + <span class="hljs-string">&quot; : &quot;</span> + column.getValue()));<br></code></pre></td></tr></table></figure></li></ol><h1 id="实现双写一致性"><a href="#实现双写一致性" class="headerlink" title="实现双写一致性"></a>实现双写一致性</h1><p>（省略启动类）</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>需要添加Springboot和连接Redis、canal的依赖。<br>pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.otter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>canal.client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="注册CanalConnector-Bean"><a href="#注册CanalConnector-Bean" class="headerlink" title="注册CanalConnector Bean"></a>注册CanalConnector Bean</h2><p>使用配置文件注入依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CanalConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mycanal.hostname&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String hostname;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mycanal.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer port;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mycanal.destination&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String destination;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mycanal.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mycanal.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CanalConnector <span class="hljs-title function_">createCanalConnector</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> CanalConnectors.newSingleConnector(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(hostname,<br>                port), destination, username, password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件application.yml：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">mycanal:</span><br><span class="hljs-symbol">  hostname:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.146</span><span class="hljs-number">.132</span><br><span class="hljs-symbol">  port:</span> <span class="hljs-number">11111</span><br><span class="hljs-symbol">  destination:</span> example<br><span class="hljs-symbol">  username:</span><br><span class="hljs-symbol">  password:</span><br></code></pre></td></tr></table></figure><h2 id="设置Redis转码方式"><a href="#设置Redis转码方式" class="headerlink" title="设置Redis转码方式"></a>设置Redis转码方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(LettuceConnectionFactory lettuceConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br><br>        redisTemplate.setConnectionFactory(lettuceConnectionFactory);<br>        <span class="hljs-comment">//设置key序列化方式string</span><br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        <span class="hljs-comment">//设置value的序列化方式json，使用GenericJackson2JsonRedisSerializer替换默认序列化</span><br>        redisTemplate.setValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>());<br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>());<br><br>        redisTemplate.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>补充：如果使用GenericJackson2JsonRedisSerializer充当序列化&#x2F;反序列化工具的话<code>redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());</code>，请保证各组件内类名一致（包含包路径）。</p></blockquote><h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><p>Redis中value对应的实体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfaceAccess</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String accesskey;<br>    <span class="hljs-keyword">private</span> Integer verifyType;<br>    <span class="hljs-keyword">private</span> String secretkey;<br>    <span class="hljs-keyword">private</span> BigDecimal remainingAmount;<br>    <span class="hljs-keyword">private</span> Integer remainingTimes;<br>    <span class="hljs-keyword">private</span> Long interfaceId;<br>    <span class="hljs-keyword">private</span> Long userid;<br>    <span class="hljs-keyword">private</span> Integer callTimes;<br>    <span class="hljs-keyword">private</span> Integer failedCallTimes;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-keyword">private</span> Integer isDeleted;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设计Redis服务接口并实现"><a href="#设计Redis服务接口并实现" class="headerlink" title="设计Redis服务接口并实现"></a>设计Redis服务接口并实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RedisService</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ACCESS_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;InterfaceAccess_&quot;</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateInterfaceAccess</span><span class="hljs-params">(InterfaceAccess interfaceAccess)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteInterfaceAccess</span><span class="hljs-params">(InterfaceAccess interfaceAccess)</span>;<br>&#125;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RedisService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, InterfaceAccess&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateInterfaceAccess</span><span class="hljs-params">(InterfaceAccess interfaceAccess)</span> &#123;<br>        redisTemplate.opsForValue().set(RedisService.ACCESS_PREFIX + interfaceAccess.getAccesskey(), interfaceAccess, <span class="hljs-number">2</span>, TimeUnit.MINUTES);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteInterfaceAccess</span><span class="hljs-params">(InterfaceAccess interfaceAccess)</span> &#123;<br>        redisTemplate.delete(RedisService.ACCESS_PREFIX + interfaceAccess.getAccesskey());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建CanalMessageHandler类"><a href="#创建CanalMessageHandler类" class="headerlink" title="创建CanalMessageHandler类"></a>创建CanalMessageHandler类</h2><p>使用ApplicationRunner接口实现容器启动后开始监听。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CanalMessageHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationRunner</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> CanalConnector connector;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisService redisService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(ApplicationArguments args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">batchSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>        <span class="hljs-comment">//空闲空转计数器</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">emptyCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connector.connect();<br>            <span class="hljs-comment">// 监听api_open_platform数据库下的interface_access表</span><br>            connector.subscribe(<span class="hljs-string">&quot;api_open_platform.interface_access&quot;</span>);<br>            <span class="hljs-comment">// 回滚到未进行 ack 的地方，下次fetch的时候，可以从最后一个没有 ack 的地方开始拿</span><br>            connector.rollback();<br>            <span class="hljs-comment">// 如果3600s内没有监听到更改，则报错并停止运行</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">totalEmptyCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">3600</span>;<br>            <span class="hljs-keyword">while</span> (emptyCount &lt; totalEmptyCount) &#123;<br>                System.out.println(<span class="hljs-string">&quot;正在监听canal Server: &quot;</span> + System.currentTimeMillis());<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> connector.getWithoutAck(batchSize); <span class="hljs-comment">// 获取指定数量的数据</span><br>                <span class="hljs-type">long</span> <span class="hljs-variable">batchId</span> <span class="hljs-operator">=</span> message.getId();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> message.getEntries().size();<br>                <span class="hljs-keyword">if</span> (batchId == -<span class="hljs-number">1</span> || size == <span class="hljs-number">0</span>) &#123;<br>                    emptyCount++;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//计数器重新置零</span><br>                    emptyCount = <span class="hljs-number">0</span>;<br>                    handlerMessage(message.getEntries());<br>                &#125;<br>                connector.ack(batchId); <span class="hljs-comment">// 提交确认</span><br>                <span class="hljs-comment">// connector.rollback(batchId); // 处理失败, 回滚数据</span><br>            &#125;<br>            log.error(<span class="hljs-string">&quot;已经监听了&quot;</span> + totalEmptyCount + <span class="hljs-string">&quot;秒，无任何消息，请检查canal是否正常运行或连接是否成功......&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            connector.disconnect();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handlerMessage</span><span class="hljs-params">(List&lt;Entry&gt; entrys)</span> &#123;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现handlerMessage方法"><a href="#实现handlerMessage方法" class="headerlink" title="实现handlerMessage方法"></a>实现handlerMessage方法</h2><p>对消息进行处理，并通过调用<code>RedisService</code>的方法同步到redis。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handlerMessage</span><span class="hljs-params">(List&lt;Entry&gt; entrys)</span> &#123;<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Entry entry : entrys) &#123;<br>        <span class="hljs-comment">//如果不是ROWDATA，则忽略</span><br>        <span class="hljs-keyword">if</span> (entry.getEntryType() != EntryType.ROWDATA) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">RowChange</span> <span class="hljs-variable">rowchange</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取变更的row数据</span><br>            rowchange = CanalEntry.RowChange.parseFrom(entry.getStoreValue());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;解析Entry获得RowChange失败：&quot;</span> + entry, e);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//获取变动类型</span><br>        <span class="hljs-type">EventType</span> <span class="hljs-variable">eventType</span> <span class="hljs-operator">=</span> rowchange.getEventType();<br>        log.info(String.format(<span class="hljs-string">&quot;================binlog[%s:%s] , name[%s,%s] , eventType : %s&quot;</span>,<br>                entry.getHeader().getLogfileName(), entry.getHeader().getLogfileOffset(),<br>                entry.getHeader().getSchemaName(), entry.getHeader().getTableName(), eventType));<br><br>        <span class="hljs-keyword">for</span> (RowData rowData : rowchange.getRowDatasList()) &#123;<br>            <span class="hljs-comment">//由于使用逻辑删除，delete实现方式为将is_deleted属性设置为1，所以删除逻辑写在update中</span><br>            <span class="hljs-keyword">if</span> (eventType == EventType.UPDATE) &#123;<br>                <span class="hljs-comment">//可使用该方式查看各个index对应的列名是什么</span><br>                <span class="hljs-comment">//rowData.getAfterColumnsList().stream().forEach(column -&gt; &#123;</span><br>                <span class="hljs-comment">//    System.out.println(column.getName());</span><br>                <span class="hljs-comment">//&#125;);</span><br>                <span class="hljs-type">InterfaceAccess</span> <span class="hljs-variable">interfaceAccess</span> <span class="hljs-operator">=</span> parseRowDateIntoInterfaceAccess(rowData);<br>                <span class="hljs-keyword">if</span> (interfaceAccess.getIsDeleted() == <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-comment">//说明已经删除，需要同步删除</span><br>                    redisService.deleteInterfaceAccess(interfaceAccess);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//说明未删除，需要同步更新</span><br>                    redisService.updateInterfaceAccess(interfaceAccess);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> InterfaceAccess <span class="hljs-title function_">parseRowDateIntoInterfaceAccess</span><span class="hljs-params">(RowData rowData)</span> &#123;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    <span class="hljs-type">InterfaceAccess</span> <span class="hljs-variable">interfaceAccess</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterfaceAccess</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">accesskey</span> <span class="hljs-operator">=</span> rowData.getAfterColumns(<span class="hljs-number">0</span>).getValue();<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">verifyType</span> <span class="hljs-operator">=</span> Integer.parseInt(rowData.getAfterColumns(<span class="hljs-number">1</span>).getValue());<br>    <span class="hljs-comment">//允许为空的参数如果为空，则column.getValue().equals(&quot;&quot;)</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">secretkey</span> <span class="hljs-operator">=</span> rowData.getAfterColumns(<span class="hljs-number">2</span>).getValue().equals(<span class="hljs-string">&quot;&quot;</span>) ? <span class="hljs-literal">null</span> : rowData.getAfterColumns(<span class="hljs-number">2</span>).getValue();<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">remainingAmount</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (!rowData.getAfterColumns(<span class="hljs-number">3</span>).getValue().equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        remainingAmount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(rowData.getAfterColumns(<span class="hljs-number">3</span>).getValue());<br>    &#125;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">remainingTimes</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (!rowData.getAfterColumns(<span class="hljs-number">4</span>).getValue().equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        remainingTimes = Integer.parseInt(rowData.getAfterColumns(<span class="hljs-number">4</span>).getValue());<br>    &#125;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">interfaceId</span> <span class="hljs-operator">=</span> Long.parseLong(rowData.getAfterColumns(<span class="hljs-number">5</span>).getValue());<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userid</span> <span class="hljs-operator">=</span> Long.parseLong(rowData.getAfterColumns(<span class="hljs-number">6</span>).getValue());<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">callTimes</span> <span class="hljs-operator">=</span> Integer.parseInt(rowData.getAfterColumns(<span class="hljs-number">7</span>).getValue());<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">failedCallTimes</span> <span class="hljs-operator">=</span> Integer.parseInt(rowData.getAfterColumns(<span class="hljs-number">8</span>).getValue());<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">createTime</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">updateTime</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        createTime = sdf.parse(rowData.getAfterColumns(<span class="hljs-number">9</span>).getValue());<br>        updateTime = sdf.parse(rowData.getAfterColumns(<span class="hljs-number">10</span>).getValue());<br>    &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>        log.error(<span class="hljs-string">&quot;解析日期失败：&quot;</span>, e);<br>    &#125;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">isDeleted</span> <span class="hljs-operator">=</span> Integer.parseInt(rowData.getAfterColumns(<span class="hljs-number">11</span>).getValue());<br>    interfaceAccess.setAccesskey(accesskey);<br>    interfaceAccess.setVerifyType(verifyType);<br>    interfaceAccess.setSecretkey(secretkey);<br>    interfaceAccess.setRemainingAmount(remainingAmount);<br>    interfaceAccess.setRemainingTimes(remainingTimes);<br>    interfaceAccess.setInterfaceId(interfaceId);<br>    interfaceAccess.setUserid(userid);<br>    interfaceAccess.setCallTimes(callTimes);<br>    interfaceAccess.setFailedCallTimes(failedCallTimes);<br>    interfaceAccess.setCreateTime(createTime);<br>    interfaceAccess.setUpdateTime(updateTime);<br>    interfaceAccess.setIsDeleted(isDeleted);<br>    <span class="hljs-keyword">return</span> interfaceAccess;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="1-数据库更新后："><a href="#1-数据库更新后：" class="headerlink" title="1. 数据库更新后："></a>1. 数据库更新后：</h3><p>标准输出：</p><blockquote><p>正在监听canal Server: 1709812780346<br>2024-03-07 19:59:40.394  INFO 26712 — [           main] c.c.a.canal.handler.CanalMessageHandler  : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;binlog[mysql-bin.000354:6832] , name[api_open_platform,interface_access] , eventType : UPDATE<br>2024-03-07 19:59:40.425  INFO 26712 — [           main] c.c.a.canal.handler.CanalMessageHandler  : 在redis中同步f607abdc-c80e-4255-81d3-37ea6fe355b4<br>正在监听canal Server: 1709812780425<br>正在监听canal Server: 1709812781481</p></blockquote><p>查询redis：<br><img src="/2024/03/06/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6/canal/canal_MySQL&Redis/redis-update.png"></p><h3 id="2-数据库删除后"><a href="#2-数据库删除后" class="headerlink" title="2. 数据库删除后"></a>2. 数据库删除后</h3><p>标准输出：</p><blockquote><p>正在监听canal Server: 1709812979293<br>正在监听canal Server: 1709812980340<br>2024-03-07 20:03:00.383  INFO 26712 — [           main] c.c.a.canal.handler.CanalMessageHandler  : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;binlog[mysql-bin.000354:7413] , name[api_open_platform,interface_access] , eventType : UPDATE<br>2024-03-07 20:03:00.384  INFO 26712 — [           main] c.c.a.canal.handler.CanalMessageHandler  : 从redis中删除f607abdc-c80e-4255-81d3-37ea6fe355b4<br>正在监听canal Server: 1709812980384</p></blockquote><p>查询redis：<br><img src="/2024/03/06/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6/canal/canal_MySQL&Redis/redis-delete.png"></p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>canal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>canal</tag>
      
      <tag>双写一致性</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《区块链：技术驱动金融》摘录（概念目录）</title>
    <link href="/2024/03/03/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E5%8C%BA%E5%9D%97%E9%93%BE/%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D%E3%80%8B/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/"/>
    <url>/2024/03/03/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E5%8C%BA%E5%9D%97%E9%93%BE/%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D%E3%80%8B/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/</url>
    
    <content type="html"><![CDATA[<p>本文将介绍一些区块链领域的技术概念，充当一份技术目录以供备用。</p><h1 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>哈希函数具有以下特性：</p><ul><li><strong>碰撞阻力（Collision Resistance）</strong>：避免存在x，y，使H(x)&#x3D;H(y)<ul><li>对于任意两个不同的输入x和y，找到满足H(x) &#x3D; H(y)的x和y在计算上应该是非常困难的。理想的哈希函数应保证对于所有可能的输入，其输出的哈希值都各不相同，但实际上因为输出空间有限而输入空间无限，理论上总是存在碰撞的可能，但在实际应用中，一个好的哈希函数设计应当使寻找碰撞的概率变得极低。</li><li>特性应用：<strong>信息摘要（Message Digests）</strong>——在数据完整性校验中，哈希函数被用来生成一段数据的“数字指纹”，如MD5或SHA系列算法。当文件传输后，接收方可以通过重新计算哈希值并与发送方提供的摘要对比，确认数据在传输过程中是否被篡改。若摘要匹配，则说明数据未变；如果不匹配，则可能存在数据损坏或被恶意篡改。</li></ul></li><li><strong>隐秘性（Pre-image Resistance &#x2F; One-wayness）</strong>：y&#x3D;H(x)，不可通过y推出x<ul><li>隐秘性是指给定一个哈希值y，找到任何原输入x使得y &#x3D; H(x)在计算上是不可能或极其困难的。这体现了哈希函数的单向性，即从输出反推输入几乎不可能。</li><li>特性应用：<strong>承诺（Commitment Schemes）</strong> ——在密码学中，哈希函数可用于构建承诺方案，一方可以在不暴露具体值的情况下对某个秘密值做出承诺，并在以后揭示该值时证明承诺的有效性。例如，在零知识证明中，一个参与者可以提前提交一个哈希值作为承诺，后续再公开原始数据，其他人可以通过计算哈希验证其一致性，但在此之前无法猜出原始数据。</li></ul></li><li><strong>谜题友好（Puzzle-Friendliness 或 Puzzle-freeness）</strong>：使H(k||x)&#x3D;y成立的x无法在比2^n小很多时间内找到<ul><li>（该特性主要应用于比特币挖矿中）</li><li>谜题友好通常指的是哈希函数在特定条件下能够生成难以预先计算但易于验证结果的问题，即所谓的“工作量证明（Proof of Work, PoW）”。这种情况下，要求找到一个输入x（通常带有额外的随机数k）使得H(k || x) &#x3D; y成立的x在计算资源受限的情况下（比如在比穷举搜索所需时间小很多的时间内）是难以找到的。</li><li>特性应用：<strong>搜索谜题（Cryptographic Puzzles or Hashcash）</strong>——在比特币挖矿中，矿工竞相解决一个基于哈希难题的PoW问题，寻找一个nonce（k）使得区块头的哈希值小于某个目标阈值。这一特性确保了挖矿过程需要大量计算资源投入，从而达到区块链系统的去中心化共识机制的安全性。只有成功解决谜题的矿工才能添加新区块并获得奖励。</li></ul></li></ul><blockquote><p>谜题友好可以通俗地理解为——我很难找到符合要求的hash输入来发布一个区块并获得奖励（需要大量枚举），但是我可以很方便地验证一个新发布区块对应的hash是否是合理的，并以此判定对方是否应该获得奖励。</p></blockquote><p>目前主流使用的哈希函数：<strong>SHA-256</strong>。</p><h2 id="哈希指针"><a href="#哈希指针" class="headerlink" title="哈希指针"></a>哈希指针</h2><p><strong>概念：哈希指针是一种数据结构。</strong><br>简单来说，哈希指针是一个指向数据存储位置及其位置数据的哈希值的指针。一个普通的指针可以告诉你数据存储的位置，哈希指针不但可以告诉你数据存储的位置，并且还可以给你一种方式，让你<strong>验证数据没有被篡改过</strong>。</p><p><strong>常用应用：</strong></p><ul><li><strong>区块链</strong>：在区块链中，每个区块包含了区块头和区块体两部分。区块头包含了一个哈希指针，它指向的是前一个区块的哈希值。这样形成的链式结构确保了区块之间的<strong>顺序性和历史不可篡改性</strong>。<strong>如果有人试图修改某个过去的区块数据，那么该区块的哈希值会变化，并因此导致后续所有区块的哈希值都需要相应改变，因为它们都包含了前一个区块的哈希指针。</strong>这要求攻击者必须重新计算整个链条的哈希值，而这在比特币等具有足够工作量证明机制的区块链中几乎是不可能的。<br><img src="/2024/03/03/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E5%8C%BA%E5%9D%97%E9%93%BE/%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D%E3%80%8B/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/%E5%93%88%E5%B8%8C%E6%8C%87%E9%92%88_%E5%8C%BA%E5%9D%97%E9%93%BE.png"></li><li><strong>梅克尔树</strong>：当任意一笔交易数据发生变化时，该交易所在叶子节点的哈希值会变，进而影响到整棵树的根哈希值。由于区块头包含了这一梅克尔根，所以<strong>任何对交易数据的篡改都会立刻反映在区块哈希值的变化</strong>上，从而<strong>保护了整个区块链账本的完整性和一致性</strong>。另外梅克尔树还应用在轻客户端验证等场景中。<br><img src="/2024/03/03/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E5%8C%BA%E5%9D%97%E9%93%BE/%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D%E3%80%8B/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/%E5%93%88%E5%B8%8C%E6%8C%87%E9%92%88_%E6%A2%85%E5%85%8B%E5%B0%94%E6%A0%91.png"></li></ul><h1 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h1><p>数字签名方案由以下三个算法构成:</p><ol><li>$(sk,pk):&#x3D;generateKeys(keysize)$<br><code>generateKeys</code>方法把<code>keysize</code>作为输入，来产生一对公钥和私钥。私钥<code>sk</code>被安全保存，并用来签名一段消息；公钥<code>pk</code>是人人都可以找到的，拿到它，就可以用来验证你的签名。</li><li>$sig:&#x3D;sign(sk,message)$<br>签名过程是把一段消息和私钥作为一个输入，对于消息输出是签名。</li><li>$isValid:&#x3D;verify(pk,message, sig)$<br>验证过程是通过把一段消息和签名消息与公钥作为输入，如果返回的结果是真，证明签名属实；如果返回的结果为假，证明签名消息为假。</li></ol><p>我们要求以下两个性质有效:</p><ul><li>有效签名可以通过验证，即<br>$$verify(pk,message,sign(sk,message))&#x3D;&#x3D;true$$</li><li>签名不可伪造</li></ul><p>解释：</p><ul><li>发送方（签名者）拥有一个公钥和一个私钥。<strong>公钥任何人都可以知道，私钥则保密不公开。</strong></li><li>当发送方要签署一个文档时，首先使用单向散列函数（如SHA-256）将文档转换成固定长度的<strong>摘要</strong>。</li><li>发送方接着<strong>使用自己的私钥对该摘要进行加密</strong>，生成的密文就是<strong>数字签名</strong>。</li><li>接收方收到原始文档和数字签名后，<strong>使用发送方的公钥来解密签名</strong>，得到摘要A。</li><li>同时，接收方也会计算接收到的文档本身的散列值，得到另一个摘要B。</li><li>如果摘要A与摘要B匹配，则说明文档在传输过程中<strong>未被篡改</strong>，并且确实是<strong>由拥有对应私钥的人签署</strong>的。</li></ul><p>流程：</p><ol><li>对消息生成一个唯一且不变的摘要。</li><li>使用私钥对摘要进行加密形成签名。</li><li>收件人使用公钥解密签名并重新计算消息摘要。</li><li>比较两次计算出的摘要，如果相同，则确认签名有效，消息未被篡改且确信来自于拥有相应私钥的发送方。</li></ol><h1 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h1><p><strong>去中心化</strong>：去中心化是一种网络架构或系统<strong>设计原则</strong>，其中权力、功能和数据不在单一的中心点或权威机构手中，而是分散在网络中的各个节点之间。<strong>在去中心化的系统中，每个节点都可以作为网络的一部分参与到数据的处理、存储和验证过程中，而不是依赖单一的中心服务器。</strong>去中心化的目的是为了提高系统的鲁棒性、透明度和防篡改能力，减少单点故障的可能性，并增强用户的数据自主权和隐私保护。</p><p><strong>分布式共识</strong>： 分布式共识则是去中心化系统中用于<strong>保证所有参与节点对于系统状态达成一致同意的关键机制</strong>。在区块链技术中，分布式共识算法确保了<strong>即便在网络中存在不可靠或者恶意的节点，其余的节点依然可以通过特定的规则和算法就交易的有效性、区块的顺序以及其他关键状态达成一致意见。</strong>这种共识机制是去中心化系统能够正常运作并保持数据完整性的基石。</p><p>一个去中心化网络，通常需要借助分布式共识机制来确保网络中所有参与者能基于同样的规则正确地更新和验证系统状态，共同维护一个可靠的、无需信任中介的公共账本。</p><h2 id="分布式共识协议"><a href="#分布式共识协议" class="headerlink" title="分布式共识协议"></a>分布式共识协议</h2><p>在一个<strong>分布式共识协议</strong>中，特别是在面对有潜在故障或恶意节点的环境（比如拜占庭将军问题的场景），有两个核心属性是用来保证系统正确性和安全性的：</p><ul><li><strong>输入值的中止须经所有诚实节点来确定</strong>： 这意味着在分布式系统中的决策过程不是任意节点单方面决定的，即使是有故障或恶意节点试图干扰系统，最终是否接受一个特定的输入值作为共识结果，必须经过所有“诚实”（也称为“正确”或“非拜占庭”）节点的确认或认可。换句话说，<strong>只有当大多数（通常是超过半数）诚实节点达成一致同意的情况下，一个输入值才能被认为是被系统接受了</strong>，并且这个共识过程将在有限时间内结束，即达成可终止性。</li><li><strong>这个输入值必须由诚实节点来生成</strong>： 这条属性指出，最终被选为共识输出的那个输入值，应当来源于系统中诚实节点的提议或计算。在实际的分布式共识算法中，这可能意味着<strong>诚实节点提交的提案将优先被处理，或者通过某种机制确保即使在恶意节点的存在下，最终被采纳的也是诚实节点提供的有效信息</strong>。这样设计的目的在于防止恶意节点通过伪造信息影响系统共识结果的真实性。</li></ul><p>这两个属性结合在一起，旨在构建一个即使在部分节点出现故障或有意作恶情况下，仍能确保所有诚实节点对某一特定状态达成一致的分布式系统。这样的系统能够在各种不利条件下保持稳定运行，并确保其记录的数据或状态更新是可靠和安全的。在区块链技术中，这类分布式共识协议尤为重要，例如PoW（工作量证明）、PoS（权益证明）以及BFT（拜占庭容错）类算法都是用来实现这一目标的不同方式。</p><h2 id="比特币共识算法"><a href="#比特币共识算法" class="headerlink" title="比特币共识算法"></a>比特币共识算法</h2><p>这个算法的简化假设是，可以随意选择一个节点，这些节点都不会受到女巫攻击的影响。</p><blockquote><p>女巫攻击（Sybil Attack）是一种在网络环境中，特别是点对点（P2P）网络和区块链系统中常见的安全威胁。这种攻击方式是指攻击者通过创建并控制多个虚假的身份、账号或节点，假装成多个独立的网络参与者，以期获得对该网络的不当影响力和控制权。在实际中，女巫攻击等安全问题会通过经济成本（如挖矿成本）和其他网络层的防御措施得以缓解。</p></blockquote><p>实际版：</p><ol><li><strong>交易传播</strong>：每当有新的比特币交易产生时，这笔交易会被立即广播给比特币网络中的所有节点。这些节点相当于网络中的各个参与者，负责接收、验证和传递交易信息。</li><li><strong>交易打包</strong>：每个节点在接收到新的交易后，会将这些交易放入一个新的区块中等待验证和确认。一个区块内包含了多笔交易记录。</li><li><strong>区块提议</strong>：在比特币的实际共识机制——工作量证明（Proof of Work，PoW）中，节点通过竞争的方式尝试解决一个复杂的数学难题来争取新区块的生成权。这里的简化版本假设每个回合有一个随机节点（实际上是在PoW中通过计算能力竞争获胜的节点）有权提出一个新区块。</li><li><strong>区块验证</strong>：当某个节点广播它所提议的新区块时，网络中的其他节点会对区块内的所有交易进行合法性检查，包括但不限于检查交易是否有正确的数字签名、交易资金来源是否有效、交易金额是否足够等等。只有当区块中的所有交易都被认为是正当合法的，其他节点才会接受这个新区块。</li><li><strong>链接区块与共识</strong>：一旦节点确认新区块合法，它们会将此区块的哈希值加入到自己即将创建的新区块的前一块哈希列表中，形成了区块链的链式结构。这意味着节点通过对新区块的引用（即在其后的区块中包含前一块的哈希值）表达对之前区块内容的认可和接受。</li></ol><p>简化版：</p><ol><li>新的交易被广播到所有节点上。</li><li>每个节点都将新的交易放进一个区块。</li><li>在每个回合，一个随机的节点可以广播它的区块。</li><li>其他节点可以选择接受这个区块，前提是如果区块里的交易都是正当的（有真的签名）。</li><li>节点们可以把以上区块的哈希值放进自己的区块里，以此来表示它们对那个新区块的认可。<blockquote><p>简化版描述忽略了比特币实际采用的工作量证明（PoW）中“挖矿”的竞争过程。</p></blockquote></li></ol><h1 id="奖励机制与工作量证明"><a href="#奖励机制与工作量证明" class="headerlink" title="奖励机制与工作量证明"></a>奖励机制与工作量证明</h1><h2 id="奖励机制"><a href="#奖励机制" class="headerlink" title="奖励机制"></a>奖励机制</h2><p>比特币的奖励机制是鼓励矿工积极参与网络安全维护和交易验证的关键部分。每当一个矿工成功解决了一个区块的工作量证明难题，并且网络中的其他节点验证了该区块的有效性后，该矿工便可以将新区块链接到区块链上，并获取以下两个类型的奖励：</p><ul><li><strong>区块奖励</strong>：最初4年每个区块50个比特币，每4年减半（210000个区块）。</li><li><strong>交易费</strong>：交易输出值小于输入值，差值作为交易费给予区块创造者。</li></ul><p>只要挖矿奖励&gt;挖矿成本，矿工就能赚钱。<br>挖矿奖励&#x3D;区块奖励+交易费<br>挖矿成本&#x3D;硬件成本+运营成本</p><h2 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h2><p>在比特币网络中，工作量证明是一种共识机制，用于决定谁有权将新的区块添加到区块链上，并因此获得新区块产生的新币奖励以及交易费。PoW要求网络中的参与者（通常称为矿工）使用特殊的硬件设备执行复杂数学运算，即散列运算，以寻找满足特定条件的随机数（Nonce）。这个条件表现为找到一个Nonce使得区块头的哈希值小于或等于某个目标值，这个过程也被称为“挖矿”。</p><p>矿工们不断地尝试不同的Nonce，竞争成为第一个解决这一难题的人。由于哈希函数的性质——单向不可预测和难以逆推，唯一有效的方法是通过暴力尝试来找到正确的Nonce。这意味着较大的计算力意味着更高的概率能够快速找到正确答案。对于某个特定的矿工，发现下一区块的平均时间&#x3D;10分钟&#x2F;占全部计算能力的比例。</p><p>哈希函数解密的特点：</p><ul><li><strong>难于计算</strong>：有一定难度，计算量超大</li><li><strong>可参数化成本：难度可调整</strong>，保证区块产生时间间隔为10分钟左右，每2016个区块调整一次</li><li><strong>易于证明</strong>：计算结果易于检验</li></ul><h2 id="良性循环"><a href="#良性循环" class="headerlink" title="良性循环"></a>良性循环</h2><p>另一个微妙的概念是<strong>自举过程（bootstrapping）</strong>。<br>比特币系统里三个不同的想法——区块链的安全性、挖矿生态系统的健康程度，以及货币的价值在相互作用。<br>我们显然希望区块链安全，这样比特币才能成为一种可行的货币。想要区块链安全，就要保证黑客不能倾覆共识过程。这反过来意味着，一个黑客不能够制造一大堆挖矿节点来占据50%以上的新区块生成。<br>但如何实现这一点呢？前提条件是有一个健康的挖矿生态系统，其中大部分节点是诚实的、遵守协议的。但健康的挖矿生态系统的前提条件又是什么呢——我们什么时候可以保证大多数矿工会把大多数计算能力运用到解哈希谜题的竞争中呢？好吧，只有在比特币价位高时他们才会这么做，因为他们收到的奖励是比特币而他们的花费都是美元。所以币的价值越高，矿工就越有动力这么做。<br>那如何保障币的价值又高又稳定呢？只有用户普遍相信区块链的安全性才会发生。如果他们认为网络随时会被攻击者颠覆，那比特币作为货币将一文不值。所以你可以看到区块链的安全性、挖矿生态系统的健康程度和货币的价值这三者之间相互依赖、相互作用的关系。</p><p><img src="/2024/03/03/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E5%8C%BA%E5%9D%97%E9%93%BE/%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D%E3%80%8B/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/%E8%89%AF%E6%80%A7%E5%BE%AA%E7%8E%AF.png"></p><p>因为这三者之间的循环依赖关系，其中一个的存在可以用另一个的存在推测出来。在比特币初创之时，这三者都不存在。除了中本聪自己，没有人在运行挖矿软件。比特币作为货币没有什么价值。事实上，因为没有很多人挖矿区块链也很不安全，任何人都可以轻易颠覆这个过程。</p><h1 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h1><p>在比特币中，一笔<strong>交易（Transaction）</strong>代表了一次价值转移的行为，即将一定数量的比特币从一个或多个地址转移到另一个或多个地址的过程。<strong>比特币交易是在去中心化的比特币网络中被创建、验证并最终记录在区块链上的数据结构单元。</strong></p><h2 id="交易程序段"><a href="#交易程序段" class="headerlink" title="交易程序段"></a>交易程序段</h2><p><img src="/2024/03/03/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E5%8C%BA%E5%9D%97%E9%93%BE/%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D%E3%80%8B/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/%E4%BA%A4%E6%98%93%E7%A8%8B%E5%BA%8F%E6%AE%B5.jpg"></p><ul><li><strong>元数据</strong>：存放一些内部处理的信息——交易的规模、输入的数量、输出的数量，还有此笔交易的哈希值，也就是这个交易独一无二的ID。我们可以用哈希指针指向这个ID。最后还有一个**锁定时间(lock_time)**（定义了交易最早可以被加入区块链的时间或区块高度，它可以防止交易过早被确认。）。</li><li><strong>输入</strong>：所有输入排成一个序列，每个输入的格式都是一样的。输入需要明确说明之前一笔交易的某个输出，因此它包括之前那笔交易的哈希值，使其成为指向那个特定交易的哈希指针。这个输入部分同时包括之前交易输出的索引和一个签名:我们必须有签名来证明我们有资格去支配这笔比特币。</li><li><strong>输出</strong>：所有输出也排成一个序列。每个输出的内容分成两部分。所有输出的金额之和必须小于或等于输入的金额之和。当输出的总金额小于输入总金额时，输出的总金额与输人的总金额的差额部分，就作为交易费支付给为这笔交易记账的矿工。</li></ul><h2 id="交易过程"><a href="#交易过程" class="headerlink" title="交易过程"></a>交易过程</h2><ul><li><strong>交易广播</strong>：当一个用户发起一笔比特币交易时，该交易会被广播到整个比特币网络。</li><li><strong>交易验证</strong>：<ul><li><strong>格式验证</strong>：每个节点接收到交易后，首先会检查交易数据结构的完整性，包括交易版本、输入数量和输出数量、交易金额是否为正数、交易签名是否存在且有效等。</li><li><strong>UTXO验证</strong>：然后，节点会查询本地的未花费交易输出（UTXO）数据库，验证交易的输入是否来自于有效的、未被花费过的交易输出，并确认交易发出者有足够的余额进行支付。</li><li><strong>脚本验证</strong>：比特币使用一种基于堆栈的非图灵完备脚本语言，对交易输入所引用的UTXO上的解锁脚本（ScriptSig）和UTXO本身锁定脚本（ScriptPubKey）进行执行，只有当脚本执行结果为真时，才能证明交易发起者有权花费这笔UTXO。</li></ul></li><li><strong>区块构建与挖矿</strong>：验证成功的交易将被节点打包进新的区块中，尝试通过工作量证明机制（Proof of Work）解决一个复杂的数学难题，成功解题的矿工将新区块链接到区块链上。</li><li><strong>区块链同步与确认</strong>：其他节点在接收到新区块后，会对区块中的所有交易再次进行上述验证，验证通过后将新区块添加至本地的区块链副本中，从而实现全网交易的一致性确认。</li></ul><h2 id="交易脚步验证过程中的堆栈状态"><a href="#交易脚步验证过程中的堆栈状态" class="headerlink" title="交易脚步验证过程中的堆栈状态"></a>交易脚步验证过程中的堆栈状态</h2><p>比特币交易的脚本验证过程涉及两个关键部分：<code>scriptSig</code> 和 <code>scriptPubKey</code>：</p><ul><li><strong>scriptSig (交易输入脚本)<strong>：scriptSig 是存储在比特币交易的输入部分的数据结构，它主要用于</strong>解锁之前交易的输出（即UTXO，Unspent Transaction Output）</strong>。当一个用户想要花费一个UTXO时，必须提供足够的证据来证明自己对该UTXO有合法的使用权。这种证据通常就是一个数字签名（由私钥生成），以及与之相关的公钥或其他数据。在比特币交易中，scriptSig 包含了解锁UTXO所需的信息，比如在最常见的一种交易类型P2PKH中，scriptSig包含的是交易发起者的数字签名和其对应的公钥。</li><li><strong>scriptPubKey (交易输出脚本&#x2F;锁定脚本)</strong>:scriptPubKey 存储在比特币交易的输出部分，它定义了<strong>如何花费这个输出，或者说定义了谁有权利花费这个输出</strong>。每个UTXO都有一个与其关联的scriptPubKey，只有当提供的scriptSig能成功执行并通过scriptPubKey设定的条件时，这笔UTXO才能被花费。同样以P2PKH为例，scriptPubKey通常包含一个OP_DUP、OP_HASH160、公钥哈希和OP_EQUALVERIFY、OP_CHECKSIG等一串操作码，以及一个公钥哈希值。这意味着只有提供与该哈希值相对应的公钥及其正确签名的人才能解锁并花费这笔资金。<blockquote><p><strong>UTXO</strong>：Unspent Transaction Output，在比特币和其他采用UTXO模型的加密货币系统中扮演着核心角色。UTXO是一种会计模式，用于跟踪和管理数字货币的所有权和价值转移。<br>在一个基于UTXO的系统中：<br>每一笔交易都有输出（outputs），这些输出包含了特定数量的数字货币，并且与一组规则（scriptPubKey）相关联，规定了谁能花费这些数字货币。<br>当用户发起一笔新的交易时，需要引用过去未被花费的交易输出作为新交易的输入（inputs）。这些未花费的交易输出就是UTXOs。<br>在花费UTXO时，发送方必须提供匹配的证明（scriptSig）来解锁UTXO，从而将其转移到新的所有者。<br>交易完成后，原始的UTXO会被标记为已花费，同时创建出新的UTXO给接收方。这样，数字货币的流动就像一系列的硬币从一个人转移到另一个人，每笔交易都会更新整个网络上的UTXO集合。<br>通过这种方式，UTXO模型确保了交易历史的透明性和安全性，并且能够防止双花问题的发生。整个比特币账本可以看作是UTXO的全局数据库，记录着所有现存、可花费的UTXO的状态。</p></blockquote></li></ul><p>在比特币交易中，每个输入包含两个内容：一个来自<strong>输出（scriptPubKey）</strong>，另一个是交易的<strong>签名（scriptSig）</strong>。当验证一个输入时，这两个脚本被组合在一起，并按照从左到右的顺序执行<strong>操作码（OP_CODEs）</strong>。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">scriptSig:</span> [signature] [<span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>]<br><span class="hljs-symbol">scriptPubKey:</span> OP_DUP OP_HASH160 [pubkey hash] OP_EQUALVERIFY OP_CHECKSIG<br><br>执行过程：<br><span class="hljs-number">1</span>. 先执行scriptSig的内容，[signature] 和 [<span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>] 分别压入堆栈。<br><span class="hljs-number">2</span>. 然后执行scriptPubKey，按顺序执行各个操作码：<br>   a. OP_DUP：复制堆栈顶的<span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>，堆栈变为 [signature, <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>, <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>]。<br>   b. OP_HASH160：计算<span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>的hash160值并压入堆栈，堆栈变为 [signature, <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>, pubkey_hash160]。<br>   c. [pubkey hash] 由scriptPubKey推入堆栈，堆栈变为 [signature, <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>, pubkey_hash160, pubkey_hash160_from_scriptPubKey]。<br>   d. OP_EQUALVERIFY：比较两个连续的pubkey_hash160是否相等，若相等则删除这两个项，堆栈变为 [signature]。<br>   e. OP_CHECKSIG：验证signature是否对应于<span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>对交易的有效签名，如果签名有效，堆栈剩下真值，否则脚本执行失败。<br><br>如果到最后堆栈中只剩下了真值（或空堆栈，取决于具体的脚本约定），则交易被认为通过了脚本验证。<br></code></pre></td></tr></table></figure><p><img src="/2024/03/03/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E5%8C%BA%E5%9D%97%E9%93%BE/%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D%E3%80%8B/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/%E5%A0%86%E6%A0%88%E7%8A%B6%E6%80%81.jpg"></p><h2 id="MULTISIG（多重签名）"><a href="#MULTISIG（多重签名）" class="headerlink" title="MULTISIG（多重签名）"></a>MULTISIG（多重签名）</h2><p>比特币的<strong>多重签名（Multisig）</strong>是指一种安全机制，它允许一个比特币交易在获得预先设定的多个密钥持有人的签名之后才能被确认和执行。多重签名技术增强了交易的安全性和资金管理灵活性，因为它要求多个独立实体共同授权才能动用资金。</p><p>在比特币的多重签名方案中，可以设置一个M-of-N的条件，这里的N代表参与交易的总签名数，而M则代表至少需要多少个签名使得交易生效。例如，2-of-3多重签名意味着三个不同的密钥持有者中有任意两个的签名就足以批准交易。</p><p>实施多重签名的具体流程包括：</p><ol><li>创建多重签名地址：首先，多个密钥持有者共同协商并创建一个多重签名地址。这个地址不是普通的公钥哈希地址，而是与一个特殊的锁定脚本（scriptPubKey）关联，该脚本描述了多重签名的规则（例如，“需要2个签名才能花费”）。</li><li>设置交易条件：当资金存入到这个多重签名地址时，实际上是以满足多重签名规则的形式锁定这些资金。</li><li>提取资金：当要从这个地址支出资金时，交易的输入部分（scriptSig）除了包含常规的解锁信息外，还需要附加足够数量的有效签名（达到M的数量），这些签名分别对应于N个密钥持有者中的部分或全部。</li><li>验证交易：网络中的每个节点在验证交易时，会检查交易输入中的多重签名数据是否符合该地址对应的多重签名条件，只有当验证通过后，这笔交易才会被接受并最终打包进区块确认。</li></ol><blockquote><p>比如：爱丽丝使用多重签名给鲍勃付款。爱丽丝并不直接付款给鲍勃，而是发起一个多重签名的交易，并规定：三个人中有两人签名之后，资金才能被支取。这三个人是爱丽丝、鲍勃与第三方仲裁员朱迪。朱迪负责调解可能发生的纠纷。因此，爱丽丝发起了一个2&#x2F;3的多重签名交易来付款，这个交易规定三个人中有两人签名之后，资金才能被支取这个交易被纳入区块链后，资金被第三方监管，这三个人中的任意两个人可以决定资金的去向。现在，鲍勃觉得可以给爱丽丝发货了，通常情况下，如果爱丽丝和鲍勃都是有诚信的，鲍勃会按照爱丽丝要求发货，爱丽丝收货之后和鲍勃共同签名，把资金转给鲍勃。由于三个人中有两人签名即可完成支付，此时由于没有任何争议，朱迪根本不需要参与；然而，如果出现纠纷，朱迪可以作为调解人，并根据实际情况加入进来，与爱丽丝或鲍勃之一共同签名以解决问题。和爱丽丝直接付款给鲍勃相比，第三方支付交易并不会更复杂，都只需在区块链里增加一笔交易即可。</p></blockquote><p>多重签名在实践中可以应用于多种场景，比如增加冷钱包的安全性（需要多人协作解锁）、提升企业内部财务管理的权限控制，或是增强联合投资账户的资金保护等。</p><h2 id="高效小额支付"><a href="#高效小额支付" class="headerlink" title="高效小额支付"></a>高效小额支付</h2><p>支付通道（Payment Channels）是一种在区块链之外进行交易的方法，它允许参与者在没有直接将每笔交易写入区块链的情况下进行多次交易。支付通道的目的是提高交易速度、降低交易成本，并减轻区块链网络的负担。<br>举例：<br>我们希望可以把每分钟的费用累积起来，最后一次性支付。为了实现这种想法，爱丽丝先发起一个MULTISIG交易，把可能花费的最大金额转到MULTISIG地址，但这个交易需要爱丽丝与鲍勃两个人的签名才能生效。爱丽丝在使用流量的时候，每隔一分钟就签名一次，向鲍勃支付这分钟所产生的流量费用，然后把剩余的钱转给自己，每分钟重复一次，直到挂机为止。请注意，这些交易只有爱丽丝的签名，还没有鲍勃的签名，因此，交易还没被放进区块链里。爱丽丝挂机之后，会告诉鲍勃“我用好了，你可以切断我的服务了”，此时，爱丽丝将不再支付费用，鲍勃也将切断服务，然后在爱丽丝发送的最后一个交易里签名，把它放入区块链里。<br>随着每个交易付给鲍勃的币越来越多，爱丽丝的币就会越来越少。最后一个交易会一次性向鲍勃支付所有的流量费，然后把剩余的币还给爱丽丝。整个过程中，爱丽丝单独签名的交易不会进入区块链(上面没有鲍勃的签名)，最后它们都会被丢弃掉。</p><h2 id="币基交易"><a href="#币基交易" class="headerlink" title="币基交易"></a>币基交易</h2><p>每个区块的梅克尔树上都有一个有意思的交易，叫作币基交易。这类似于财奴币里的造币交易。这个交易创造新的比特币，它看上去像是个普通的交易，但有几点不同:</p><ol><li>它永远只有一个单一的输入与单一的输出。</li><li>这个交易并不消费之前交易输出的比特币，因此，没有指针指向“上一交易”</li><li>这个输出值目前大约是25个币多一点点。这个输出值就是矿工的挖矿收它由两部分组成：一部分是奖励的25个比特币（奖励在每生产210000个区块（大概4年）后减半），另一部分是所有交易的交易手续费。</li><li>还有一个特别的地方就是“币基”参数，矿工可以放任何值进去。</li></ol><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="1-新节点加入："><a href="#1-新节点加入：" class="headerlink" title="1. 新节点加入："></a>1. 新节点加入：</h2><p>启动一个新节点，向一个已知的节点发送消息，查询是否有其他节点，重复此过程多次，选择与哪些节点相连，加入完成。</p><h2 id="2-接受新交易信息："><a href="#2-接受新交易信息：" class="headerlink" title="2. 接受新交易信息："></a>2. 接受新交易信息：</h2><p>节点接受到交易信息后将其加入到交易池，并传播到与其相连的节点，若交易池中已存在此交易，则停止传播，确保泛洪协议的自动停止。<br>（注：每个交易唯一的哈希值，所以查询是否存在效率较高）</p><h2 id="3-核验新交易信息："><a href="#3-核验新交易信息：" class="headerlink" title="3. 核验新交易信息："></a>3. 核验新交易信息：</h2><ul><li>检验交易有效，确保脚本返回值为真</li><li>检查是否存在双重交易</li><li>检验交易信息是否已经存在</li><li>接受交易的脚本必须为白名单上的脚本<br>（注：竞态条件：又称紊乱情况，指双重支付中哪个交易被存入区块链，会由下一个创建区块的节点强制决定）</li></ul><h2 id="4-传播区块"><a href="#4-传播区块" class="headerlink" title="4. 传播区块"></a>4. 传播区块</h2><p>核验一个区块要比核验一个交易复杂得多。除了确认区块头部，确定里点还必须确认区块里的每个交易。最面的哈希值是在可以接受的范围内，节后，一个节点往外传播的区块必须是最长的一条区块链上新加人的区块（“最长的区块链”取决于节点对区块链当前状态的认识）。只有这样才可一样，节点同样可以执行它自己的逻以防止区块链分叉。但就像传播交易时以选择传递在共识链上更早加入的区辑：它可以选择传递无效的区块，也可成一个分叉，不过这种情况是协议可以承受的。<br>（注：竞态条件：两个有效区块同时被挖到，哪个区块被纳入长期共识链取决于其他节点选择在哪个节点上扩展区块链）</p><h2 id="轻量节点："><a href="#轻量节点：" class="headerlink" title="轻量节点："></a>轻量节点：</h2><p>也称简单付款验证客户端，或SPV节点。SPV节点只会验证和他们相关的交易信息，只存储他们关心、需要核验的部分交易；SPV节点的区块头部大小只有区块链的千分之一，只有几十MB。</p><h1 id="限制与优化"><a href="#限制与优化" class="headerlink" title="限制与优化"></a>限制与优化</h1><h2 id="比特币的限制"><a href="#比特币的限制" class="headerlink" title="比特币的限制"></a>比特币的限制</h2><p>限制：</p><ul><li>每秒处理交易数只有7</li><li>未来比特币使用的密码算法可能被破解</li></ul><h2 id="如何优化比特币协议"><a href="#如何优化比特币协议" class="headerlink" title="如何优化比特币协议"></a>如何优化比特币协议</h2><ul><li>硬分叉：引入新的特性，使前一版本的协议失效，会使老节点认定最长的区块链分支是无效的，认为其他分支才是最长有效的，这会使原有的链分叉，老节点会永远排除在另一条链中。</li><li>软分叉：引入新的特性，使现有的核验规则更严格，老节点依旧会接受所有区块，但老节点创建的一些区块被认为是无效的，这会促使老节点更新协议。</li></ul><h1 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h1><h2 id="挖矿的步骤"><a href="#挖矿的步骤" class="headerlink" title="挖矿的步骤"></a>挖矿的步骤</h2><ul><li>监听交易广播</li><li>监听区块链，即同步其他节点的区块链历史记录，并监听、检验广播到网络中的新区块，</li><li>组装备选区块，即将监听到的合法的交易组合放入到新区块中备用</li><li>找到使备选区块合法的有效随机数</li><li>希望自己的区块被全网接受，因为有可能出现竞态条件</li><li>获得利润</li></ul><h2 id="如何寻找有效区块"><a href="#如何寻找有效区块" class="headerlink" title="如何寻找有效区块"></a>如何寻找有效区块</h2><p><img src="/2024/03/03/%E7%9F%A5%E8%AF%86/%E5%BC%80%E5%8F%91/%E5%8C%BA%E5%9D%97%E9%93%BE/%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D%E3%80%8B/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/%E5%AF%BB%E6%89%BE%E6%9C%89%E6%95%88%E5%8C%BA%E5%9D%97.jpg"></p><p>一个区块内，可变内容为头部随机数（nonce）和币基随机数（币基交易中可放入任何值），但由于币基随机数变动后计算量更大（需要额外计算梅克尔树），所以优先变动头部随机数。</p><blockquote><p>To be continue……</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web3</category>
      
      <category>区块链</category>
      
      <category>阅读摘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>哈希</tag>
      
      <tag>去中心化</tag>
      
      <tag>分布式共识</tag>
      
      <tag>比特币</tag>
      
      <tag>工作量证明</tag>
      
      <tag>零币</tag>
      
      <tag>虚拟挖矿</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring入门篇：IOC&amp;AOP</title>
    <link href="/2024/03/03/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6/IOC&amp;AOP%E6%A1%86%E6%9E%B6/Spring_IOC&amp;AOP/"/>
    <url>/2024/03/03/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6/IOC&amp;AOP%E6%A1%86%E6%9E%B6/Spring_IOC&amp;AOP/</url>
    
    <content type="html"><![CDATA[<p>本文<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="本文写于2023年初，经修正后发布于个人博客。">[1]</span></a></sup>包含：</p><ol><li>核心功能：IOC容器</li><li>核心功能：AOP面向切面编程</li></ol><h1 id="为什么要使用spring框架"><a href="#为什么要使用spring框架" class="headerlink" title="为什么要使用spring框架"></a>为什么要使用spring框架</h1><h2 id="Spring框架的历史"><a href="#Spring框架的历史" class="headerlink" title="Spring框架的历史"></a>Spring框架的历史</h2><p>Spring框架的起源可以追溯到2003年，当时Java企业版（Java EE）平台的开发模式正处在EJB（Enterprise JavaBeans）主导的时代。尽管EJB为企业级应用提供了丰富的功能，但其复杂的编程模型、重量级的架构以及部署方面的挑战让许多开发者感到困扰。正是在这种背景下，Rod Johnson在其著作《Expert One-on-One J2EE Design and Development》中阐述了一种新的、轻量级的编程范式，并随后发布了Spring框架的第一个版本。</p><p>Spring框架的诞生旨在<strong>简化企业级应用的开发过程，降低其复杂度</strong>，并倡导基于POJOs（Plain Old Java Objects）的编程方式，从而彻底改变了Java应用的开发格局。随着时间的推移，Spring逐渐发展成为一个全方位的Java应用框架，涵盖了从核心容器、数据访问、Web开发到AOP（面向切面编程）、消息传递等多个领域。</p><h2 id="Spring是什么"><a href="#Spring是什么" class="headerlink" title="Spring是什么"></a>Spring是什么</h2><p>Spring框架本质上是一个开源的、轻量级的Java应用程序框架，它不强制开发者遵循特定的设计模式或架构，而是通过提供一套全面的服务和工具来提升开发效率和应用质量。Spring的核心特性之一是<strong>Inversion of Control（IoC，控制反转）和Dependency Injection（DI，依赖注入）机制</strong>，这些设计原则使得组件之间的耦合度大大降低，提高了代码的可测试性和可维护性。</p><h2 id="为什么要使用Spring"><a href="#为什么要使用Spring" class="headerlink" title="为什么要使用Spring"></a>为什么要使用Spring</h2><p>选择Spring的理由有很多，其中包括：</p><ol><li>简化复杂性：Spring通过自身强大的容器管理对象的生命周期和依赖关系，减轻了开发者手动处理对象创建和管理的负担。</li><li>轻量级与模块化：Spring框架本身轻量且高度模块化，可以根据项目需求选择合适的模块，而不是一股脑加载所有功能，这有助于减少资源消耗并提高性能。</li><li>松耦合：通过依赖注入实现组件间的松散耦合，使得各个部分更易于复用和替换，增强了系统的灵活性和可扩展性。</li><li>广泛的兼容性与集成性：Spring能够无缝集成众多第三方库和框架，例如Hibernate、MyBatis、JPA用于持久化，或是与其他Web框架、消息队列等协同工作。</li><li>增强测试能力：Spring对单元测试的支持良好，开发者可以更容易地对代码进行隔离测试。</li><li>企业级服务：Spring提供的事务管理、安全性、远程调用等功能使得开发企业级应用更为便捷。</li></ol><p>综上所述，<strong>Spring框架不仅解决了传统企业级Java开发中的诸多痛点，而且凭借其不断发展的生态系统和持续的技术创新，成为了现代Java应用开发的事实标准之一。</strong>接下来，我们将深入探讨如何开始使用Spring框架，讲解各个特性的使用方式。</p><h1 id="开始使用Spring框架"><a href="#开始使用Spring框架" class="headerlink" title="开始使用Spring框架"></a>开始使用Spring框架</h1><h2 id="方式1：直接下载jar包"><a href="#方式1：直接下载jar包" class="headerlink" title="方式1：直接下载jar包"></a>方式1：直接下载jar包</h2><p>进入 <a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">repo.spring.io</a> 网址进行下载，完成后将5个jar文件放入工程的lib文件夹，并其加入到Project Structure设置的Modules选项卡中（注：4个spring为最基本的框架，commons开头的文件为日志功能的jar）<br>注：spring-expression是SpEL的支持，如果不使用Spring表达式语言，可去除；cpmmons-logging是日志的依赖。</p><blockquote><p>这边我使用的是Spring5，spring6的新特性主要体现在云原生方面，基础功能都是一样的。</p></blockquote><p><img src="/2024/03/03/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6/IOC&AOP%E6%A1%86%E6%9E%B6/Spring_IOC&AOP/lib%E4%BE%9D%E8%B5%96.png"></p><h2 id="方式2：使用maven安装依赖"><a href="#方式2：使用maven安装依赖" class="headerlink" title="方式2：使用maven安装依赖"></a>方式2：使用maven安装依赖</h2><p>先进入这个网站<a href="https://mvnrepository.com/">mvnrepository</a>。查看spring的依赖，和上面直接下载的jar包一样。<br><img src="/2024/03/03/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6/IOC&AOP%E6%A1%86%E6%9E%B6/Spring_IOC&AOP/rep%E4%B8%AD%E4%BE%9D%E8%B5%96.png"><br>点击对应条目，选择依赖版本，将依赖复制到pom.xml中。<br>pom.xml中最终添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h1><p>什么是IOC：<br>在传统的编程模式中，<strong>一个对象负责创建和管理它所依赖的其他对象</strong>；而采用IOC之后，对象不再自行创建或查找其所依赖的对象，而是<strong>由外部容器（如Spring框架的ApplicationContext）负责创建和管理这些依赖对象，并将它们注入到需要它们的对象中</strong>。</p><h2 id="IOC如何解耦"><a href="#IOC如何解耦" class="headerlink" title="IOC如何解耦"></a>IOC如何解耦</h2><p>IOC就是通过容器实现依赖对象的创建和管理，接下来讲讲IOC的实现方式，也就是解耦过程。</p><p>场景：UserService类需要调用UserDAO类的add()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>()&#123;<br>    <span class="hljs-keyword">private</span> UserDAO dao;<br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">register</span><span class="hljs-params">(String username,String password)</span>&#123;<br>        <span class="hljs-comment">//...</span><br>        dao.add(...);<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>很显然，UserService对象需要持有一个UserDAO对象，并通过调用add方法，才能进行注册操作。</p><h3 id="原始模式"><a href="#原始模式" class="headerlink" title="原始模式"></a>原始模式</h3><p>直接new一个UserDAO对象，并调用add()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>()&#123;<br>    <span class="hljs-keyword">private</span> UserDAO dao;<br>    &#123;<br>        dao = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDAO</span>();<br>        <span class="hljs-comment">//对dao设置一些配置，dao才能正常使用</span><br>        dao.setConfig(...);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">register</span><span class="hljs-params">(String username,String password)</span>&#123;<br>        <span class="hljs-comment">//...</span><br>        dao.add(...);<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>存在问题：强耦合、违反单一职责原则。</p><ol><li><strong>强耦合</strong>：UserService 与具体的 UserDAO 实现类紧密耦合在一起。这意味着如果未来需要更换 UserDAO 的实现（例如为了优化数据库操作或者切换到新的数据源），那么必须修改 UserService 类的内部实现。高耦合度降低了代码的可复用性和可维护性。</li><li><strong>违反单一职责原则</strong>：UserService 不仅负责业务逻辑（用户注册），还在初始化过程中负责了数据访问对象（DAO）的创建和配置。这样使得 UserService 类承担了过多的责任，不利于职责划分和代码组织。</li></ol><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>使用工厂模式对原始模式进行优化：<br>创建工厂类UserDAOFactory，内含getDAO()方法，调用其会return一个new的UserDAO类，UserService类创建一个UserFactory类并通过getDAO()方法return的UserDAO类进行调用add()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>()&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">UserDAOFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDAOFactory</span>();<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">register</span><span class="hljs-params">(String username,String password)</span>&#123;<br>        <span class="hljs-comment">//...</span><br>        factory.getDAO.add(...);<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优化点</strong>：<strong>降低耦合度</strong>：相比于直接实例化，现在 UserService 与具体的 UserDAO 实现类解耦，通过工厂类来获取 UserDAO 的实例。如果将来需要更换 UserDAO 的实现，只需要修改 UserDAOFactory 即可，无需改动 UserService。</p><p><strong>仍存在问题</strong>：<strong>隐性依赖</strong>：虽然通过工厂方法减少了直接依赖，但 UserService 依然隐性地依赖于 UserDAOFactory 的具体实现，尤其是当 UserDAOFactory 内部也含有硬编码创建 UserDAO 的时候。理想情况下，UserDAOFactory 的实例也应该由外部注入，而非在 UserService 内部创建。</p><h3 id="IOC解耦"><a href="#IOC解耦" class="headerlink" title="IOC解耦"></a>IOC解耦</h3><p>先在配置文件中定义容器如何创建Bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.dao.UserDaoImpl&quot;</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.service.UserService&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再在代码中直接使用容器注入的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>()&#123;<br>    <span class="hljs-keyword">private</span> UserDAO dao;<br>    <span class="hljs-comment">//通过set方法注入UserDAO</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">setDao</span><span class="hljs-params">(UserDAO dao)</span>&#123;<br>        <span class="hljs-built_in">this</span>.dao = dao;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">register</span><span class="hljs-params">(String username,String password)</span>&#123;<br>        <span class="hljs-comment">//...</span><br>        dao.add(...);<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//直接注入UserService以供使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-comment">//1 加载spring配置文件</span><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    <span class="hljs-comment">//2 获取配置创建的对象</span><br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>    <span class="hljs-comment">//3 直接使用已经注入完成的对象</span><br>    userService.register(...);<br>&#125;<br></code></pre></td></tr></table></figure><p>现在的优点：</p><ol><li><strong>低耦合</strong>：UserService 类不再直接创建或管理 UserDAO 的实例，而是通过Spring容器在运行时注入。这样，UserService 只关注业务逻辑，而不关心 UserDAO 的具体实现细节，大大降低了类之间的耦合度。</li><li><strong>高内聚</strong>：UserService 类专注于自身的业务逻辑实现，而 UserDAO 的创建和初始化工作交给了Spring容器，遵循了单一职责原则，提高了代码的内聚性。</li><li><strong>可配置性</strong>：通过XML配置文件定义Bean，可以在不修改任何Java代码的情况下改变系统行为。例如，可以轻易地更换 UserDAO 的实现类，只需在配置文件中修改对应的 class 属性即可。</li><li><strong>生命周期管理</strong>：Spring容器负责管理Bean的整个生命周期，包括初始化、依赖注入、销毁等阶段，简化了对象的管理，提升了整体应用的可维护性。</li></ol><hr><p>通过上述案例，应该已经可以理解IOC是如何实现解耦的了，接下来将详细介绍IOC进行<strong>依赖注入</strong>的方式。</p><h2 id="IOC接口"><a href="#IOC接口" class="headerlink" title="IOC接口"></a>IOC接口</h2><p>（IOC思想基于IOC容器实现，IOC容器底层即为对象工厂）</p><h3 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h3><p>Spring提供了两种IOC容器实现方式（即两个接口）：</p><ol><li><strong>BeanFactory</strong>：Spring内部的IOC容器的基本实现，不建议开发人员使用。（特点：懒加载——加载配置文件时不创建对象，使用对象时才创建）</li><li><strong>ApplicationContext</strong>：BeanFactory接口的子接口，功能更加强大，建议开发人员使用。（加载配置文件后就会将配置对象进行创建）<ol><li>实现类：<strong>FileSystemXmlApplicationContext</strong>，通过绝对路径加载容器配置文件，如：<code>ApplicationContext context = new FileSystemXmlApplicationContext(&quot;D:\\编程文件\\Idea_文件\\workspace_Idea\\SpringPractice\\src\\main\\resources\\bean.xml&quot;);</code></li><li>实现类：<strong>ClassPathXmlApplicationContext</strong>，通过相对src的路径的路径加载容器配置文件，如：<code>ApplicationContext context = new ClassPathXmlApplicationContext(&quot;/home/chilun/springPractice/src/main/resources/bean.xml&quot;);</code></li></ol></li></ol><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>（User类省略）<br>配置文件bean.xml：（注意：根元素中的声明不可少。）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.pojo.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>main函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>        System.out.println(user.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><blockquote><p>张三</p></blockquote><h2 id="IOC操作：创建对象与注入属性"><a href="#IOC操作：创建对象与注入属性" class="headerlink" title="IOC操作：创建对象与注入属性"></a>IOC操作：创建对象与注入属性</h2><p>Bean管理包含两类行为：</p><ol><li><strong>Spring创建对象</strong></li><li><strong>Spring注入属性</strong></li></ol><p>通常有两种实现方式：</p><ol><li><strong>XML实现</strong></li><li><strong>注解实现</strong></li></ol><p>组合起来就是4种模式，接下来将一一介绍。</p><h3 id="基于xml配置文件方式"><a href="#基于xml配置文件方式" class="headerlink" title="基于xml配置文件方式"></a>基于xml配置文件方式</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>在spring配置文件中使用bean标签，标签中添加对应属性，即可实现对象创建，如：（即完成空对象创建）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.pojo.User&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>属性讲解：</p><ul><li><strong>id</strong>：Bean对象的唯一标识。</li><li><strong>class</strong>：类的全路径。</li><li><strong>name</strong>：和id类型，用于设置多个别名，不推荐使用。</li><li><strong>factory-method</strong>：如果不是通过默认构造器创建Bean实例，而是通过静态工厂方法，则需要指定此属性，指出类中用于创建Bean的方法名称。</li><li><strong>factory-bean</strong>：当需要通过另一个Bean的实例方法来创建当前Bean时，指定创建Bean的工厂Bean的名称。</li><li><strong>scope</strong>：定义Bean的作用域，如 “singleton”（默认，单例模式）、”prototype”（原型模式）、”request”（web应用中，每个HTTP请求对应一个新的Bean实例）、”session”（web应用中，每个HTTP session对应一个新的Bean实例）等。</li><li><strong>init-method</strong>：指定在Bean实例化并且所有依赖注入完成后，需要调用的初始化方法。</li><li><strong>destroy-method</strong>：指定在Bean从容器中删除之前，需要调用的清理或资源释放方法。</li><li><strong>lazy-init</strong>：是否懒加载Bean，设为 true 时，Bean会在第一次请求时才初始化。</li></ul><p>在不设置各种属性的情况下，创建对象时默认使用无参构造器。</p><h4 id="注入属性"><a href="#注入属性" class="headerlink" title="注入属性"></a>注入属性</h4><h5 id="依赖注入概念"><a href="#依赖注入概念" class="headerlink" title="依赖注入概念"></a>依赖注入概念</h5><p>这里补充一下依赖注入（Dependency Injection, DI）的概念：<br>DI是IOC最常见的实现形式，包含构造函数注入、setter方法注入等方式。通过这些方式，<strong>容器会在运行时动态地向对象注入所需的依赖对象，而不是对象自己主动去创建或查找依赖</strong>。</p><blockquote><p><strong>IOC和DI的区别</strong>：<br>IOC是一种核心思想：将对象创建、生命周期管理和依赖关系协调的控制权从应用程序代码中转移到一个容器中，其关注的是<strong>应用程序整体架构层面的控制权转移</strong>。<br>DI是实现这思想的一种手段：当某个类需要另一个类的实例作为其运行时依赖时，不是由类自己创建这个依赖实例，而是通过外部容器。在运行时动态地将依赖注入到需要它的类中，<strong>更侧重于如何解决类与类之间依赖关系的传递问题</strong>。</p></blockquote><h5 id="基础注入"><a href="#基础注入" class="headerlink" title="基础注入"></a>基础注入</h5><p>使用set方法或使用有参构造器注入。</p><ol><li>set方法注入：属性与set方法已经定义完成，在bean标签中使用property标签完成属性注入。（name为类中属性名称，value为向属性注入的值）<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;西游记&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;吴承恩&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!--创建对象过程中会自动注入属性的值--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>有参构造器注入：属性与有参构造器已经定义完成，在bean标签中使用constructor-arg标签完成属性注入。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.Orders&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;订单1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;湖南长沙&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--或者使用index属性，index=&quot;n&quot;代表第n+1个参数</span><br><span class="hljs-comment">    &lt;constructor-arg index=&quot;0&quot; value=&quot;订单1&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="hljs-comment">    &lt;constructor-arg index=&quot;1&quot; value=&quot;湖南长沙&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="p名称空间注入"><a href="#p名称空间注入" class="headerlink" title="p名称空间注入"></a>p名称空间注入</h5><p>需要先在根元素中声明 xmlns:p 命名空间，指向Spring提供的p命名空间规范地址：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后可以直接在<code>&lt;bean&gt;</code>标签内使用<code>p:</code>前缀结合属性名来注入属性值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.Book&quot;</span> <span class="hljs-attr">p:bookName</span>=<span class="hljs-string">&quot;红楼梦&quot;</span> <span class="hljs-attr">p:bookAuthor</span>=<span class="hljs-string">&quot;曹雪芹&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="字面量注入"><a href="#字面量注入" class="headerlink" title="字面量注入"></a>字面量注入</h5><ol><li><strong>null</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <br></code></pre></td></tr></table></figure></li><li><strong>特殊符号</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span> &lt;![CDATA[&quot;&quot;&quot;&lt;&lt;@南京@&gt;&gt;&quot;&quot;&quot;]]&gt; <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-comment">&lt;!--&quot;&lt;![CDATA[具体内容]]&gt;&quot;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="对象注入"><a href="#对象注入" class="headerlink" title="对象注入"></a>对象注入</h5><ol><li><strong>内部bean</strong>：创建的bean中有属性为对象类型，在内部进行创建<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.bean.Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置两个普通属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Lily&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--设置对象属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.bean.Dept&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;人事部&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><strong>bean级联</strong>：创建的bean中有属性为对象类型，引用已有bean<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.bean.Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置两个普通属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Lily&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--设置对象属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.bean.Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;人事部&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><strong>bean级联+属性赋值</strong>：创建的bean中有属性为对象类型，引用已有bean，同时注入属性<br>要求Emp有get方法，以获得dept并进行属性注入。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.bean.Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置两个普通属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Lily&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--设置对象属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept.dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;人事部&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.bean.Dept&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h5><ol><li><strong>单独集合</strong>：集合的值不复用<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.collectiontype.Stu&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--数组类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;courses&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>高数<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>离散<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>线代<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--List类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>数据1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>数据2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>数据3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Map类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maps&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;JAVA&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;PHP&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Set类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maps&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>MySQL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>SQLite<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--List&lt;Course&gt;类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;courseList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;course1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;course1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 其余泛型集合自行类推 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;course1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.collectiontype.Course&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Qt的基本使用&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;course2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.collectiontype.Course&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opencv的基本使用&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><strong>公共集合</strong>：部分集合值为公共值<br>需要在根目录中补充util名称空间<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/util </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--1.提取list集合类型注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--2.提取list集合类型注入使用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.collectiontype.Book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="外部属性文件注入"><a href="#外部属性文件注入" class="headerlink" title="外部属性文件注入"></a>外部属性文件注入</h5><p>如德鲁伊连接池的DataSource。</p><ol><li><strong>直接设置bean</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20030322&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><strong>通过jdbc.properties配置文件设置bean</strong><br>添加配置文件：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">prop.driverClass</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">prop.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/userDb<br><span class="hljs-attr">prop.username</span>=root<br><span class="hljs-attr">prop.password</span>=<span class="hljs-number">20030322</span><br></code></pre></td></tr></table></figure>在bean中引入配置文件：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!---引入context名称空间--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/util </span></span><br><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/util/spring-util.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/context </span></span><br><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--引入外部属性文件--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br>     <span class="hljs-comment">&lt;!--配置连接池--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 获取properties文件内容，根据key获取，使用spring表达式获取 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.driverClass&#125;&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.url&#125;&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.username&#125;&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.password&#125;&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="基于注解方式"><a href="#基于注解方式" class="headerlink" title="基于注解方式"></a>基于注解方式</h3><p>使用注解的目的：简化xml配置。<br>注解格式：@注解名称(属性名称&#x3D;属性值, 属性名称&#x3D;属性值…)。<br>注解位置：类、方法、属性等上方。</p><h4 id="创建对象-1"><a href="#创建对象-1" class="headerlink" title="创建对象"></a>创建对象</h4><h5 id="补充spring-aop依赖"><a href="#补充spring-aop依赖" class="headerlink" title="补充spring-aop依赖"></a>补充spring-aop依赖</h5><p>下载jar包：<img src="/2024/03/03/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6/IOC&AOP%E6%A1%86%E6%9E%B6/Spring_IOC&AOP/lib-aop.png"></p><p>Maven：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="Spring针对Bean管理中创建对象提供的注解："><a href="#Spring针对Bean管理中创建对象提供的注解：" class="headerlink" title="Spring针对Bean管理中创建对象提供的注解："></a>Spring针对Bean管理中创建对象提供的注解：</h5><ul><li>@Component</li><li>@Service</li><li>@Controller</li><li>@Repository</li></ul><p>以上4个注解功能相同，都用来创建bean实例。</p><h5 id="开启组件扫描"><a href="#开启组件扫描" class="headerlink" title="开启组件扫描"></a>开启组件扫描</h5><p>引入context名称空间，并开启组件扫描，即可使用注解方式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/util </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/util/spring-util.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开启组件扫描</span><br><span class="hljs-comment">        多个包可使用逗号隔开：com.chilun.spring5,com.chilun.spring6</span><br><span class="hljs-comment">        或扫描包的上层目录：com.chilun</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.chilun.spring5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>组件扫描配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.chilun&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>use-default-filters属性：false表示不使用默认的filter，使用自己配置的filter。</li><li>context:include-filter标签（类似白名单）：设置扫描特定内容（如org.springframework.stereotype.Controller，即扫描注解为@Controller的类）</li><li>context:exclude-filter标签（类似黑名单）：设置特定内容不扫描。</li></ul><h5 id="创建对象-2"><a href="#创建对象-2" class="headerlink" title="创建对象"></a>创建对象</h5><p>创建类，并在类上添加注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//value属性可以省略，默认值为首字母小写的类名称，如：UserService-&gt;userService</span><br><span class="hljs-meta">@Service(value = &quot;userService&quot;)</span><span class="hljs-comment">//=&lt;bean id=&quot;userService&quot; class=&quot;...&quot;/&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;service add.....&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//之后即可直接获得</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>    userService.add();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h4><p>如：实现service中调用dao类中方法。</p><ol><li>在service和dao类上方都添加创建对象注释<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-comment">//配合AutoWired或Resource</span><br><span class="hljs-comment">//@Repository(value = &quot;userDaoImpl1&quot;)//配合Qualifier或Resource</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;dao add.....&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">//定义dao类型属性</span><br>    <span class="hljs-comment">//@Autowired</span><br>    <span class="hljs-comment">//@Qualifier(value = &quot;userDaoImpl1&quot;)</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        userDao.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在service中注入dao类对象，service中加入dao属性（可以不添加set方法），属性上方添加注解。<ol><li><strong>@AutoWired</strong>：根据属性类型自动装配。<code>@Repository</code>,<code>@Autowired</code>。</li><li><strong>@Qualifier</strong>：根据名称类型自动装配：<code>@Repository(value = &quot;userDaoImpl1&quot;)</code>，<code>@Qualifier(value = &quot;userDaoImpl1&quot;)</code>。</li><li><strong>@Resource</strong>：根据名称或类型自动装配。（需import javax.annotation.Resource;）<code>@Repository</code>，<code>@Resource</code>。</li><li><strong>@Value</strong>：注入普通类型属性。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Value(value = &quot;abc&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="IOC容器底层"><a href="#IOC容器底层" class="headerlink" title="IOC容器底层"></a>IOC容器底层</h2><h3 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h3><ol><li>容器通过工具类（如BeanDefinitionReader）对配置信息文件（通常为xml）进行解析和分析</li><li>将分析后的信息编组为BeanDefinition</li><li>将BeanDefinition注册到相应的BeanDefinitionRegistry</li></ol><h3 id="Bean实例化"><a href="#Bean实例化" class="headerlink" title="Bean实例化"></a>Bean实例化</h3><p>请求方通过容器的getBean方法请求对象时，或隐式调用getBean时就会触发第二阶段的活动</p><ol><li>检查所请求的对象之前是否已经初始化</li><li>若没有，则根据BeanDefinition的信息实例化被请求对象，并注入依赖</li><li>容器将其返回请求方</li></ol><h3 id="Bean类型"><a href="#Bean类型" class="headerlink" title="Bean类型"></a>Bean类型</h3><ol><li><p><strong>普通Bean</strong>：在xml配置文件中定义的bean类型就是返回的类型。如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">xml:<br>&lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.collectiontype.Book&quot;</span>/&gt;<br>java：<br>Book book = context.getBean(<span class="hljs-string">&quot;book&quot;</span>,Book.<span class="hljs-built_in">class</span>);<br></code></pre></td></tr></table></figure></li><li><p><strong>工厂Bean</strong>：在xml配置文件中定义的bean类型可以和返回类型不同。实现步骤：</p><ol><li>创建类，作为工厂bean，实现接口FactoryBean</li><li>实现方法，在方法中定义返回的bean类型</li></ol><p>如：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//&lt;bean id=&quot;myBean&quot; class=&quot;com.chilun.spring5.factorybean.MyBean&quot;/&gt;</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Book&gt; &#123;<br>    <span class="hljs-comment">//getObject方法定义返回类型</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;123&quot;</span>);<br>        book.setList(list);<br>        <span class="hljs-keyword">return</span> book;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> FactoryBean.<span class="hljs-built_in">super</span>.isSingleton();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>,Book.class);<br>        book.test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域"></a>Bean作用域</h3><ol><li>Spring中可设置bean实例为单实例或多实例。</li><li>默认情况bean为单实例对象。</li><li>如何设置为单实例或多实例（通过scope属性）：<ol><li>singleton（默认）：单实例</li><li>prototype：多实例 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.Book&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookList&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>singleton与prototype的其他区别：scope为singleton时，加载spring配置文件时就会创建单实例对象；scope为prototype时，调用getBean方法时创建多实例对象</li><li>其他值：request（每次请求）、session（每个对话）</li></ol></li></ol><h3 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期"></a>Bean生命周期</h3><p>生命周期是指对象从创建到销毁的全过程。</p><ol><li>bean生命周期<ol><li>通过构造器创建bean实例（无参构造器）</li><li>为bean的属性设置值、对其他bean调用引用（调用set方法）</li><li>调用bean的初始化方法（需要配置初始化方法）（使用bean中的init-method属性设置初始化方法）</li><li>bean可使用</li><li>容器关闭时，调用bean的销毁方法（需配置销毁方法）（使用bean中的destroy-method属性设置销毁方法）</li></ol></li><li>演示：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.pojo.Orders&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;手机&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Orders</span> &#123;<br>    <span class="hljs-comment">//无参数构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Orders</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第一步 执行无参数构造创建bean实例&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> String oname;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOname</span><span class="hljs-params">(String oname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.oname = oname;<br>        System.out.println(<span class="hljs-string">&quot;第二步 调用set方法设置属性值&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//创建执行的初始化的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第三步 执行初始化的方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//创建执行的销毁的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第五步 执行销毁的方法&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;orders&quot;</span>, Orders.class);<br>    System.out.println(<span class="hljs-string">&quot;第四步 获取创建bean实例对象&quot;</span>);<br>    System.out.println(orders);<br>    <span class="hljs-comment">//手动让bean实例销毁</span><br>    context.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>输出：</p><blockquote><p>第一步 执行无参数构造创建bean实例<br>第二步 调用set方法设置属性值<br>第三步 执行初始化的方法<br>第四步 获取创建bean实例对象<br>com.chilun.pojo.Orders@18ce0030<br>第五步 执行销毁的方法</p></blockquote><h4 id="bean的后置处理器"><a href="#bean的后置处理器" class="headerlink" title="bean的后置处理器"></a>bean的后置处理器</h4><p>使用后bean生命周期为7步：</p><ol><li>通过构造器创建bean实例（无参构造器）</li><li>为bean的属性设置值、对其他bean调用引用（调用set方法）</li><li>将bean实例传递给bean的后置处理器的postProcessBeforeInitialization方法</li><li>调用bean的初始化方法（需要配置初始化方法）（使用bean中的init-method属性设置初始化方法）</li><li>将bean实例传递给bean的后置处理器的postProcessAfterInitialization方法</li><li>bean可使用</li><li>容器关闭时，调用bean的销毁方法（需配置销毁方法）（使用bean中的destroy-method属性设置销毁方法）</li></ol><p>使用后置处理器：</p><ol><li>创建类，实现接口BeanPostProcessor（重写postProcessBeforeInitialization方法和postProcessAfterInitialization方法），创建后置处理器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanPost</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;后置处理器：在Bean初始化之前执行的方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;后置处理器：在Bean初始化之后执行的方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>更改配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.pojo.Orders&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;手机&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置后置处理器，为当前配置文件中的所有bean添加后置处理器。可以通过在后置处理器的实现中检查beanName或者bean的类型，或者检查Bean是否有特定的注解来决定是否执行后置处理操作。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBeanPost&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.post.MyBeanPost&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>输出：<blockquote><p>第一步 执行无参数构造创建bean实例<br>第二步 调用set方法设置属性值<br>后置处理器：在Bean初始化之前执行的方法<br>第三步 执行初始化的方法<br>后置处理器：在Bean初始化之后执行的方法<br>第四步 获取创建bean实例对象<br>com.chilun.pojo.Orders@54c562f7<br>第五步 执行销毁的方法</p></blockquote></li></ol><h4 id="更详细的Bean生命周期："><a href="#更详细的Bean生命周期：" class="headerlink" title="更详细的Bean生命周期："></a>更详细的Bean生命周期：</h4><ol><li><strong>加载到 JVM</strong>：Spring 容器在启动时，会解析配置文件或扫描注解，创建相应的 BeanDefinition，并将其存储在 BeanDefinitionMap 中。BeanDefinitionMap 是一个 Map，它将 Bean 的名称映射到 BeanDefinition 实例。</li><li><strong>实例化</strong>：当容器需要创建 Bean 时，它会根据 BeanDefinition 的信息创建相应的 Bean 实例。这一步骤通常由 BeanDefinitionReader 和 BeanFactory 负责。BeanFactory 是容器的核心接口，它实际上是一个工厂模式的实现，用于实例化和管理 Bean。在容器启动时，会初始化 BeanFactory，BeanFactory 会根据 BeanDefinition 创建 Bean 实例。</li><li><strong>属性注入</strong>：在实例化后，容器会根据 BeanDefinition 中的属性值配置来进行属性注入。这一过程由 BeanDefinitionMap 中的 BeanDefinition 实例提供的属性信息来完成。</li><li><strong>初始化前的函数调用</strong>：如果 Bean 实现了 BeanNameAware 或 BeanFactoryAware 接口，容器会在实例化后，但在初始化之前，调用相应的方法，使 Bean 可以获取 Bean 的名称或容器的引用；BeanPostProcessor 的实现类也会被调用，允许对 Bean 进行一些前置处理，这一阶段的处理由 AbstractAutowireCapableBeanFactory 的 applyBeanPostProcessorsBeforeInitialization 方法负责。</li><li><strong>初始化</strong>：如果 Bean 实现了 InitializingBean 接口或在 BeanDefinition 中通过 init-method 属性指定了初始化方法，容器会在 Bean 实例化和属性注入之后调用相应的方法，执行 Bean 的初始化逻辑。</li><li><strong>初始化后的函数调用</strong>：在 Bean 初始化之后，BeanPostProcessor 的实现类会被调用，允许对 Bean 进行一些后置处理。这一阶段的处理由 AbstractAutowireCapableBeanFactory 的 applyBeanPostProcessorsAfterInitialization 方法负责。</li><li><strong>Bean使用</strong>。</li><li><strong>销毁</strong>：如果 Bean 实现了 DisposableBean 接口，或者在配置中通过 destroy-method 属性指定了销毁方法，容器会在 Bean 销毁阶段调用相应的方法，执行 Bean 的销毁逻辑。这一过程由 DisposableBean 接口的 destroy 方法或在 BeanDefinition 中指定的 destroy-method 属性负责。</li></ol><h1 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h1><h2 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h2><h3 id="面向切面编程"><a href="#面向切面编程" class="headerlink" title="面向切面编程"></a>面向切面编程</h3><p>AOP(Aspect-Oriented Programming的简称)，也就是面向切面编程的意思，它是一种编程思想，在Spring的官方文档中描述: <strong>面向切面编程(AOP)提供了另一种思考程序结构的方式来对面向对象编程(OOP)的进行补充和完善，面向对象编程(OOP)中关键的是对象，而面向切面编程(AOP)中关键的是切面。</strong><br>AOP中切面可以实现关注点的模块化(即统一抽取，提高复用)，例如跨越多种类型和对象的事务管理，这种关注点在 AOP 文献中通常被称为横切关注点。<br><img src="/2024/03/03/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6/IOC&AOP%E6%A1%86%E6%9E%B6/Spring_IOC&AOP/aop_introduction.png"></p><p>单单看文字描述可能比较抽象，下面我们通过具体例子结合图片来形象化这些概念。<br>假如有两个洗澡函数：<br>男函数： 脱衣服、唱歌、洗脸、洗头、洗身体、擦干身体、穿衣服<br>女函数： 脱衣服、洗脸、洗头、护发、洗身体、擦干身体、护肤、穿衣服<br>发现问题： 通过上面的例子，我们会发现无论男女，<strong>脱衣服、穿衣服是洗澡不可缺少的步骤，而且这两个步骤在“洗澡”这个业务不是核心，它只是一个关注点</strong>，因为脱衣服和穿衣服的场景并不只是在洗澡中存在，就比如: 天气热我们需要脱衣服，天气冷我们需要穿衣服，所以，<strong>将衣服的管理定义成一个模块，然后在需要的地方调用才是是一个更加合理的设计</strong>，具体如下图：<br><img src="/2024/03/03/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6/IOC&AOP%E6%A1%86%E6%9E%B6/Spring_IOC&AOP/aop_%E6%B4%97%E6%BE%A1.png"></p><p>如最常用的日志以及事务功能，它们都可能是横向的分布在不通的业务层级(对象层级)中，但是又和具体的核心业务无直接关系，诸如这样类型的代码，在程序中被称作**横切(cross cutting)**，我们应该考虑将这一类代码进行统一管理，提高复用性。</p><p><strong>面向切面编程(AOP)就是将这类与核心业务无关的，但又影响着多个类的公共行为抽取、封装到一个可重用模块，从而实现代码复用和模块解耦的目的，这种开发思想则被称为面向切面编程。</strong></p><blockquote><p>通俗解释：不通过修改源代码方式，在主干功能里面添加新功能：<br><img src="/2024/03/03/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6/IOC&AOP%E6%A1%86%E6%9E%B6/Spring_IOC&AOP/aop_%E6%9D%83%E9%99%90%E5%88%A4%E6%96%AD.png"></p></blockquote><h2 id="AOP底层原理"><a href="#AOP底层原理" class="headerlink" title="AOP底层原理"></a>AOP底层原理</h2><p>Spring AOP底层使用动态代理实现：</p><ol><li>当目标类有接口时，Spring AOP 会选择使用 <strong>JDK 动态代理机制</strong>来创建代理对象。JDK 动态代理通过 java.lang.reflect.Proxy 类及其 newProxyInstance() 方法来创建代理，并且需要用户提供一个实现了 InvocationHandler 接口的类，这个类负责处理代理对象上的方法调用，并在调用前后插入切面逻辑。</li><li>当目标类没有实现任何接口时，由于 JDK 动态代理无法直接应用于类，Spring AOP 将自动转而<strong>使用 CGLIB 库</strong>来生成代理类，这个代理类继承自目标类并重写其中的方法，在方法调用前后同样执行切面逻辑。</li></ol><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>为方便理解底层实现，使用Proxy手动实现代理进行演示。</p><ol><li>使用Proxy类的方法创建代理对象<br><strong>调用newProxyInstance方法</strong><br>方法源码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Returns a proxy instance for the specified interfaces</span><br><span class="hljs-comment">* that dispatches method invocations to the specified invocation</span><br><span class="hljs-comment">* handler.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@CallerSensitive</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader,</span><br><span class="hljs-params">                                      Class&lt;?&gt;[] interfaces,</span><br><span class="hljs-params">                                      InvocationHandler h)</span> &#123;<br>    Objects.requireNonNull(h);<br><br>    <span class="hljs-keyword">final</span> Class&lt;?&gt; caller = System.getSecurityManager() == <span class="hljs-literal">null</span><br>                                ? <span class="hljs-literal">null</span><br>                                : Reflection.getCallerClass();<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Look up or generate the designated proxy class and its constructor.</span><br><span class="hljs-comment">     */</span><br>    Constructor&lt;?&gt; cons = getProxyConstructor(caller, loader, interfaces);<br><br>    <span class="hljs-keyword">return</span> newProxyInstance(caller, cons, h);<br>&#125;<br></code></pre></td></tr></table></figure>newProxyInstance方法的三个参数：</li></ol><ul><li>类加载器</li><li>增强方法所在类的接口（可为多个）</li><li>实现接口InvocationHandler的类，创建代理对象，写增强的方法</li></ul><ol start="2"><li>代码演示：<ol><li><strong>创建接口</strong>，定义方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>创建接口实现类</strong>，实现方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span> &#123;<br>        System.out.println(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用Proxy创建接口代理对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建接口代理对象</span><br>        Class[] interfaces = &#123;UserDao.class&#125;;<br>        <span class="hljs-type">UserDaoImpl</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">dao</span> <span class="hljs-operator">=</span> (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoProxy</span>(userDao));<br>        <span class="hljs-comment">//执行代理方法</span><br>        System.out.println(dao.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-comment">//1.获得被代理对象</span><br>    <span class="hljs-comment">//有参构造传递</span><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoProxy</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-built_in">this</span>.obj = obj;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//方法之前</span><br>        System.out.println(<span class="hljs-string">&quot;执行方法之前...&quot;</span> + method.getName() + <span class="hljs-string">&quot;参数：&quot;</span> + Arrays.toString(args));<br>        <span class="hljs-comment">//被增强的方法执行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> method.invoke(obj, args);<br>        <span class="hljs-comment">//方法之后</span><br>        System.out.println(<span class="hljs-string">&quot;执行方法之后...&quot;</span> + obj);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="AOP专业术语"><a href="#AOP专业术语" class="headerlink" title="AOP专业术语"></a>AOP专业术语</h2><ol><li>连接点：类中<strong>可以</strong>被增强的方法被称为连接点。</li><li>切入点：类中<strong>真正被增强</strong>的方法被称为切入点。</li><li>通知：类中实际增强的逻辑部分被称为通知（又称增强）。</li><li>切面：将通知应用到切入点的过程称为切面。</li></ol><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><ol><li>作用：标注对特定类的特定方法进行增强</li><li>语法结构：<code>execution([权限修饰符] [返回类型] [类全路径] [方法名称](参数列表)</code></li></ol><p>权限修饰符可省略，可用 <code>*</code> 代表全部类型。<br>一个方法参数可以使用 <code>*</code> 号代替；如果想代表方法的任意参数，可使用 <code>..</code>。</p><ul><li>例1：对com.chilun.dao.BookDao类中的add方法增强<br><code>execution(* com.chilun.dao.BookDao.add(..))</code></li><li>例2：对com.chilun.dao.BookDao类中的所有方法增强<br><code>execution(* com.chilun.dao.BookDao.*(..))</code></li><li>例3：对com.chilun.dao包中的所有类中的所有方法增强<br><code>execution(* com.chilun.dao.*.*(..))</code></li></ul><h3 id="通知（又称增强）"><a href="#通知（又称增强）" class="headerlink" title="通知（又称增强）"></a>通知（又称增强）</h3><p>通知有多种类型：</p><ul><li>前置通知@Before</li><li>后置通知@AfterReturning</li><li>环绕通知@Around</li><li>异常通知@AfterThrowing</li><li>最终通知@After</li></ul><h2 id="AOP操作"><a href="#AOP操作" class="headerlink" title="AOP操作"></a>AOP操作</h2><p>Spring 自身提供了 AOP 支持，但若要利用 AspectJ 的注解驱动风格（如 @Aspect、@Before、@After、@Around 等）进行更复杂、更强大的切面编程，则通常需要添加 AspectJ 相关的依赖项。</p><h3 id="AspectJ介绍"><a href="#AspectJ介绍" class="headerlink" title="AspectJ介绍"></a>AspectJ介绍</h3><p>AspectJ不是Spring组成部分，是独立的AOP框架，一般将AspectJ和Spring框架一起使用，进行AOP操作。<br>准备工作：引入AspectJ相关依赖。<br><img src="/2024/03/03/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6/IOC&AOP%E6%A1%86%E6%9E%B6/Spring_IOC&AOP/aop_%E4%BE%9D%E8%B5%961.png"><br><img src="/2024/03/03/%E6%8A%80%E8%83%BD/%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6/IOC&AOP%E6%A1%86%E6%9E%B6/Spring_IOC&AOP/aop_%E4%BE%9D%E8%B5%962.png"></p><p>或使用Maven导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjrt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="基于AspectJ实现AOP操作"><a href="#基于AspectJ实现AOP操作" class="headerlink" title="基于AspectJ实现AOP操作"></a>基于AspectJ实现AOP操作</h3><h4 id="基于注解方式（主要）"><a href="#基于注解方式（主要）" class="headerlink" title="基于注解方式（主要）"></a>基于注解方式（主要）</h4><h5 id="1-创建被增强类，定义方法"><a href="#1-创建被增强类，定义方法" class="headerlink" title="1. 创建被增强类，定义方法"></a>1. 创建被增强类，定义方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//被增强类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;add.......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-创建增强类（编写增强逻辑）"><a href="#2-创建增强类（编写增强逻辑）" class="headerlink" title="2. 创建增强类（编写增强逻辑）"></a>2. 创建增强类（编写增强逻辑）</h5><p>在增强类里面，创建方法，让不同方法代表不同通知类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//增强的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-通知配置"><a href="#3-通知配置" class="headerlink" title="3. 通知配置"></a>3. 通知配置</h5><ul><li>在Spring配置中开启注解扫描、开启生成代理对象。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开启注解扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.chilun&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--在Spring配置文件中开启生成代理对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>使用注解创建User和UserProxy对象；在增强类上方添加注解@Aspect。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用注解创建User和UserProxy对象</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;add.......&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//使用注解创建User和UserProxy对象</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//在增强类上方添加注解@Aspect</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="4-配置不同类型通知"><a href="#4-配置不同类型通知" class="headerlink" title="4. 配置不同类型通知"></a>4. 配置不同类型通知</h5><p>在增强类中，在通知方法上方添加通知类型注解，使用切入点表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-comment">//@Before注解表示前置通知</span><br>    <span class="hljs-meta">@Before(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    user.add();<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><blockquote><p>before……<br>add…….</p></blockquote><p>测试代码2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-comment">//@Before注解表示前置通知</span><br>    <span class="hljs-meta">@Before(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Before......&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//@After注解表示最终通知</span><br>    <span class="hljs-meta">@After(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;After......&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//@AfterReturning注解表示后置通知/返回通知</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;AfterReturning......&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//@AfterThrowing注解表示异常通知</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;AfterThrowing......&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//@Around注解表示环绕通知</span><br>    <span class="hljs-meta">@Around(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;Around前......&quot;</span>);<br><br>        <span class="hljs-comment">//被增强方法执行</span><br>        proceedingJoinPoint.proceed();<br><br>        System.out.println(<span class="hljs-string">&quot;Around后......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><blockquote><p>Around前……<br>Before……<br>add…….<br>AfterReturning……<br>After……<br>Around后……</p></blockquote><h5 id="公共切入点抽取-Pointcut"><a href="#公共切入点抽取-Pointcut" class="headerlink" title="公共切入点抽取@Pointcut"></a>公共切入点抽取@Pointcut</h5><p>通过将多个通知方法共享的切入点表达式抽象成一个单独的 @Pointcut 方法，避免了在多个通知中重复编写相同的切入点表达式，从而减少冗余代码。<br>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//相同切入点抽取</span><br><span class="hljs-meta">@Pointcut(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointDemo</span><span class="hljs-params">()</span> &#123;<br>&#125;<br><span class="hljs-comment">//@Before注解表示前置通知</span><br><span class="hljs-meta">@Before(value = &quot;pointDemo()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Before......&quot;</span>);<br>&#125;<br><span class="hljs-comment">//@After注解表示后置通知</span><br><span class="hljs-meta">@After(value = &quot;pointDemo()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;After......&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><blockquote><p>Before……<br>add…….<br>After……</p></blockquote><h5 id="多个增强类对应同一个方法增强，可设置优先级"><a href="#多个增强类对应同一个方法增强，可设置优先级" class="headerlink" title="多个增强类对应同一个方法增强，可设置优先级"></a>多个增强类对应同一个方法增强，可设置优先级</h5><p>在增强类上面添加注解@Order(自然数)，值越小，优先级越高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span><span class="hljs-comment">//.....</span><br></code></pre></td></tr></table></figure><h4 id="基于xml配置文件实现"><a href="#基于xml配置文件实现" class="headerlink" title="基于xml配置文件实现"></a>基于xml配置文件实现</h4><ol><li>创建增强类和被增强类，创建方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;add.......&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Before......&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//测试代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    user.add();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在spring配置文件中创建两个类对象</li><li>在spring配置文件中配置切入点<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 2.创建对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.pojo.User&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userProxy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.pojo.UserProxy&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 3.配置aop增强 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 切入点 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.chilun.pojo.User.add(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置切面 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userProxy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 增强作用在具体的方法上 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;p&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>输出：</p><blockquote><p>Before……<br>add…….</p></blockquote><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>本文写于2023年初，经修正后发布于个人博客。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>后端开发</category>
      
      <category>框架</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>IOC</tag>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>分类</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>标签</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
