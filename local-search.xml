<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>消息队列：6.消息存储原理</title>
    <link href="/2024/03/13/backend/middleware/messagequeue/rocket-storage/"/>
    <url>/2024/03/13/backend/middleware/messagequeue/rocket-storage/</url>
    
    <content type="html"><![CDATA[<p>消息队列必须保证消息存储的可靠性，这是消息队列可以做到异步、削峰填谷的基础。<br>本文将讲解消息队列是如何实现消息的存储的。</p><h1 id="存储设备与存储方式"><a href="#存储设备与存储方式" class="headerlink" title="存储设备与存储方式"></a>存储设备与存储方式</h1><h2 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h2><p>类似MySQL或Redis，RocketMQ的消息持久化也是直接存储到<strong>本地硬盘</strong>中的。<br>在面对削峰填谷的需求下，可靠性、性能、存储量都无比重要：消息不能丢失，消息得快速写入（但是不急着读取），并且需要存储大量消息。<br>硬盘非常适合满足上述需求：</p><ul><li><strong>可靠性</strong>：可以通过设置RAID等级来保证数据可靠性。</li><li><strong>快速写入</strong>：硬盘支持顺序写入，能够快速写入大量数据。</li><li><strong>存储量</strong>：硬盘是存储量非常大的存储介质，要想超越硬盘只能使用云盘，但云盘的速度较慢。</li></ul><blockquote><p>为什么不使用类似MySQL或Redis的软件作为存储层？原因很简单，引入额外的软件作为中介会降低性能和可靠性。在削峰填谷、超高并发的场景下，减少中间层可以显著提升性能和可靠性。</p></blockquote><h2 id="commitlog"><a href="#commitlog" class="headerlink" title="commitlog"></a>commitlog</h2><p>RocketMQ将消息存储到一个commitlog文件中，不同Topic的消息会被存储在同一个commitlog文件中，每个消息都会占据一行。<br>示意图：<br><img src="/2024/03/13/backend/middleware/messagequeue/rocket-storage/commitlog.svg"></p><p>将不同Topic的消息存在一块呢，是为了充足利用硬盘的<strong>顺序写</strong>的特性。虽然硬盘可能支持同时写入多个文件来保持顺序写入，但如果同时写入的文件数等于topic的数量，且Topic数量较多，就无法保证顺序写入（因为不同文件通常会存储在不同扇区，导致随机写入；而在硬盘空间充足的情况下，将不同topic的消息存储在同一个文件中可以确保顺序写入）。</p><h1 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h1><p>将不同的Topic存入同一个commitlog文件中，会带来一个问题：消费者如何快速找到commitlog里的消息呢？</p><h2 id="消费队列（ConsumeQueue）"><a href="#消费队列（ConsumeQueue）" class="headerlink" title="消费队列（ConsumeQueue）"></a><strong>消费队列（ConsumeQueue）</strong></h2><p>这里就要用到一个非常重要的概念：<strong>消费队列（ConsumeQueue）</strong>。<br>当消费者获得一个消息时，其是从通过ConsumeQueue获得这个消息的具体地址；一个主题会包含多个消息队列，一个消息队列对应一个ConsumeQueue…</p><p>那么消息队列是如何获得消息的呢？自然是从commitlog中来的。RocketMQ会定时分发commitlog中的消息到ConsumeQueue（大概是1ms解析一条），分发程序会根据消息行中的信息，将消息的<strong>起始偏移量</strong>和<strong>消息长度</strong>放入ConsumeQueue，对应到MessageQueue就是放入了一条消息；等到消费者读取这条消息时，就会再次访问硬盘获得该消息并发送到消费者。</p><blockquote><p>为什么不直接在ConsumeQueue中存储消息，随机读取硬盘不是很慢吗？这是为了减少内存的空间使用，以时间换空间，分发消息没有那么高的时间性能要求，因此这里决定使用时间换空间。</p></blockquote><p>示意图：<br><img src="/2024/03/13/backend/middleware/messagequeue/rocket-storage/%E6%B6%88%E8%B4%B9%E9%98%9F%E5%88%97.svg"></p><blockquote><p>注意：ConsumeQueue也是需要持久化的，否则会丢失消息的位置。</p></blockquote><h2 id="读取流程"><a href="#读取流程" class="headerlink" title="读取流程"></a>读取流程</h2><p>在之前的<a href="/2024/03/13/backend/middleware/messagequeue/rocket-publishsubscribe/" title="消息队列：5.发布订阅模式">消息队列：5.发布订阅模式</a>中，我们就提到过一个概念：<strong>offset</strong>，用来记录消费到哪个位置。该词的全称是<strong>consumerOffset</strong>，需要区别于前面提到过的消息存储的起始偏移量<strong>commitlog offset</strong>。</p><p><strong>消费者消费消息的流程</strong>：</p><ol><li>根据订阅关系，找到订阅的consumerQueue。</li><li>通过consumerOffset获得consumerQueue中对应的消息指针。</li><li>根据消息指针中的commitlog offset和size（或length）信息，访问硬盘，获得完整消息。</li></ol><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>一个消息中可以添加key属性，以此记录在索引表中，当需要检索该消息时快速找到。<br>该索引表文件，即为<strong>indexFile</strong>。</p><p>indexFile的格式如下图所示：<br><img src="/2024/03/13/backend/middleware/messagequeue/rocket-storage/indexFile.svg"></p><p>给新消息建立索引的过程：</p><ol><li>获得新消息的key。</li><li>计算新消息的keyhash&#x3D;hash(key)。</li><li>取余，获得对应的槽位：slotpos&#x3D;keyhash%500w。</li><li>查看该槽位是否被占用。<ul><li>如果未被占用，这将该消息的commitlog offset、size、keyhash信息存到一个空的index item位置，然后将该index item的下标放入slot。</li></ul></li><li>如果被占用，查看该slot记录的index item的下标，寻找一个空的index item，将当前消息存入，并将冲突消息的下标存到当前index item的prevIndex字段，然后重置slot的下标为当前消息的index item的下标。（类似链表的头插法）。</li></ol><p>索引消息的过程：</p><ol><li>获得key。</li><li>计算keyhash。</li><li>计算slotpos。</li><li>查看该槽位记录下标的index item中的keyhash是否对应，如果不对应就看prevIndex字段对应的index item中的keyhash是否对应，一直找到对应的那个，然后返回。如果没有对应的，就是不存在。</li></ol><blockquote><p>这样的设计有些类似简单文件系统中superblock、inode table、data region的设计。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
      <tag>RocketMQ</tag>
      
      <tag>commitlog</tag>
      
      <tag>ConsumeQueue</tag>
      
      <tag>consumerOffset</tag>
      
      <tag>commitlog offset</tag>
      
      <tag>indexFile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列：5.发布订阅模式</title>
    <link href="/2024/03/13/backend/middleware/messagequeue/rocket-publishsubscribe/"/>
    <url>/2024/03/13/backend/middleware/messagequeue/rocket-publishsubscribe/</url>
    
    <content type="html"><![CDATA[<p>本文将讲解消息队列的两种实现模式：队列模式、发布订阅模式。</p><h1 id="队列模式"><a href="#队列模式" class="headerlink" title="队列模式"></a>队列模式</h1><p>作为一种数据结构，队列的特性是<strong>先进先出</strong>。<br>使用队列来存储消息时，生产者发送的消息会被放入到一个队列，然后由消费者们竞争着消费队列的信息。</p><blockquote><p>竞争意味着每条消息只会被一个消费者消费。</p></blockquote><p>在存储消息时，如果我们使用数据结构-队列对消息进行存储，就会存在一个问题：队列具有先进先出的特性，当读到后一个消息时，前一个消息就会被丢失，进而其他消费者就无法访问该消息。（即消费者之间的竞争关系导致无法合适地共享信息）</p><p><img src="/2024/03/13/backend/middleware/messagequeue/rocket-publishsubscribe/%E9%98%9F%E5%88%97%E6%A8%A1%E5%BC%8F.svg"></p><p>发布-订阅模式是为解决单个队列无法满足同时提供给多个消费者相同消息的需求的。</p><h1 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h1><h2 id="支持共享"><a href="#支持共享" class="headerlink" title="支持共享"></a>支持共享</h2><p>发布-订阅模式的目的：<strong>每个消费者都能选择想要消费某个队列，消费其中指定某个位置的消息。</strong><br>发布-订阅模式中我们需要引入两个概念——Topic、offset：</p><ul><li>Topic：主题，用于区别不同的队列。<ul><li>举例：生产者1负责生产订单记录，生产者2负责生产发货记录，消费者1负责处理订单记录，消费者2负责处理发货记录。那么自然不能只使用一个队列存储所有信息让消费者自己选择自己需要的信息，这应该是消息队列的责任。所用我们引入主题的概念，用以区别不同的队列，生产者1的消息发送、存储到订单主题的主题队列，生产者2的消息发送、存储到发货主题的主题队列；消费者1只对订单主题感兴趣，消息队列就只给它提供订单主题的主题队列中的信息……</li></ul></li><li>offset：消息位置，用以记录消费者在队列中处理到的信息位置。<ul><li>消费者每次处理一个信息，offset就+1，下一次转发给该消费者就是这个主题中的下一个消息。</li></ul></li></ul><p>示意图：<br><img src="/2024/03/13/backend/middleware/messagequeue/rocket-publishsubscribe/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%851.png"></p><h2 id="支持竞争"><a href="#支持竞争" class="headerlink" title="支持竞争"></a>支持竞争</h2><p>发布订阅模式解决了上述将全部消息提供给多个消费者的需求，但是存在一个问题，就是<strong>无法实现原先的竞争关系</strong>：某些消息不需要被同一类的不同消费者重复接收，但是只依赖offset的+1无法解决该问题。<br>可以复用原有队列的数据结构，但是原有队列处理方式还存在一个问题：竞争消费位置——<strong>同一类</strong>消费者无法同时消费多个消息，其必须一个一个地处理消息。<br>而且无论是消息粒度负载均衡策略还是队列粒度负载均衡策略，在消费者上线或下线、服务端扩缩容等场景下，都会触发短暂的重新负载均衡动作。此时可能会存在短暂的负载不一致情况，出现少量消息重复的现象。因此，还需要在下游消费逻辑中保证消息幂等以支持去重功能。<br>为了解决此问题，需要引入一个新机制：<strong>队列</strong>（消息队列-MessageQueue，在Kafka中被称为分区）。</p><p>同一个主题的消息，会被分开存放到不同队列中（主题与队列的关系为一对多），不同消费者可以接收不同队列中的信息，以做到同时消费。<br>示意图：<br><img src="/2024/03/13/backend/middleware/messagequeue/rocket-publishsubscribe/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%852.png"></p><p>一个消费者可对应一到多个队列（或分区）。对应多个时需保持多个offset。且要求消费者数量少于队列数量，以避免出现闲置的消费者。</p><p><img src="/2024/03/13/backend/middleware/messagequeue/rocket-publishsubscribe/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%853.svg"></p><p>改进后的发布订阅还有一个优点：可以灵活实现<strong>重复消费</strong>或者<strong>跳过部分消息不消费</strong>的功能。</p><ul><li><strong>重复消费</strong>：比如消费者1已经消费到 Topic-A-queue1-20，即第 20 条消息，但是消费者1一不小心把之前消费得到的结果数据弄丢了，如果按照队列模式那就找不到消息了，因为消息已经出队了没了；而在发布-订阅模式中，我们仅需把这个消息位置变更成 Topic-A-queue1-20，这样又可以让消费者1重新消费，只需要简单地改一条数据就能实现这样功能。</li><li><strong>跳过部分消息不消费</strong>：假设 Topic-A-queue1 中第 21-30 这 10 条消息是错误的，我们可以修改当前的消息点位成 Topic-A-queue1-30，这样消费者1就直接跳过了这 10 条错误消息，从第 31 条消息开始消费。</li></ul><blockquote><p>目前讲解的是队列级的负载均衡，即消费者对应到具体队列（每个队列仅支持被一个消费者消费），实际上存在消息级的负载均衡，无需关注消费者和队列的相对数量，能够更均匀地分摊消息。可自行了解。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Topic</tag>
      
      <tag>MessageQueue</tag>
      
      <tag>队列模式</tag>
      
      <tag>发布订阅模式</tag>
      
      <tag>offset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列：4.集成Springboot</title>
    <link href="/2024/03/13/backend/middleware/messagequeue/rocket-Springboot/"/>
    <url>/2024/03/13/backend/middleware/messagequeue/rocket-Springboot/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="RocketMQNote.pdf" width="100%" height="550" type="application/pdf"></div><blockquote><p>本文之前使用LaTeX书写，现直接使用PDF发布。<br>建议：rocketmq-spring-boot-starter相比原生SDK的功能要弱不少，如果需要实现复杂功能还是使用rocketmq-client-java比较合适。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
      <tag>RocketMQ</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列：3.领域模型</title>
    <link href="/2024/03/13/backend/middleware/messagequeue/rocket-domainmodel/"/>
    <url>/2024/03/13/backend/middleware/messagequeue/rocket-domainmodel/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="RocketMQNote.pdf" width="100%" height="550" type="application/pdf"></div><blockquote><p>本文之前使用LaTeX书写，现直接使用PDF发布。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
      <tag>RocketMQ</tag>
      
      <tag>Producer</tag>
      
      <tag>NameSrv</tag>
      
      <tag>Broker</tag>
      
      <tag>Comsumer</tag>
      
      <tag>Producer group</tag>
      
      <tag>Comsumer group</tag>
      
      <tag>Broker cluster</tag>
      
      <tag>Topic</tag>
      
      <tag>MessageQueue</tag>
      
      <tag>Subscription</tag>
      
      <tag>同步RPC调用模型</tag>
      
      <tag>异步通信模型</tag>
      
      <tag>点对点模型</tag>
      
      <tag>发布订阅模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列：2.启动RocketMQ</title>
    <link href="/2024/03/13/backend/middleware/messagequeue/rocket-start/"/>
    <url>/2024/03/13/backend/middleware/messagequeue/rocket-start/</url>
    
    <content type="html"><![CDATA[<h1 id="1-下载二进制文件包"><a href="#1-下载二进制文件包" class="headerlink" title="1. 下载二进制文件包"></a>1. 下载二进制文件包</h1><p>进入<a href="https://rocketmq.apache.org/zh/docs/quickStart/01quickstart">官网</a>，获得<a href="https://dist.apache.org/repos/dist/release/rocketmq/5.1.4/rocketmq-all-5.1.4-bin-release.zip">二进制压缩包下载地址</a>。</p><p>使用wget命令下载压缩包：<code>wget https://dist.apache.org/repos/dist/release/rocketmq/5.1.4/rocketmq-all-5.1.4-bin-release.zip</code><br>使用unzip命令解压二进制文件压缩包：<code>unzip rocketmq-all-5.1.4-bin-release.zip</code></p><h1 id="2-修改启动命令"><a href="#2-修改启动命令" class="headerlink" title="2. 修改启动命令"></a>2. 修改启动命令</h1><h2 id="修改Java虚拟机分配内存大小"><a href="#修改Java虚拟机分配内存大小" class="headerlink" title="修改Java虚拟机分配内存大小"></a>修改Java虚拟机分配内存大小</h2><p>直接启动很可能报错操作系统内存不足（RocketMQ对内存要求极高）：</p><blockquote><p>OpenJDK64-BitServerVMwarning: INFO: os::commit_memory(0x0000000700000000,4294967296,0)failed; error&#x3D;’Notenoughspace’(errno&#x3D;12)</p></blockquote><p>所以需要修改脚本文件，将分配给虚拟机改小，需要修改<code>runserver.sh</code> 、 <code>runbroker.sh</code> 和 <code>tools.sh</code> 文件，将所有<code>-Xms``-Xmx``-Xmn</code>参数都改小，<code>-Xmx</code>为内存上限，<code>-Xmn</code>为内存下限，<code>-Xms</code>为初始大小。</p><h2 id="修改java启动命令"><a href="#修改java启动命令" class="headerlink" title="修改java启动命令"></a>修改java启动命令</h2><p>如果java版本过高，可能会报错Option UseBiasedLocking was deprecated，需要继续修改配置文件：<br>在runbroker.sh 文件中，<code>numactl --interleave=all pwd &gt; /dev/null 2&gt;&amp;1</code>的文本上方添加<code>$JAVA $&#123;JAVA_OPT&#125; --add-exports=java.base/sun.nio.ch=ALL-UNNAMED $@</code>。<br>脚本修改后为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx512m&quot;<br>choose_gc_options<br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;<br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:+AlwaysPreTouch&quot;<br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:MaxDirectMemorySize=15g&quot;<br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-UseLargePages -XX:-UseBiasedLocking&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">JAVA_OPT=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -Xdebug -Xrunjdwp:transport=dt_socket,address=9555,server=y,suspend=n&quot;</span></span><br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; $&#123;JAVA_OPT_EXT&#125;&quot;<br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -cp $&#123;CLASSPATH&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">JAVA <span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> --add-exports=java.base/sun.nio.ch=ALL-UNNAMED <span class="hljs-variable">$@</span></span><br><br>numactl --interleave=all pwd &gt; /dev/null 2&gt;&amp;1<br>if [ $? -eq 0 ]<br>then<br>if [ -z &quot;$RMQ_NUMA_NODE&quot; ] ; then<br>numactl --interleave=all $JAVA $&#123;JAVA_OPT&#125; $@<br>else<br>numactl --cpunodebind=$RMQ_NUMA_NODE --membind=$RMQ_NUMA_NODE $JAVA $&#123;JAVA_OPT&#125; $@<br>fi<br>else<br>&quot;$JAVA&quot; $&#123;JAVA_OPT&#125; $@<br>fi<br></code></pre></td></tr></table></figure><h1 id="3-启动RocketMQ"><a href="#3-启动RocketMQ" class="headerlink" title="3. 启动RocketMQ"></a>3. 启动RocketMQ</h1><p>（当前目录为rocketmq-all-5.1.4-bin-release）</p><ol><li><strong>启动名称服务器</strong>：执行命令：<code>nohup sh bin/mqnamesrv &amp;</code></li><li><strong>启动消息队列和代理服务器</strong>：<code>nohup sh bin/mqbroker -n localhost:9876 --enable-proxy &amp;</code></li></ol><blockquote><p>nohup代表“不挂起”。在终端中执行命令然后关闭终端时，与该命令相关联的进程通常也会终止。nohup可以防止这种情况发生。</p></blockquote><p>可查看nohup.out（<code>vim nohup.out</code>）或日志文件（<code>tail -f ~/logs/rocketmqlogs/proxy.log</code>）来判断消息队列有无启动成功。</p><h1 id="4-关闭RocketMQ"><a href="#4-关闭RocketMQ" class="headerlink" title="4. 关闭RocketMQ"></a>4. 关闭RocketMQ</h1><ul><li><strong>关闭消息队列</strong>：<code>sh bin/mqshutdown broker</code></li><li><strong>关闭名称服务</strong>：<code>sh bin/mqshutdown namesrv</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列：1.认识篇</title>
    <link href="/2024/03/13/backend/middleware/messagequeue/mq-introducte/"/>
    <url>/2024/03/13/backend/middleware/messagequeue/mq-introducte/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>消息队列，顾名思义，存放消息（可类比为请求）的队列（一种先进先出的数据结构）。<br>其是一种常用于分布式系统的中间件，可以在不同的应用程序、服务或系统之间传递消息，并且常用于解耦合不同部分的系统，使得系统更加可扩展和灵活。<br><strong>基本原理：发送者将消息放入队列，接收者从队列中获取消息并处理。</strong><br>消息队列实质是一种方式，一种<strong>在不同组件之间传递消息的通信方式</strong>。发送者和接收者之间不需要直接通信，它们只需了解如何发送和接收消息即可。</p><h1 id="作用与优点"><a href="#作用与优点" class="headerlink" title="作用与优点"></a>作用与优点</h1><p>由上述内容，可推断出消息队列的一些作用：</p><ul><li><strong>解耦</strong>：发送者和接收者只需要关心发送消息和接受消息，不用关心彼此。</li><li><strong>异步</strong>：发送者不关心消息的处理，即不用等待消息的响应，故支持异步。</li><li><strong>削锋</strong>：某些活动的流量过大、请求过多，可能导致系统宕机；消息队列可以作为缓冲区，将这些请求暂时存储起来，以避免瞬时高流量，然后按照系统处理能力逐步消费，实现流量的平滑处理，从而降低系统的压力，避免宕机。<br>以及其身为分布式系统的固有优点：</li><li><strong>可扩展性</strong>：在解耦后，可方便地单独对发送者或接收者或消息队列进行动态伸缩。</li><li><strong>可靠性</strong>：由于消息队列允许多个消费者和生产者，并且通常支持消息持久化和复制，因此即使其中一个组件出现故障，系统仍然可以继续运行并且消息也不会丢失。</li></ul><h1 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h1><p>（此处仅介绍一些常见场景）</p><h2 id="异步场景举例：用户注册"><a href="#异步场景举例：用户注册" class="headerlink" title="异步场景举例：用户注册"></a>异步场景举例：用户注册</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>用户注册后需向其发送注册邮件和注册短信。</p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>用户注册后，将注册信息写入数据库；发送注册邮件；发送短信。<br>如不使用消息队列，不进行异步解耦，即注册服务器需要同步远程调用写入数据库、发送注册邮件、发送短信的三个函数，将与其他应用发生多次交互，同时还得等待响应，假设一个操作需要0.5s，则该操作会占用注册服务器一个线程的1.5s。<br>使用消息队列后，注册服务器直接向消息队列中写入三个消息（数据库写入消息、邮件发送消息、短信发送消息），并且是异步发送不用等待返回，假设一次发送消息为0.1s，也仅需0.3s。</p><h2 id="解耦场景举例：订单-库存管理"><a href="#解耦场景举例：订单-库存管理" class="headerlink" title="解耦场景举例：订单-库存管理"></a>解耦场景举例：订单-库存管理</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>用户下订单后，库存系统需要减少相对数量。</p><h3 id="设计-1"><a href="#设计-1" class="headerlink" title="设计"></a>设计</h3><p>用户下单后，订单系统需要通知库存系统。</p><h3 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h3><ul><li>原设计：订单系统调用库存系统的接口。<ul><li>存在缺陷：假如库存系统无法访问，则订单减库存将失败，从而导致订单失败；订单系统依赖库存系统接口，存在耦合。</li></ul></li><li>使用消息队列改进：订单系统发送订单消息（用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功），库存系统读取订单消息并自行处理（订阅订单消息，采用拉&#x2F;推的方式，获取下单信息，库存系统根据下单信息，进行库存操作）。<ul><li>解决缺陷：假如库存系统无法访问，订单系统仅需要发送消息，可保持运转；订单消息仅发送消息，消息解读由库存系统进行（发布-订阅或消息队列模式），降低耦合度。</li></ul></li></ul><h2 id="削锋场景举例：秒杀活动"><a href="#削锋场景举例：秒杀活动" class="headerlink" title="削锋场景举例：秒杀活动"></a>削锋场景举例：秒杀活动</h2><h3 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h3><p>在秒杀活动中，大量用户同时抢购商品，可能会导致系统压力激增。为了应对这一情况，需要一种机制来平稳处理激增的请求流量，避免系统崩溃或性能下降。</p><h3 id="设计-2"><a href="#设计-2" class="headerlink" title="设计"></a>设计</h3><p>传统的处理方式可能会导致系统崩溃或性能下降。为了解决这个问题，可以使用消息队列来削峰填谷。</p><h3 id="详细设计-1"><a href="#详细设计-1" class="headerlink" title="详细设计"></a>详细设计</h3><ol><li>秒杀活动开始：当秒杀活动开始时，用户可以提交秒杀请求。</li><li>请求入队：订单系统接收到用户的秒杀请求后，将请求消息写入消息队列，而不是立即处理。</li><li>消息处理：秒杀请求消息被消息队列按照一定的规则（如先进先出）分发给后端处理程序。</li><li>后端处理：后端处理程序逐条处理消息，检查库存并进行相应的处理（如减少库存、生成<br>订单等）。</li></ol><p>以此消息队列可平滑处理激增的请求流量，避免系统因突发流量而崩溃。</p><h2 id="日志处理场景"><a href="#日志处理场景" class="headerlink" title="日志处理场景"></a>日志处理场景</h2><h3 id="需求-3"><a href="#需求-3" class="headerlink" title="需求"></a>需求</h3><p>需要一种解决大量日志传输和实时处理的方案，以便对日志数据进行分析和可视化展示。</p><h3 id="设计-3"><a href="#设计-3" class="headerlink" title="设计"></a>设计</h3><p>设计一个分布式日志处理系统，包括以下组件：</p><ol><li>日志采集客户端：负责从各个日志源采集日志数据，并将数据定期写入消息队列中。</li><li>消息队列：接收来自日志采集客户端的日志数据，负责数据的存储和转发。</li><li>日志处理应用：订阅并消费Kafka队列中的日志数据，进行实时处理和分析。</li><li>Logstash：作为日志处理应用的一部分，负责对原始日志进行解析和转换，统一输出为JSON格式的数据。</li><li>Elasticsearch：作为日志处理应用的核心数据存储服务，接收Logstash处理后的JSON格式日志数据，实现实时的数据索引和查询。</li><li>Kibana：基于Elasticsearch 的数据可视化组件，用于将Elasticsearch中的数据进行可视化展示和分析。</li></ol><h2 id="消息通讯场景"><a href="#消息通讯场景" class="headerlink" title="消息通讯场景"></a>消息通讯场景</h2><h3 id="需求-4"><a href="#需求-4" class="headerlink" title="需求"></a>需求</h3><p>需要一种高效的消息通讯机制，可以用于点对点通讯或者创建聊天室等场景，以实现实时的消息传递和交流。</p><h3 id="设计-4"><a href="#设计-4" class="headerlink" title="设计"></a>设计</h3><p>设计一个基于消息队列的消息通讯系统，包括以下两种场景：</p><ol><li>点对点通讯：客户端A和客户端B使用同一队列进行消息通讯；消息队列负责接收和转发客户端A和客户端B的消息。</li><li>客户端A、客户端B等多个客户端订阅同一主题：当有客户端发布消息时，消息队列将消息广播给所有订阅了该主题的客户端，客户端收到消息后进行展示。</li></ol><h1 id="常用消息队列框架"><a href="#常用消息队列框架" class="headerlink" title="常用消息队列框架"></a>常用消息队列框架</h1><ol><li><strong>RabbitMQ</strong>：RabbitMQ 是一个开源的消息队列系统，实现了高级消息队列协议（AMQP），它是一个可靠、高可用、可扩展的消息代理。RabbitMQ提供了多种消息传递模式，如点对点、发布&#x2F;订阅等，适用于各种场景的应用程序。</li><li><strong>RocketMQ</strong>：RocketMQ 是阿里巴巴开源的分布式消息队列系统，具有高吞吐量、低延迟、高可用性等特点。它支持丰富的消息模型，包括顺序消息、事务消息等，适用于大规模分布式系统的消息通信。</li><li><strong>Kafka</strong>：Kafka是由Apache软件基金会开发的分布式流处理平台和消息队列系统。Kafka设计用于支持大规模的消息处理，具有高吞吐量、持久性、分区等特点，广泛应用于大数据领域。</li><li><strong>ActiveMQ</strong>：ActiveMQ 是一个开源的消息中间件，实现了JavaMessageService(JMS)规范。它支持多种传输协议，如TCP、UDP、SSL等，提供了丰富的功能，包括消息持久化、事务支持等。</li><li><strong>Amazon SQS</strong>：AmazonSQS（Simple Queue Service）是亚马逊提供的消息队列服务，可帮助构建分布式应用程序。它具有高可用性、可扩展性、灵活性等特点，适用于构建在亚马逊云平台上的应用程序。</li></ol>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
      <tag>RocketMQ</tag>
      
      <tag>解耦</tag>
      
      <tag>异步</tag>
      
      <tag>削锋</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务：认识篇</title>
    <link href="/2024/03/13/backend/microservice/microservice-introduce/"/>
    <url>/2024/03/13/backend/microservice/microservice-introduce/</url>
    
    <content type="html"><![CDATA[<p>本文将从时代背景、发展过程、微服务特点出发，对微服务整体构建一个大致的理解：</p><h2 id="时代背景"><a href="#时代背景" class="headerlink" title="时代背景"></a>时代背景</h2><ol><li><p>解决<strong>复杂性</strong>的需求——传统的单体应用架构将所有的功能和模块集中在一个单独的应用程序中，导致应用程序开发、部署和维护变得困难，并且不利于快速迭代和扩展。</p></li><li><p>对<strong>高可用性和扩展性</strong>的需求（如高并发和大规模用户访问）——用户对于应用程序的高可用性和即时响应的期望越来越高，而单体应用架构难以实现高可用性和弹性扩展（一个组件的故障可能会影响整个应用程序的可用性，并且扩展整个应用程序可能会面临技术和性能上的限制）。</p></li><li><p>快速迭代和团队协作的需求（可包含于1.1）——传统的单体应用架构可能不利于快速迭代，因为一个小的更改可能需要重新构建整个应用程序并进行全面的测试和部署，而且微服务为人员的分工提供了便捷，可以更好地支持快速迭代和敏捷开发。</p><blockquote><p>来自《凤凰架构》：譬如，制约软件质量与业务能力提升的最大因素是人而非硬件。多数企业即使有钱也很难招到大量的靠谱的开发者。此时，无论是引入外包团队，抑或是让少量技术专家带着大量普通水平的开发者去共同完成一个大型系统就成为了必然的选择。在单体架构下，没有什么有效阻断错误传播的手段，系统中“整体”与“部分”的关系没有物理的划分，系统质量只能靠研发与项目管理措施来尽可能地保障，少量的技术专家很难阻止大量螺丝钉式的程序员或者不熟悉原有技术架构的外包人员在某个不起眼的地方犯错并产生全局性的影响，并不容易做出整体可靠的大型系统。</p></blockquote></li><li><p><strong>新技术云计算</strong>和<strong>分布式架构</strong>的支持——云计算的兴起为分布式架构提供了理想的基础设施。云计算提供了弹性的计算资源和可扩展的基础设施，使得构建分布式系统和服务变得更加容易。</p></li></ol><h2 id="发展过程："><a href="#发展过程：" class="headerlink" title="发展过程："></a>发展过程：</h2><ol><li>早期阶段：<ol><li>SOA的出现：在这个阶段，服务导向架构（SOA）的概念开始引起关注。SOA提倡将应用程序拆分为一组可重用的服务，通过标准化的接口进行通信。这为后来微服务架构的发展奠定了基础。</li></ol></li><li>兴起阶段：<ol><li>架构模式的探索：微服务架构作为一种新兴的架构风格（更灵活、可维护和可扩展）开始受到关注。</li><li>云计算和虚拟化技术的发展：云计算和虚拟化技术的兴起为微服务架构的发展提供了理想的基础设施。这些技术为构建分布式系统和部署微服务提供了更好的支持。</li></ol></li><li>推广阶段：<ol><li>微服务的推广：微服务架构开始广泛被采用并得到推广。越来越多的组织开始采用微服务架构，以应对复杂性增加、快速迭代和团队协作的挑战。</li><li>开源和商业化工具的涌现：随着微服务的普及，大量的开源和商业化工具、框架和平台涌现，用于辅助微服务架构的开发、部署和管理。这些工具提供了服务注册与发现、负载均衡、容器化和编排、监控和日志等功能，为微服务架构提供了更好的支持。</li><li>实践经验的积累：随着实际应用的增多，对于微服务架构的实践经验也在不断积累。开发人员和组织逐渐摸索出一些最佳实践、设计模式和解决方案，以应对微服务架构中的挑战和复杂性。</li></ol></li><li>演进阶段（将来）：微服务架构是一个动态的领域，仍在不断演进和发展中。它的发展历史仍在进行中，将随着技术的进步和业务需求的变化而不断推进。因此，微服务架构的未来发展将会受到更多新技术、实践经验和业务需求的影响。</li></ol><h2 id="微服务特点："><a href="#微服务特点：" class="headerlink" title="微服务特点："></a>微服务特点：</h2><table><thead><tr><th>不同点</th><th>微服务架构</th><th>单体架构</th></tr></thead><tbody><tr><td>团队规模</td><td>微服务架构可以将传统模式下的单个应用拆分为多个独立的服务，每个微服务都可以单独开发、部署和维护。<strong>每个服务从设计、开发到维护所需的团队规模小，团队管理成本小。</strong></td><td>单体架构的应用程序通常需要一个大型团队，围绕一个庞大的应用程序工作，团队管理的成本大。</td></tr><tr><td>项目结构（部署方式）</td><td>微服务架构中<strong>每个服务都可以独立开发、部署和维护</strong>，也可以独立于其他服务进行扩展。如果部署得当，基于微服务的架构可以帮助企业提高应用程序的部署效率。</td><td>采用单体架构的应用程序的每一次功能更改或 bug 修复都必须对整个应用程序重新进行部署（所有的业务逻辑都集中在同一个工程中）。</td></tr><tr><td>开发模式</td><td>在采用微服务架构的应用程序中，<strong>不同模块可以使用不同的技术或语言进行开发，开发模式更加灵活</strong>。</td><td>在采用单体架构的应用程序中，所有模块使用的技术和语言必须相同，开发模式受限。</td></tr><tr><td>故障隔离</td><td>在微服务架构中，<strong>故障被隔离在单个服务中</strong>，避免系统的整体崩溃。</td><td>在单体架构中，当一个组件出现故障时，故障很可能会在进程中蔓延，导致系统全局不可用。</td></tr></tbody></table><p>优点：</p><ul><li><strong>松耦合</strong>：微服务架构通过将应用程序拆分为多个独立的服务来实现松耦合。每个服务都是自治的，可以独立开发、部署、扩展和维护。这种松耦合性使团队能够独立开发和部署不同的服务，降低了开发的复杂性，并且更容易实现敏捷开发和持续交付。</li><li><strong>可伸缩性（扩展性）</strong>：由于微服务架构中的每个服务都是独立的，可以根据需求对每个服务进行单独的扩展。这意味着可以根据流量和负载的变化，只需对需要扩展的服务进行扩展，而无需扩展整个应用程序。这种可伸缩性使系统能够更好地应对高流量和大规模的并发请求。</li><li><strong>技术多样性</strong>：微服务架构允许使用不同的编程语言、框架和技术栈来构建不同的服务。这使得团队可以选择最适合其需求和技术能力的工具和技术，从而实现更好的灵活性和创新性。</li></ul><p>缺点：</p><ul><li><strong>分布式系统复杂性</strong>：微服务架构引入了分布式系统的复杂性。服务之间的通信和协调需要考虑网络延迟、服务发现、故障处理等因素。这增加了系统的复杂性，并需要适当的工具和技术来管理分布式环境。</li><li><strong>运维复杂性</strong>：由于微服务架构中存在大量的服务实例和组件，运维和监控这些服务变得更加复杂。需要适当的工具和流程来管理和监控每个服务的性能、可用性和健康状态。</li><li><strong>分布式事务管理</strong>：微服务架构中的服务可能需要进行跨服务的事务操作。由于每个服务都是自治的，保持一致的事务管理变得复杂。需要使用一些机制（如分布式事务或补偿性事务）来管理分布式事务的一致性和可靠性。<br>此外，微服务还有其他一些特点，比如可以与容器（Docker）配合使用，可以进行链路追踪等，但是我们主要的目的，还是为了解决复杂性（实现独立开发、部署和维护，保证敏捷开发和持续交付）和提高可用性和扩展性（故障隔离、对服务进行扩展、可使用多种技术和语言），所以仅列出上述优缺点和特点。</li></ul><h2 id="与SOA的区别："><a href="#与SOA的区别：" class="headerlink" title="与SOA的区别："></a>与SOA的区别：</h2><p>微服务 VS SOA：</p><ul><li>相同：面向服务；</li><li>不同：强约束 VS 软指导；强一致 VS 自由；规范标准 VS 实践标准。<br>微服务丢掉了 SOA 的强标准，换来了自由。自由的代价是工程师需根据业务情况选择适合的技术，过程中可能会犯错。微服务带来自由，也带来迷茫。微服务只是一种思想，它丢掉了 SOA 的包袱，却没带来什么具体的东西。RPC 等分布式的问题重新出现，交由社区解决；一时间，百花齐放，百家争鸣。</li></ul><blockquote><p>引自《凤凰架构》：<br>SOA 在 21 世纪最初的十年里曾经盛行一时，有 IBM 等一众行业巨头厂商为其呐喊冲锋，吸引了不少软件开发商、尤其是企业级软件的开发商的跟随，最终却还是偃旗息鼓，沉寂了下去。在稍后的远程服务调用一节，笔者会提到 SOAP 协议被逐渐边缘化的本质原因：过于严格的规范定义带来过度的复杂性。而构建在 SOAP 基础之上的 ESB、BPM、SCA、SDO 等诸多上层建筑，进一步加剧了这种复杂性。开发信息系统毕竟不是作八股文章，过于精密的流程和理论也需要懂得复杂概念的专业人员才能够驾驭。SOA 诞生的那一天起，就已经注定了它只能是少数系统阳春白雪式的精致奢侈品，它可以实现多个异构大型系统之间的复杂集成交互，却很难作为一种具有广泛普适性的软件架构风格来推广。SOA 最终没有获得成功的致命伤与当年的EJB (opens new window)如出一辙，尽管有 Sun Microsystems 和 IBM 等一众巨头在背后力挺，EJB 仍然败于以 Spring、Hibernate 为代表的“草根框架”，可见一旦脱离人民群众，终究会淹没在群众的海洋之中，连信息技术也不曾例外过。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
      <tag>SOA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu：初始化云服务器</title>
    <link href="/2024/03/12/practice/initUbuntu/"/>
    <url>/2024/03/12/practice/initUbuntu/</url>
    
    <content type="html"><![CDATA[<p>本文将介绍如何在一个新创建的ubuntu云服务上做一些准备工作，方便项目上线。</p><h1 id="更新软件列表"><a href="#更新软件列表" class="headerlink" title="更新软件列表"></a>更新软件列表</h1><p>执行<code>sudo apt update</code>，确保系统上安装的软件包列表是最新的，这样在安装新软件包或升级已安装的软件包时能够获得最新的版本和信息。</p><h1 id="开启sftp"><a href="#开启sftp" class="headerlink" title="开启sftp"></a>开启sftp</h1><p>执行<code>sudo apt install openssh-server</code>，方便进行文件传输。<br>执行后可使用winSCP方便地传文件。</p><h1 id="安装jdk17"><a href="#安装jdk17" class="headerlink" title="安装jdk17"></a>安装jdk17</h1><p>执行<code>sudo apt install openjdk-17-jdk</code>，以便后续运行jar包。<br>可使用<code>java -version</code>命令判断是否安装成功，以及查看java版本。<br>输出结果如：</p><blockquote><p>openjdk version “17.0.10” 2024-01-16<br>OpenJDK Runtime Environment (build 17.0.10+7-Ubuntu-122.04.1)<br>OpenJDK 64-Bit Server VM (build 17.0.10+7-Ubuntu-122.04.1, mixed mode, sharing)</p></blockquote><h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><p>执行<code>sudo apt install mysql-server</code>安装MySQL。<br>安装完成后，使用<code>sudo lsof -i | grep mysql</code>命令查看mysql是否开启运行。<br>输出应该为：</p><blockquote><p>ubuntu@VM-4-8-ubuntu:~$ sudo lsof -i | grep mysql<br>mysqld    19846           mysql   21u  IPv4  90057      0t0  TCP localhost:33060 (LISTEN)<br>mysqld    19846           mysql   23u  IPv4  90065      0t0  TCP localhost:mysql (LISTEN)</p></blockquote><p>（可以运行一下<code>sudo mysql_secure_installation</code>，执行自带的安全脚本，设置一些配置，开发环境不用在意这个）</p><h2 id="配置账号"><a href="#配置账号" class="headerlink" title="配置账号"></a>配置账号</h2><ol><li>使用<code>sudo mysql</code>进入MySQL页面。</li><li>使用<code>use mysql</code>进入MySQL数据库。</li><li>使用<code>update user set host = &#39;%&#39; where user = &#39;root&#39;;</code>命令设置root账户运行远程登录。</li><li>使用<code>flush privileges;</code>刷新配置。</li><li>使用<code>ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH MYSQL_NATIVE_PASSWORD BY &#39;你的密码&#39;</code> 修改root账号密码。</li><li>再次使用<code>flush privileges;</code>刷新配置。</li><li>使用<code>exit</code>退出。</li></ol><p>下次进入就要用<code>sudo mysql -u root -p</code>命令了。</p><h2 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h2><p>（注意要先把防火墙开放一下）<br>此时账户配置好了，但是Navicat还是连接不上，因为MySQl有个配置文件中设置了只接受某个特定id来源的请求，需要修改：</p><ol><li>进入MySQL的配置文件目录（<code>cd /etc/mysql</code>），查看里面哪个配置文件中包含了bind-address。（我的是&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf文件里面）</li><li>使用vim修改即可。<blockquote><p>bind-address            &#x3D; 127.0.0.1<br>mysqlx-bind-address     &#x3D; 127.0.0.1<br>修改为<br>bind-address            &#x3D; 0.0.0.0<br>mysqlx-bind-address     &#x3D; 0.0.0.0</p></blockquote></li><li>重启MySQL服务：<code>sudo service mysql restart</code></li></ol><p>即可使用Navicat连接。</p><h1 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h1><p>执行<code>sudo apt install redis-server</code>安装Redis。<br>安装完成后，可使用<code>sudo systemctl status redis-server</code>查看有无启动（默认是启动的）。<br>输出为：</p><blockquote><p>ubuntu@VM-4-8-ubuntu:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d$ sudo systemctl status redis-server<br>● redis-server.service - Advanced key-value store<br>     Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;redis-server.service; enabled; vendor preset: enabled)<br>     Active: active (running) since Tue 2024-03-12 18:14:04 CST; 48s ago<br>……</p></blockquote><p>可执行<code>redis-cli</code>进入本地Redis并测试有无启动成功：</p><blockquote><p>ubuntu@VM-4-8-ubuntu:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d$ redis-cli<br>127.0.0.1:6379&gt; ping<br>PONG<br>127.0.0.1:6379&gt; exit</p></blockquote><h2 id="配置远程连接-1"><a href="#配置远程连接-1" class="headerlink" title="配置远程连接"></a>配置远程连接</h2><ol><li>使用<code>sudo su</code>进入root账号（进入redis配置文件夹需要root权限）</li><li>使用<code>cd /etc/redis</code>进入配置文件夹</li><li>使用<code>vim redis.conf</code>修改文件（输入<code>/bind</code>进行查找，点击<strong>n</strong>查找下一个）</li><li>修改配置文件。<blockquote><p>bind 127.0.0.1 ::1<br>修改为<br>bind 0.0.0.0 ::1</p></blockquote></li><li>重启Redis服务（<code>sudo systemctl restart redis-server</code>）</li></ol><p>（注意开放6379的防火墙）<br>即可在远程连接到Redis。</p><blockquote><p>D:\Redis\Redis-x64-5.0.14.1&gt;redis-cli -h [数据删除]<br>[数据删除]:6379&gt; ping<br>PONG<br>[数据删除]:6379&gt; exit</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>项目实践</category>
      
      <category>准备工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云服务器</tag>
      
      <tag>ubuntu</tag>
      
      <tag>docker</tag>
      
      <tag>java</tag>
      
      <tag>sftp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canal入门篇：1.介绍&amp;配置&amp;启动</title>
    <link href="/2024/03/06/backend/middleware/canal/canal_config/"/>
    <url>/2024/03/06/backend/middleware/canal/canal_config/</url>
    
    <content type="html"><![CDATA[<p>本文将讲述canal的安装、配置、启动以及验证监听是否成功。</p><h1 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍[1]"></a>介绍<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="本文基于canalv1.1.7版本。">[1]</span></a></sup></h1><p><strong>中间件功能：基于数据库增量日志解析，提供增量数据的订阅&amp;消费。</strong>（目前主要支持了mysql）</p><p>使用canal的优点：</p><ul><li><strong>实时性</strong>：Canal 直接对接 MySQL 的二进制日志（Binlog），实现了近乎实时的数据同步，可以实现实时数据流处理和近实时的数据集成。</li><li><strong>轻量级</strong>：作为一个开源组件，Canal 采用 Java 编写，具有较好的跨平台性和扩展性，部署相对简单，资源占用较小，适合大规模分布式环境下的部署与使用。</li><li><strong>可靠性</strong>：基于 MySQL 的 Binlog 记录机制，Canal 可以确保数据的完整性，不会丢失任何有效的数据库更改操作。</li><li><strong>灵活性</strong>：Canal 提供了丰富的过滤和路由策略，允许用户根据需求精确配置需要同步的数据库、表甚至是字段级别的数据变更。</li><li><strong>低侵入性</strong>：无需在业务代码中插入额外逻辑，就能实现数据的实时抓取，业务代码与数据同步逻辑完全解耦。</li><li><strong>易用性</strong>：提供了简洁易懂的配置方式，支持多种输出方式，如消息队列、HTTP API 推送等，方便与其他系统进行集成。</li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><h3 id="1-MySQL主从复制原理"><a href="#1-MySQL主从复制原理" class="headerlink" title="1. MySQL主从复制原理"></a>1. MySQL主从复制原理</h3><ol><li><strong>主库 Binlog 日志</strong>：在主数据库（Master）中，所有对数据库的更改操作都被记录在<strong>二进制日志（Binary Log，即binlog）</strong>中。这个日志包含了所有数据修改语句（如INSERT、UPDATE、DELETE），或者更底层的事件，如行格式的二进制日志。</li><li><strong>日志传输</strong>：从数据库（Slave）连接到主数据库，请求主数据库发送 binlog 中的更新事件。主数据库有一个名为 <strong>Binlog Dump Thread</strong> 的线程，它负责读取 binlog 并将这些事件传送给从数据库。</li><li><strong>中继日志 Relay Log</strong>：从数据库接收到主数据库的更新事件后，将它们存储在自己的中继日志（Relay Log）中。</li><li><strong>事件重放</strong>：从数据库有自己的** SQL 线程（也称 I&#x2F;O 线程和 SQL 线程）**，I&#x2F;O 线程负责接收并写入 relay log，而 SQL 线程则负责读取 relay log 中的事件并在从数据库上重新执行（即重放）这些事件。</li></ol><p><img src="/2024/03/06/backend/middleware/canal/canal_config/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.png"></p><p>这个过程保证了主数据库的每一次更新操作都能在从数据库上按照同样的顺序执行一次，从而让从数据库的数据与主数据库保持一致。</p><blockquote><p>复制模式(MySQL 支持多种复制模式)：</p><ul><li>异步复制是最常见的模式，主库不等待从库确认就继续处理新的事务，因此可能存在一定的数据延迟。</li><li>半同步复制在主库提交事务之前至少需要一个从库确认已接收事件，提供了一定程度的数据一致性保障。</li><li>全同步复制要求所有从库都确认事务后，主库才提交事务，提供了最强的数据一致性，但可能会影响性能。</li></ul></blockquote><h3 id="2-canal工作原理"><a href="#2-canal工作原理" class="headerlink" title="2. canal工作原理"></a>2. canal工作原理</h3><p><img src="/2024/03/06/backend/middleware/canal/canal_config/canal%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"></p><ol><li><strong>模拟MySQL Slave</strong>： Canal通过模拟MySQL的Slave节点行为，连接到MySQL Master节点，并遵循MySQL的复制协议。它会像真正的MySQL slave那样，向MySQL master发送dump binlog的请求。</li><li><strong>获取Binary Log</strong>： 当MySQL Master接收到这个dump请求后，它会开始将自身的二进制日志（Binary Log）推送给Canal。Binary Log中记录了所有对数据库的更改操作，如INSERT、UPDATE、DELETE等。</li><li><strong>解析Binary Log</strong>： Canal接收并解析Master推送过来的Binary Log数据流，将其转换成结构化的事件（event）。这些事件包含了数据库变更的具体内容，如变更前后的行数据、执行的SQL语句等。</li></ol><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="/2024/03/06/backend/middleware/canal/canal_config/canal%E6%9E%B6%E6%9E%84.png"></p><ol><li>server：一个canal运行实例，对应于一个jvm</li><li>instance：对应于一个数据队列（1个server对应1..n个instance）<ol><li>eventParser：数据源接入，模拟slave协议和master进行交互，协议解析。</li><li>eventSink：Parser和Store链接器，进行数据过滤，加工，分发的工作。</li><li>eventStore：数据存储。</li><li>metaManager：增量订阅&amp;消费信息管理器。</li></ol></li></ol><blockquote><p>具体各个模块的功能请参考<a href="https://github.com/alibaba/canal/wiki/%E7%AE%80%E4%BB%8B">canal仓库</a></p></blockquote><h1 id="配置（快速启动canal）"><a href="#配置（快速启动canal）" class="headerlink" title="配置（快速启动canal）"></a>配置（快速启动canal）</h1><h2 id="1-更改MySQL配置"><a href="#1-更改MySQL配置" class="headerlink" title="1. 更改MySQL配置"></a>1. 更改MySQL配置</h2><p>修改MySQL配置文件my.ini，开启 Binlog 写入功能，并配置 binlog-format 为 ROW 模式：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">log-bin</span>=mysql-bin <span class="hljs-comment"># 开启 binlog</span><br><span class="hljs-attr">binlog-format</span>=ROW <span class="hljs-comment"># 选择 ROW 模式</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-number">1</span> <span class="hljs-comment"># 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复</span><br></code></pre></td></tr></table></figure><blockquote><p>Windows修改MySQL配置文件的方式：</p><ol><li><code>Win+R</code>打开<strong>运行</strong>，输入<code>services.msc</code>，进入服务页面。</li><li>找到对应的MySQL服务，双击查看<strong>可执行文件的路径：</strong>条目下的<code>--default-file=</code>后的my.ini文件位置。</li><li>修改该文件。</li><li>右键MySQL服务条目，点击<strong>重新启动</strong>，重启MySQL服务。</li></ol></blockquote><h2 id="2-安装canal"><a href="#2-安装canal" class="headerlink" title="2. 安装canal"></a>2. 安装canal</h2><p>进入Ubuntu安装canal：</p><ol><li>进入canal的<a href="https://github.com/alibaba/canal/releases">release页面</a>，选择对应版本的压缩包。（我下载的是canal.deployer-1.1.7.tar.gz<br>）</li><li>在ubuntu中拉取该压缩包：<code>wget https://github.com/alibaba/canal/releases/download/canal-1.1.7/canal.deployer-1.1.7.tar.gz</code></li><li>解压该压缩包<code>tar -zxf canal.deployer-1.1.7.tar.gz</code></li><li>修改配置文件<code>vim conf/example/instance.properties</code></li></ol><p>修改配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">canal.instance.master.<span class="hljs-attribute">address</span>=192.168.112.1:3306<br>canal.instance.master.journal.<span class="hljs-attribute">name</span>=mysql-bin.000353<br>canal.instance.master.<span class="hljs-attribute">position</span>=1<br><span class="hljs-built_in">..</span>.<br>canal.instance.<span class="hljs-attribute">dbUsername</span>=canal<br>canal.instance.<span class="hljs-attribute">dbPassword</span>=canal<br><span class="hljs-built_in">..</span>.<br>canal.instance.filter.<span class="hljs-attribute">regex</span>=api_open_platform\\..*<br></code></pre></td></tr></table></figure><ul><li>address: 数据库地址</li><li>journal.name: 日志文件名，去MySQL运行文件目录旁边找一下就能找到了</li><li>position: 从日志的第几个字节开始读取</li><li>dbUsername: 用户名</li><li>dbPassword: 用户密码</li><li>filter.regex：使用正则表达式选择数据库表（我设置的是监听api_open_platform数据库下所有的表）</li></ul><h2 id="3-启动canal"><a href="#3-启动canal" class="headerlink" title="3. 启动canal"></a>3. 启动canal</h2><ol><li><strong>开启命令</strong>：<code>bash bin/startup.sh</code>。</li><li><strong>查看日志命令</strong>：<code>vim logs/canal/canal.log</code>、<code>vim logs/example/example.log</code>。</li><li><strong>关闭命令</strong>：<code>bash bin/stop.sh</code>。</li></ol><p>成功后的运行日志：</p><ul><li>canal.log：<blockquote><p>2024-03-06 22:16:46.110 [main] INFO  com.alibaba.otter.canal.deployer.CanalLauncher - ## set default uncaught exception handler<br>2024-03-06 22:16:46.117 [main] INFO  com.alibaba.otter.canal.deployer.CanalLauncher - ## load canal configurations<br>2024-03-06 22:16:46.126 [main] INFO  com.alibaba.otter.canal.deployer.CanalStarter - ## start the canal server.<br>2024-03-06 22:16:46.152 [main] INFO  com.alibaba.otter.canal.deployer.CanalController - ## start the canal server[172.20.0.1(172.20.0.1):11111]<br>2024-03-06 22:16:47.076 [main] INFO  com.alibaba.otter.canal.deployer.CanalStarter - ## the canal server is running now ……</p></blockquote></li><li>example.log：<blockquote><p>2024-03-06 22:16:46.589 [main] INFO  c.a.otter.canal.instance.spring.CanalInstanceWithSpring - start CannalInstance for 1-example<br>2024-03-06 22:16:47.044 [main] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - –&gt; init table filter : ^api_open_platform..<em>$<br>2024-03-06 22:16:47.044 [main] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - –&gt; init table black filter : ^mysql.slave_.</em>$<br>2024-03-06 22:16:47.048 [main] INFO  c.a.otter.canal.instance.core.AbstractCanalInstance - start successful….<br>2024-03-06 22:16:47.116 [destination &#x3D; example , address &#x3D; &#x2F;192.168.112.1:3306 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - —&gt; begin to find start position, it will be long time for reset or first position<br>2024-03-06 22:16:47.132 [destination &#x3D; example , address &#x3D; &#x2F;192.168.112.1:3306 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - prepare to find start position mysql-bin.000353:4:1709690365000<br>2024-03-06 22:16:47.437 [destination &#x3D; example , address &#x3D; &#x2F;192.168.112.1:3306 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - —&gt; find start position successfully, EntryPosition[included&#x3D;false,journalName&#x3D;mysql-bin.000353,position&#x3D;4,serverId&#x3D;1,gtid&#x3D;<null>,timestamp&#x3D;1709690365000] cost : 292ms , the next step is binlog dump</p></blockquote></li></ul><h1 id="java连接canal"><a href="#java连接canal" class="headerlink" title="java连接canal"></a>java连接canal</h1><h2 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.otter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>canal.client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><blockquote><p>注：该函数仅用于测试能否连接。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;---------O(∩_∩)O哈哈~ initCanal() main方法-----------&quot;</span>);<br>    <span class="hljs-comment">//=================================</span><br>    <span class="hljs-comment">// 创建链接canal服务端</span><br>    <span class="hljs-type">CanalConnector</span> <span class="hljs-variable">connector</span> <span class="hljs-operator">=</span> CanalConnectors.newSingleConnector(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;192.168.146.132&quot;</span>,<span class="hljs-number">11111</span>), <span class="hljs-string">&quot;example&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">batchSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>    <span class="hljs-comment">//空闲空转计数器</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">emptyCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    System.out.println(<span class="hljs-string">&quot;---------------------canal init OK，开始监听mysql变化------&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        connector.connect();<br>        connector.subscribe(<span class="hljs-string">&quot;.*\\..*&quot;</span>);<br>        <span class="hljs-comment">//connector.subscribe(&quot;petstoredb.pets&quot;);</span><br>        connector.rollback();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">totalEmptyCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">600</span>;<br>        <span class="hljs-keyword">while</span> (emptyCount &lt; totalEmptyCount) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我是canal，每秒一次正在监听:&quot;</span>+ UUID.randomUUID().toString());<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> connector.getWithoutAck(batchSize); <span class="hljs-comment">// 获取指定数量的数据</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">batchId</span> <span class="hljs-operator">=</span> message.getId();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> message.getEntries().size();<br>            <span class="hljs-keyword">if</span> (batchId == -<span class="hljs-number">1</span> || size == <span class="hljs-number">0</span>) &#123;<br>                emptyCount++;<br>                <span class="hljs-keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>); &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//计数器重新置零</span><br>                emptyCount = <span class="hljs-number">0</span>;<br>                printEntry(message.getEntries());<br>            &#125;<br>            connector.ack(batchId); <span class="hljs-comment">// 提交确认</span><br>            <span class="hljs-comment">// connector.rollback(batchId); // 处理失败, 回滚数据</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;已经监听了&quot;</span>+totalEmptyCount+<span class="hljs-string">&quot;秒，无任何消息，请重启重试......&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        connector.disconnect();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printEntry</span><span class="hljs-params">(List&lt;Entry&gt; entrys)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Entry entry : entrys) &#123;<br>        <span class="hljs-keyword">if</span> (entry.getEntryType() == EntryType.TRANSACTIONBEGIN || entry.getEntryType() == EntryType.TRANSACTIONEND) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">RowChange</span> <span class="hljs-variable">rowChage</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取变更的row数据</span><br>            rowChage = RowChange.parseFrom(entry.getStoreValue());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;ERROR ## parser of eromanga-event has an error,data:&quot;</span> + entry.toString(),e);<br>        &#125;<br>        <span class="hljs-comment">//获取变动类型</span><br>        <span class="hljs-type">EventType</span> <span class="hljs-variable">eventType</span> <span class="hljs-operator">=</span> rowChage.getEventType();<br>        System.out.println(String.format(<span class="hljs-string">&quot;================binlog[%s:%s] , name[%s,%s] , eventType : %s&quot;</span>,<br>                entry.getHeader().getLogfileName(), entry.getHeader().getLogfileOffset(),<br>                entry.getHeader().getSchemaName(), entry.getHeader().getTableName(), eventType));<br>        <span class="hljs-keyword">for</span> (RowData rowData : rowChage.getRowDatasList()) &#123;<br>            <span class="hljs-keyword">if</span> (eventType == EventType.INSERT) &#123;<br>                rowData.getAfterColumnsList().forEach(column-&gt;System.out.println(column.getName() + <span class="hljs-string">&quot; : &quot;</span> + column.getValue() + <span class="hljs-string">&quot;    update=&quot;</span> + column.getUpdated()));<br>                <span class="hljs-comment">//redisInsert(rowData.getAfterColumnsList());</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (eventType == EventType.DELETE) &#123;<br>                rowData.getAfterColumnsList().forEach(column-&gt;System.out.println(column.getName() + <span class="hljs-string">&quot; : &quot;</span> + column.getValue() + <span class="hljs-string">&quot;    update=&quot;</span> + column.getUpdated()));<br>                <span class="hljs-comment">//redisDelete(rowData.getBeforeColumnsList());</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//EventType.UPDATE</span><br>                rowData.getAfterColumnsList().forEach(column-&gt;System.out.println(column.getName() + <span class="hljs-string">&quot; : &quot;</span> + column.getValue() + <span class="hljs-string">&quot;    update=&quot;</span> + column.getUpdated()));<br>                <span class="hljs-comment">//redisUpdate(rowData.getAfterColumnsList());</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出为：</p><blockquote><p>我是canal，每秒一次正在监听:0d7700c0-0117-4a28-8d82-0a6ccbafadfd<br>我是canal，每秒一次正在监听:a658edf6-e56c-458e-bf13-25a64bffa7ec<br>我是canal，每秒一次正在监听:a6896fce-8f48-4478-983e-cf4bb05c1393<br>我是canal，每秒一次正在监听:e180a475-8a4a-44ee-84fa-096c2f44db16<br>我是canal，每秒一次正在监听:0fd10344-7eb1-412d-90fc-185e3ec69c51<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;binlog[mysql-bin.000353:54296] , name[api_open_platform,interface_access] , eventType : INSERT<br>accesskey : a7e4c3c9-90be-434f-a201-1fb0c9c6921f    update&#x3D;true<br>verify_type : 1    update&#x3D;true<br>secretkey : 41ee07aa-bd35-45f0-aa6f-b39351d8db0c    update&#x3D;true<br>remaining_amount :     update&#x3D;true<br>remaining_times :     update&#x3D;true<br>interface_id : 10    update&#x3D;true<br>userid : 28    update&#x3D;true<br>call_times : 0    update&#x3D;true<br>failed_call_times : 0    update&#x3D;true<br>create_time : 2024-03-06 22:42:25    update&#x3D;true<br>update_time : 2024-03-06 22:42:25    update&#x3D;true<br>is_deleted : 0    update&#x3D;true<br>我是canal，每秒一次正在监听:1b80e597-9976-430a-b6f7-4fcaac936776<br>我是canal，每秒一次正在监听:9e89f0f4-0dfe-4f53-88c7-5731dbf0ebdf<br>我是canal，每秒一次正在监听:19322e19-0924-400d-a85b-bba58beb1a53<br>我是canal，每秒一次正在监听:0febf37a-df93-40b8-8c23-d0b89a1a1576</p></blockquote><p>至此，canal启动完成。<section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>本文基于canalv1.1.7版本。<br><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>canal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>canal</tag>
      
      <tag>双写一致性</tag>
      
      <tag>Dump</tag>
      
      <tag>Binary log</tag>
      
      <tag>mysql slave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canal入门篇：2.实现MySQL&amp;Redis双写一致性</title>
    <link href="/2024/03/06/backend/middleware/canal/canal_MySQL&amp;Redis/"/>
    <url>/2024/03/06/backend/middleware/canal/canal_MySQL&amp;Redis/</url>
    
    <content type="html"><![CDATA[<p>本文将介绍如何使用canal实现MySQl和Redis的双写一致性。前文为：<a href="/2024/03/06/backend/middleware/canal/canal_config/" title="canal入门篇：1.介绍&amp;配置&amp;启动">canal入门篇：1.介绍&amp;配置&amp;启动</a>。</p><blockquote><p><a href="https://github.com/shoumingchilun/API_OPEN_SPACE_CANAL">github仓库链接</a></p></blockquote><h1 id="canalAPI讲解"><a href="#canalAPI讲解" class="headerlink" title="canalAPI讲解"></a>canalAPI讲解</h1><p>本文将使用SpringBoot框架搭建一个应用，通过canal获得数据库的更改消息，并将发生变更的实体同步更新到Redis中。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>使用canal的好处：</p><ol><li><strong>透明性与低侵入</strong>：使用 Canal 通常不需要对既有业务逻辑进行大规模改造，因为它作为独立的服务组件，可以透明地监听和处理数据库的变化，将更新事件推送给相应的缓存系统，实现数据同步，降低了对业务代码的入侵性。</li><li><strong>扩展性与灵活性</strong>：Canal 支持多种数据源以及不同的消费方式，可以根据实际需求构建灵活的消息处理和分发机制。它可以与各种消息队列或数据处理系统集成，实现复杂的数据同步和多级缓存更新。</li><li><strong>可靠性</strong>：由于 Canal 是基于 MySQL 的主从复制协议设计的，它继承了数据库层面的数据可靠性保障。同时，消息投递失败时（未进行ACK）可以通过重试机制确保最终一致性，而且可以支持幂等处理，避免重复消费造成的问题。</li></ol><h2 id="类说明"><a href="#类说明" class="headerlink" title="类说明"></a>类说明</h2><h3 id="canal-Client"><a href="#canal-Client" class="headerlink" title="canal Client"></a>canal Client</h3><p>先介绍一下canal Client相关的一些配置类：</p><ul><li><strong>ClientIdentity</strong>：canal client和server交互之间的身份标识。</li><li><strong>CanalConnector</strong>：SimpleCanalConnector&#x2F;ClusterCanalConnector是两种connector的实现。simple针对的是简单的ip直连模式，cluster针对多ip的模式，可依赖CanalNodeAccessStrategy进行failover控制。（确保 Canal 在发生故障时能够无缝地切换到备份节点或者恢复服务，暂时不关注）</li><li><strong>CanalNodeAccessStrategy</strong>：SimpleNodeAccessStrategy&#x2F;ClusterNodeAccessStrategy是两种failover的实现。simple针对给定的初始ip列表进行failover选择，cluster基于zookeeper上的cluster节点动态选择正在运行的canal server。（暂时不关注）</li></ul><p>然后即可从<code>connector</code>中通过<code>get</code>&#x2F;<code>getWithoutAck</code>获得的<code>Message</code>的这个类，该类主要的功能就是使用<code>getEntries</code>函数获得包装好的<code>List&lt;Entry&gt;</code>对象。</p><h3 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h3><p>介绍一下Entry、RowChange、rowdata、column的概念。</p><ol><li><strong>Entry</strong>：Entry 是 Canal 解析 MySQL Binlog 后产生的基本单元，它<strong>代表了Binlog中的一条记录</strong>。每个Entry对象对应了MySQL数据库的一个事务或一个GTID事件（如果启用了GTID）。Entry包含了事务的相关元数据如执行时间、事务ID等，以及实际的数据库更改内容。</li><li><strong>RowChange</strong>： RowChange 是更进一步封装的事件变更细节，它描述了<strong>一次数据库表级别的行级别数据变化</strong>。一个RowChange对象对应binlog中的一次行变更事件，它可以包含多行数据的插入、更新或删除操作。</li><li><strong>RowData</strong>：RowData 表示<strong>单行数据的变更内容</strong>。对于RowChange中的每一次行操作（insert&#x2F;update&#x2F;delete），都会有对应的RowData对象来具体描述变更前后的列值信息。<ol><li>RowData有两个重要的字段：<ul><li>beforeColumnsList：在UPDATE或DELETE事件中，存储的是变更前的列数据集合。</li><li>afterColumnsList：在INSERT或UPDATE事件中，存储的是变更后的列数据集合。</li></ul></li><li>对于INSERT、UPDATE和DELETE事件，其表现形式不同：<ul><li>INSERT事件：RowData会包含这一行插入后的所有列值。</li><li>UPDATE事件：RowData包含两部分，即变更前的列值（beforeColumns）和变更后的列值（afterColumns）。</li><li>DELETE事件：RowData仅包含被删除前的那一行的所有列值。</li></ul></li></ol></li><li><strong>Column</strong>：Column 对象更加细致地表示了数据库表中某一列的数据变化情况，包括列名、列值、是否为空、是否是主键等属性信息。在RowData的beforeColumns和afterColumns列表中，每一项就是一个Column对象。</li></ol><h3 id="解析Entry"><a href="#解析Entry" class="headerlink" title="解析Entry"></a>解析Entry</h3><p>在获得一个<code>List&lt;Entry&gt;</code>后，我们需要对其中每个条目进行逐步解析：</p><ol><li><strong>判断类型</strong>：通过调用<code>getEntryType()</code>获得该<code>Entry</code>的<code>EntryType</code>，常见的类型有**事务开始(BEGIN)、事务结束(COMMIT)、行数据(ROWDATA)**等。</li><li>对于 <strong>ROWDATA 类型</strong>的 Entry，可以从中提取 <strong>RowChange 对象</strong>（包含了数据库行级别的变更详情）：通过调用<code>CanalEntry.RowChange.parseFrom(entry.getStoreValue())</code>获得 RowChange 对象。</li><li>获得 RowChange 对象后，可根据<code>EventType</code>获得具体操作的类型，如<code>INSERT</code>、<code>UPDATE</code>、<code>ALTER</code>等，如： <code>rowChage.getEventType()==EventType.DELETE</code>。</li><li>可从 <code>RowChange</code> 对象中获得 <code>RowData</code> 对象，并从后者中获得一行数据变更前的状态和变更后的状态，再从中获得单独的<code>column</code>进行解析： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (RowData rowData : rowChage.getRowDatasList()) &#123;<br>    rowData.getBeforeColumnsList().forEach(column -&gt; System.out.println(column.getName() + <span class="hljs-string">&quot; : &quot;</span> + column.getValue()));<br>    rowData.getAfterColumnsList().forEach(column -&gt; System.out.println(column.getName() + <span class="hljs-string">&quot; : &quot;</span> + column.getValue()));<br></code></pre></td></tr></table></figure></li></ol><h1 id="实现双写一致性"><a href="#实现双写一致性" class="headerlink" title="实现双写一致性"></a>实现双写一致性</h1><p>（省略启动类）</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>需要添加Springboot和连接Redis、canal的依赖。<br>pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.otter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>canal.client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="注册CanalConnector-Bean"><a href="#注册CanalConnector-Bean" class="headerlink" title="注册CanalConnector Bean"></a>注册CanalConnector Bean</h2><p>使用配置文件注入依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CanalConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mycanal.hostname&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String hostname;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mycanal.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer port;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mycanal.destination&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String destination;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mycanal.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mycanal.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CanalConnector <span class="hljs-title function_">createCanalConnector</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> CanalConnectors.newSingleConnector(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(hostname,<br>                port), destination, username, password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件application.yml：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">mycanal:</span><br><span class="hljs-symbol">  hostname:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.146</span><span class="hljs-number">.132</span><br><span class="hljs-symbol">  port:</span> <span class="hljs-number">11111</span><br><span class="hljs-symbol">  destination:</span> example<br><span class="hljs-symbol">  username:</span><br><span class="hljs-symbol">  password:</span><br></code></pre></td></tr></table></figure><h2 id="设置Redis转码方式"><a href="#设置Redis转码方式" class="headerlink" title="设置Redis转码方式"></a>设置Redis转码方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(LettuceConnectionFactory lettuceConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br><br>        redisTemplate.setConnectionFactory(lettuceConnectionFactory);<br>        <span class="hljs-comment">//设置key序列化方式string</span><br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        <span class="hljs-comment">//设置value的序列化方式json，使用GenericJackson2JsonRedisSerializer替换默认序列化</span><br>        redisTemplate.setValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>());<br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>());<br><br>        redisTemplate.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>补充：如果使用GenericJackson2JsonRedisSerializer充当序列化&#x2F;反序列化工具的话<code>redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());</code>，请保证各组件内类名一致（包含包路径）。</p></blockquote><h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><p>Redis中value对应的实体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfaceAccess</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String accesskey;<br>    <span class="hljs-keyword">private</span> Integer verifyType;<br>    <span class="hljs-keyword">private</span> String secretkey;<br>    <span class="hljs-keyword">private</span> BigDecimal remainingAmount;<br>    <span class="hljs-keyword">private</span> Integer remainingTimes;<br>    <span class="hljs-keyword">private</span> Long interfaceId;<br>    <span class="hljs-keyword">private</span> Long userid;<br>    <span class="hljs-keyword">private</span> Integer callTimes;<br>    <span class="hljs-keyword">private</span> Integer failedCallTimes;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-keyword">private</span> Integer isDeleted;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设计Redis服务接口并实现"><a href="#设计Redis服务接口并实现" class="headerlink" title="设计Redis服务接口并实现"></a>设计Redis服务接口并实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RedisService</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ACCESS_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;InterfaceAccess_&quot;</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateInterfaceAccess</span><span class="hljs-params">(InterfaceAccess interfaceAccess)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteInterfaceAccess</span><span class="hljs-params">(InterfaceAccess interfaceAccess)</span>;<br>&#125;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RedisService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, InterfaceAccess&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateInterfaceAccess</span><span class="hljs-params">(InterfaceAccess interfaceAccess)</span> &#123;<br>        redisTemplate.opsForValue().set(RedisService.ACCESS_PREFIX + interfaceAccess.getAccesskey(), interfaceAccess, <span class="hljs-number">2</span>, TimeUnit.MINUTES);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteInterfaceAccess</span><span class="hljs-params">(InterfaceAccess interfaceAccess)</span> &#123;<br>        redisTemplate.delete(RedisService.ACCESS_PREFIX + interfaceAccess.getAccesskey());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建CanalMessageHandler类"><a href="#创建CanalMessageHandler类" class="headerlink" title="创建CanalMessageHandler类"></a>创建CanalMessageHandler类</h2><p>使用ApplicationRunner接口实现容器启动后开始监听。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CanalMessageHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationRunner</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> CanalConnector connector;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisService redisService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(ApplicationArguments args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">batchSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>        <span class="hljs-comment">//空闲空转计数器</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">emptyCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connector.connect();<br>            <span class="hljs-comment">// 监听api_open_platform数据库下的interface_access表</span><br>            connector.subscribe(<span class="hljs-string">&quot;api_open_platform.interface_access&quot;</span>);<br>            <span class="hljs-comment">// 回滚到未进行 ack 的地方，下次fetch的时候，可以从最后一个没有 ack 的地方开始拿</span><br>            connector.rollback();<br>            <span class="hljs-comment">// 如果3600s内没有监听到更改，则报错并停止运行</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">totalEmptyCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">3600</span>;<br>            <span class="hljs-keyword">while</span> (emptyCount &lt; totalEmptyCount) &#123;<br>                System.out.println(<span class="hljs-string">&quot;正在监听canal Server: &quot;</span> + System.currentTimeMillis());<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> connector.getWithoutAck(batchSize); <span class="hljs-comment">// 获取指定数量的数据</span><br>                <span class="hljs-type">long</span> <span class="hljs-variable">batchId</span> <span class="hljs-operator">=</span> message.getId();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> message.getEntries().size();<br>                <span class="hljs-keyword">if</span> (batchId == -<span class="hljs-number">1</span> || size == <span class="hljs-number">0</span>) &#123;<br>                    emptyCount++;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//计数器重新置零</span><br>                    emptyCount = <span class="hljs-number">0</span>;<br>                    handlerMessage(message.getEntries());<br>                &#125;<br>                connector.ack(batchId); <span class="hljs-comment">// 提交确认</span><br>                <span class="hljs-comment">// connector.rollback(batchId); // 处理失败, 回滚数据</span><br>            &#125;<br>            log.error(<span class="hljs-string">&quot;已经监听了&quot;</span> + totalEmptyCount + <span class="hljs-string">&quot;秒，无任何消息，请检查canal是否正常运行或连接是否成功......&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            connector.disconnect();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handlerMessage</span><span class="hljs-params">(List&lt;Entry&gt; entrys)</span> &#123;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现handlerMessage方法"><a href="#实现handlerMessage方法" class="headerlink" title="实现handlerMessage方法"></a>实现handlerMessage方法</h2><p>对消息进行处理，并通过调用<code>RedisService</code>的方法同步到redis。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handlerMessage</span><span class="hljs-params">(List&lt;Entry&gt; entrys)</span> &#123;<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Entry entry : entrys) &#123;<br>        <span class="hljs-comment">//如果不是ROWDATA，则忽略</span><br>        <span class="hljs-keyword">if</span> (entry.getEntryType() != EntryType.ROWDATA) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">RowChange</span> <span class="hljs-variable">rowchange</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取变更的row数据</span><br>            rowchange = CanalEntry.RowChange.parseFrom(entry.getStoreValue());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;解析Entry获得RowChange失败：&quot;</span> + entry, e);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//获取变动类型</span><br>        <span class="hljs-type">EventType</span> <span class="hljs-variable">eventType</span> <span class="hljs-operator">=</span> rowchange.getEventType();<br>        log.info(String.format(<span class="hljs-string">&quot;================binlog[%s:%s] , name[%s,%s] , eventType : %s&quot;</span>,<br>                entry.getHeader().getLogfileName(), entry.getHeader().getLogfileOffset(),<br>                entry.getHeader().getSchemaName(), entry.getHeader().getTableName(), eventType));<br><br>        <span class="hljs-keyword">for</span> (RowData rowData : rowchange.getRowDatasList()) &#123;<br>            <span class="hljs-comment">//由于使用逻辑删除，delete实现方式为将is_deleted属性设置为1，所以删除逻辑写在update中</span><br>            <span class="hljs-keyword">if</span> (eventType == EventType.UPDATE) &#123;<br>                <span class="hljs-comment">//可使用该方式查看各个index对应的列名是什么</span><br>                <span class="hljs-comment">//rowData.getAfterColumnsList().stream().forEach(column -&gt; &#123;</span><br>                <span class="hljs-comment">//    System.out.println(column.getName());</span><br>                <span class="hljs-comment">//&#125;);</span><br>                <span class="hljs-type">InterfaceAccess</span> <span class="hljs-variable">interfaceAccess</span> <span class="hljs-operator">=</span> parseRowDateIntoInterfaceAccess(rowData);<br>                <span class="hljs-keyword">if</span> (interfaceAccess.getIsDeleted() == <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-comment">//说明已经删除，需要同步删除</span><br>                    redisService.deleteInterfaceAccess(interfaceAccess);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//说明未删除，需要同步更新</span><br>                    redisService.updateInterfaceAccess(interfaceAccess);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> InterfaceAccess <span class="hljs-title function_">parseRowDateIntoInterfaceAccess</span><span class="hljs-params">(RowData rowData)</span> &#123;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    <span class="hljs-type">InterfaceAccess</span> <span class="hljs-variable">interfaceAccess</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterfaceAccess</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">accesskey</span> <span class="hljs-operator">=</span> rowData.getAfterColumns(<span class="hljs-number">0</span>).getValue();<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">verifyType</span> <span class="hljs-operator">=</span> Integer.parseInt(rowData.getAfterColumns(<span class="hljs-number">1</span>).getValue());<br>    <span class="hljs-comment">//允许为空的参数如果为空，则column.getValue().equals(&quot;&quot;)</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">secretkey</span> <span class="hljs-operator">=</span> rowData.getAfterColumns(<span class="hljs-number">2</span>).getValue().equals(<span class="hljs-string">&quot;&quot;</span>) ? <span class="hljs-literal">null</span> : rowData.getAfterColumns(<span class="hljs-number">2</span>).getValue();<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">remainingAmount</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (!rowData.getAfterColumns(<span class="hljs-number">3</span>).getValue().equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        remainingAmount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(rowData.getAfterColumns(<span class="hljs-number">3</span>).getValue());<br>    &#125;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">remainingTimes</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (!rowData.getAfterColumns(<span class="hljs-number">4</span>).getValue().equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        remainingTimes = Integer.parseInt(rowData.getAfterColumns(<span class="hljs-number">4</span>).getValue());<br>    &#125;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">interfaceId</span> <span class="hljs-operator">=</span> Long.parseLong(rowData.getAfterColumns(<span class="hljs-number">5</span>).getValue());<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userid</span> <span class="hljs-operator">=</span> Long.parseLong(rowData.getAfterColumns(<span class="hljs-number">6</span>).getValue());<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">callTimes</span> <span class="hljs-operator">=</span> Integer.parseInt(rowData.getAfterColumns(<span class="hljs-number">7</span>).getValue());<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">failedCallTimes</span> <span class="hljs-operator">=</span> Integer.parseInt(rowData.getAfterColumns(<span class="hljs-number">8</span>).getValue());<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">createTime</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">updateTime</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        createTime = sdf.parse(rowData.getAfterColumns(<span class="hljs-number">9</span>).getValue());<br>        updateTime = sdf.parse(rowData.getAfterColumns(<span class="hljs-number">10</span>).getValue());<br>    &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>        log.error(<span class="hljs-string">&quot;解析日期失败：&quot;</span>, e);<br>    &#125;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">isDeleted</span> <span class="hljs-operator">=</span> Integer.parseInt(rowData.getAfterColumns(<span class="hljs-number">11</span>).getValue());<br>    interfaceAccess.setAccesskey(accesskey);<br>    interfaceAccess.setVerifyType(verifyType);<br>    interfaceAccess.setSecretkey(secretkey);<br>    interfaceAccess.setRemainingAmount(remainingAmount);<br>    interfaceAccess.setRemainingTimes(remainingTimes);<br>    interfaceAccess.setInterfaceId(interfaceId);<br>    interfaceAccess.setUserid(userid);<br>    interfaceAccess.setCallTimes(callTimes);<br>    interfaceAccess.setFailedCallTimes(failedCallTimes);<br>    interfaceAccess.setCreateTime(createTime);<br>    interfaceAccess.setUpdateTime(updateTime);<br>    interfaceAccess.setIsDeleted(isDeleted);<br>    <span class="hljs-keyword">return</span> interfaceAccess;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="1-数据库更新后："><a href="#1-数据库更新后：" class="headerlink" title="1. 数据库更新后："></a>1. 数据库更新后：</h3><p>标准输出：</p><blockquote><p>正在监听canal Server: 1709812780346<br>2024-03-07 19:59:40.394  INFO 26712 — [           main] c.c.a.canal.handler.CanalMessageHandler  : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;binlog[mysql-bin.000354:6832] , name[api_open_platform,interface_access] , eventType : UPDATE<br>2024-03-07 19:59:40.425  INFO 26712 — [           main] c.c.a.canal.handler.CanalMessageHandler  : 在redis中同步f607abdc-c80e-4255-81d3-37ea6fe355b4<br>正在监听canal Server: 1709812780425<br>正在监听canal Server: 1709812781481</p></blockquote><p>查询redis：<br><img src="/2024/03/06/backend/middleware/canal/canal_MySQL&Redis/redis-update.png"></p><h3 id="2-数据库删除后"><a href="#2-数据库删除后" class="headerlink" title="2. 数据库删除后"></a>2. 数据库删除后</h3><p>标准输出：</p><blockquote><p>正在监听canal Server: 1709812979293<br>正在监听canal Server: 1709812980340<br>2024-03-07 20:03:00.383  INFO 26712 — [           main] c.c.a.canal.handler.CanalMessageHandler  : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;binlog[mysql-bin.000354:7413] , name[api_open_platform,interface_access] , eventType : UPDATE<br>2024-03-07 20:03:00.384  INFO 26712 — [           main] c.c.a.canal.handler.CanalMessageHandler  : 从redis中删除f607abdc-c80e-4255-81d3-37ea6fe355b4<br>正在监听canal Server: 1709812980384</p></blockquote><p>查询redis：<br><img src="/2024/03/06/backend/middleware/canal/canal_MySQL&Redis/redis-delete.png"></p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>中间件</category>
      
      <category>canal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>canal</tag>
      
      <tag>双写一致性</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《区块链：技术驱动金融》摘录（概念目录）</title>
    <link href="/2024/03/03/Web3/readingNotes/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/"/>
    <url>/2024/03/03/Web3/readingNotes/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/</url>
    
    <content type="html"><![CDATA[<p>本文将介绍一些区块链领域的技术概念，充当一份技术目录以供备用。</p><h1 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>哈希函数具有以下特性：</p><ul><li><strong>碰撞阻力（Collision Resistance）</strong>：避免存在x，y，使H(x)&#x3D;H(y)<ul><li>对于任意两个不同的输入x和y，找到满足H(x) &#x3D; H(y)的x和y在计算上应该是非常困难的。理想的哈希函数应保证对于所有可能的输入，其输出的哈希值都各不相同，但实际上因为输出空间有限而输入空间无限，理论上总是存在碰撞的可能，但在实际应用中，一个好的哈希函数设计应当使寻找碰撞的概率变得极低。</li><li>特性应用：<strong>信息摘要（Message Digests）</strong>——在数据完整性校验中，哈希函数被用来生成一段数据的“数字指纹”，如MD5或SHA系列算法。当文件传输后，接收方可以通过重新计算哈希值并与发送方提供的摘要对比，确认数据在传输过程中是否被篡改。若摘要匹配，则说明数据未变；如果不匹配，则可能存在数据损坏或被恶意篡改。</li></ul></li><li><strong>隐秘性（Pre-image Resistance &#x2F; One-wayness）</strong>：y&#x3D;H(x)，不可通过y推出x<ul><li>隐秘性是指给定一个哈希值y，找到任何原输入x使得y &#x3D; H(x)在计算上是不可能或极其困难的。这体现了哈希函数的单向性，即从输出反推输入几乎不可能。</li><li>特性应用：<strong>承诺（Commitment Schemes）</strong> ——在密码学中，哈希函数可用于构建承诺方案，一方可以在不暴露具体值的情况下对某个秘密值做出承诺，并在以后揭示该值时证明承诺的有效性。例如，在零知识证明中，一个参与者可以提前提交一个哈希值作为承诺，后续再公开原始数据，其他人可以通过计算哈希验证其一致性，但在此之前无法猜出原始数据。</li></ul></li><li><strong>谜题友好（Puzzle-Friendliness 或 Puzzle-freeness）</strong>：使H(k||x)&#x3D;y成立的x无法在比2^n小很多时间内找到<ul><li>（该特性主要应用于比特币挖矿中）</li><li>谜题友好通常指的是哈希函数在特定条件下能够生成难以预先计算但易于验证结果的问题，即所谓的“工作量证明（Proof of Work, PoW）”。这种情况下，要求找到一个输入x（通常带有额外的随机数k）使得H(k || x) &#x3D; y成立的x在计算资源受限的情况下（比如在比穷举搜索所需时间小很多的时间内）是难以找到的。</li><li>特性应用：<strong>搜索谜题（Cryptographic Puzzles or Hashcash）</strong>——在比特币挖矿中，矿工竞相解决一个基于哈希难题的PoW问题，寻找一个nonce（k）使得区块头的哈希值小于某个目标阈值。这一特性确保了挖矿过程需要大量计算资源投入，从而达到区块链系统的去中心化共识机制的安全性。只有成功解决谜题的矿工才能添加新区块并获得奖励。</li></ul></li></ul><blockquote><p>谜题友好可以通俗地理解为——我很难找到符合要求的hash输入来发布一个区块并获得奖励（需要大量枚举），但是我可以很方便地验证一个新发布区块对应的hash是否是合理的，并以此判定对方是否应该获得奖励。</p></blockquote><p>目前主流使用的哈希函数：<strong>SHA-256</strong>。</p><h2 id="哈希指针"><a href="#哈希指针" class="headerlink" title="哈希指针"></a>哈希指针</h2><p><strong>概念：哈希指针是一种数据结构。</strong><br>简单来说，哈希指针是一个指向数据存储位置及其位置数据的哈希值的指针。一个普通的指针可以告诉你数据存储的位置，哈希指针不但可以告诉你数据存储的位置，并且还可以给你一种方式，让你<strong>验证数据没有被篡改过</strong>。</p><p><strong>常用应用：</strong></p><ul><li><strong>区块链</strong>：在区块链中，每个区块包含了区块头和区块体两部分。区块头包含了一个哈希指针，它指向的是前一个区块的哈希值。这样形成的链式结构确保了区块之间的<strong>顺序性和历史不可篡改性</strong>。<strong>如果有人试图修改某个过去的区块数据，那么该区块的哈希值会变化，并因此导致后续所有区块的哈希值都需要相应改变，因为它们都包含了前一个区块的哈希指针。</strong>这要求攻击者必须重新计算整个链条的哈希值，而这在比特币等具有足够工作量证明机制的区块链中几乎是不可能的。<br><img src="/2024/03/03/Web3/readingNotes/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/%E5%93%88%E5%B8%8C%E6%8C%87%E9%92%88_%E5%8C%BA%E5%9D%97%E9%93%BE.png"></li><li><strong>梅克尔树</strong>：当任意一笔交易数据发生变化时，该交易所在叶子节点的哈希值会变，进而影响到整棵树的根哈希值。由于区块头包含了这一梅克尔根，所以<strong>任何对交易数据的篡改都会立刻反映在区块哈希值的变化</strong>上，从而<strong>保护了整个区块链账本的完整性和一致性</strong>。另外梅克尔树还应用在轻客户端验证等场景中。<br><img src="/2024/03/03/Web3/readingNotes/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/%E5%93%88%E5%B8%8C%E6%8C%87%E9%92%88_%E6%A2%85%E5%85%8B%E5%B0%94%E6%A0%91.png"></li></ul><h1 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h1><p>数字签名方案由以下三个算法构成:</p><ol><li>$(sk,pk):&#x3D;generateKeys(keysize)$<br><code>generateKeys</code>方法把<code>keysize</code>作为输入，来产生一对公钥和私钥。私钥<code>sk</code>被安全保存，并用来签名一段消息；公钥<code>pk</code>是人人都可以找到的，拿到它，就可以用来验证你的签名。</li><li>$sig:&#x3D;sign(sk,message)$<br>签名过程是把一段消息和私钥作为一个输入，对于消息输出是签名。</li><li>$isValid:&#x3D;verify(pk,message, sig)$<br>验证过程是通过把一段消息和签名消息与公钥作为输入，如果返回的结果是真，证明签名属实；如果返回的结果为假，证明签名消息为假。</li></ol><p>我们要求以下两个性质有效:</p><ul><li>有效签名可以通过验证，即<br>$$verify(pk,message,sign(sk,message))&#x3D;&#x3D;true$$</li><li>签名不可伪造</li></ul><p>解释：</p><ul><li>发送方（签名者）拥有一个公钥和一个私钥。<strong>公钥任何人都可以知道，私钥则保密不公开。</strong></li><li>当发送方要签署一个文档时，首先使用单向散列函数（如SHA-256）将文档转换成固定长度的<strong>摘要</strong>。</li><li>发送方接着<strong>使用自己的私钥对该摘要进行加密</strong>，生成的密文就是<strong>数字签名</strong>。</li><li>接收方收到原始文档和数字签名后，<strong>使用发送方的公钥来解密签名</strong>，得到摘要A。</li><li>同时，接收方也会计算接收到的文档本身的散列值，得到另一个摘要B。</li><li>如果摘要A与摘要B匹配，则说明文档在传输过程中<strong>未被篡改</strong>，并且确实是<strong>由拥有对应私钥的人签署</strong>的。</li></ul><p>流程：</p><ol><li>对消息生成一个唯一且不变的摘要。</li><li>使用私钥对摘要进行加密形成签名。</li><li>收件人使用公钥解密签名并重新计算消息摘要。</li><li>比较两次计算出的摘要，如果相同，则确认签名有效，消息未被篡改且确信来自于拥有相应私钥的发送方。</li></ol><h1 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h1><p><strong>去中心化</strong>：去中心化是一种网络架构或系统<strong>设计原则</strong>，其中权力、功能和数据不在单一的中心点或权威机构手中，而是分散在网络中的各个节点之间。<strong>在去中心化的系统中，每个节点都可以作为网络的一部分参与到数据的处理、存储和验证过程中，而不是依赖单一的中心服务器。</strong>去中心化的目的是为了提高系统的鲁棒性、透明度和防篡改能力，减少单点故障的可能性，并增强用户的数据自主权和隐私保护。</p><p><strong>分布式共识</strong>： 分布式共识则是去中心化系统中用于<strong>保证所有参与节点对于系统状态达成一致同意的关键机制</strong>。在区块链技术中，分布式共识算法确保了<strong>即便在网络中存在不可靠或者恶意的节点，其余的节点依然可以通过特定的规则和算法就交易的有效性、区块的顺序以及其他关键状态达成一致意见。</strong>这种共识机制是去中心化系统能够正常运作并保持数据完整性的基石。</p><p>一个去中心化网络，通常需要借助分布式共识机制来确保网络中所有参与者能基于同样的规则正确地更新和验证系统状态，共同维护一个可靠的、无需信任中介的公共账本。</p><h2 id="分布式共识协议"><a href="#分布式共识协议" class="headerlink" title="分布式共识协议"></a>分布式共识协议</h2><p>在一个<strong>分布式共识协议</strong>中，特别是在面对有潜在故障或恶意节点的环境（比如拜占庭将军问题的场景），有两个核心属性是用来保证系统正确性和安全性的：</p><ul><li><strong>输入值的中止须经所有诚实节点来确定</strong>： 这意味着在分布式系统中的决策过程不是任意节点单方面决定的，即使是有故障或恶意节点试图干扰系统，最终是否接受一个特定的输入值作为共识结果，必须经过所有“诚实”（也称为“正确”或“非拜占庭”）节点的确认或认可。换句话说，<strong>只有当大多数（通常是超过半数）诚实节点达成一致同意的情况下，一个输入值才能被认为是被系统接受了</strong>，并且这个共识过程将在有限时间内结束，即达成可终止性。</li><li><strong>这个输入值必须由诚实节点来生成</strong>： 这条属性指出，最终被选为共识输出的那个输入值，应当来源于系统中诚实节点的提议或计算。在实际的分布式共识算法中，这可能意味着<strong>诚实节点提交的提案将优先被处理，或者通过某种机制确保即使在恶意节点的存在下，最终被采纳的也是诚实节点提供的有效信息</strong>。这样设计的目的在于防止恶意节点通过伪造信息影响系统共识结果的真实性。</li></ul><p>这两个属性结合在一起，旨在构建一个即使在部分节点出现故障或有意作恶情况下，仍能确保所有诚实节点对某一特定状态达成一致的分布式系统。这样的系统能够在各种不利条件下保持稳定运行，并确保其记录的数据或状态更新是可靠和安全的。在区块链技术中，这类分布式共识协议尤为重要，例如PoW（工作量证明）、PoS（权益证明）以及BFT（拜占庭容错）类算法都是用来实现这一目标的不同方式。</p><h2 id="比特币共识算法"><a href="#比特币共识算法" class="headerlink" title="比特币共识算法"></a>比特币共识算法</h2><p>这个算法的简化假设是，可以随意选择一个节点，这些节点都不会受到女巫攻击的影响。</p><blockquote><p>女巫攻击（Sybil Attack）是一种在网络环境中，特别是点对点（P2P）网络和区块链系统中常见的安全威胁。这种攻击方式是指攻击者通过创建并控制多个虚假的身份、账号或节点，假装成多个独立的网络参与者，以期获得对该网络的不当影响力和控制权。在实际中，女巫攻击等安全问题会通过经济成本（如挖矿成本）和其他网络层的防御措施得以缓解。</p></blockquote><p>实际版：</p><ol><li><strong>交易传播</strong>：每当有新的比特币交易产生时，这笔交易会被立即广播给比特币网络中的所有节点。这些节点相当于网络中的各个参与者，负责接收、验证和传递交易信息。</li><li><strong>交易打包</strong>：每个节点在接收到新的交易后，会将这些交易放入一个新的区块中等待验证和确认。一个区块内包含了多笔交易记录。</li><li><strong>区块提议</strong>：在比特币的实际共识机制——工作量证明（Proof of Work，PoW）中，节点通过竞争的方式尝试解决一个复杂的数学难题来争取新区块的生成权。这里的简化版本假设每个回合有一个随机节点（实际上是在PoW中通过计算能力竞争获胜的节点）有权提出一个新区块。</li><li><strong>区块验证</strong>：当某个节点广播它所提议的新区块时，网络中的其他节点会对区块内的所有交易进行合法性检查，包括但不限于检查交易是否有正确的数字签名、交易资金来源是否有效、交易金额是否足够等等。只有当区块中的所有交易都被认为是正当合法的，其他节点才会接受这个新区块。</li><li><strong>链接区块与共识</strong>：一旦节点确认新区块合法，它们会将此区块的哈希值加入到自己即将创建的新区块的前一块哈希列表中，形成了区块链的链式结构。这意味着节点通过对新区块的引用（即在其后的区块中包含前一块的哈希值）表达对之前区块内容的认可和接受。</li></ol><p>简化版：</p><ol><li>新的交易被广播到所有节点上。</li><li>每个节点都将新的交易放进一个区块。</li><li>在每个回合，一个随机的节点可以广播它的区块。</li><li>其他节点可以选择接受这个区块，前提是如果区块里的交易都是正当的（有真的签名）。</li><li>节点们可以把以上区块的哈希值放进自己的区块里，以此来表示它们对那个新区块的认可。<blockquote><p>简化版描述忽略了比特币实际采用的工作量证明（PoW）中“挖矿”的竞争过程。</p></blockquote></li></ol><h1 id="奖励机制与工作量证明"><a href="#奖励机制与工作量证明" class="headerlink" title="奖励机制与工作量证明"></a>奖励机制与工作量证明</h1><h2 id="奖励机制"><a href="#奖励机制" class="headerlink" title="奖励机制"></a>奖励机制</h2><p>比特币的奖励机制是鼓励矿工积极参与网络安全维护和交易验证的关键部分。每当一个矿工成功解决了一个区块的工作量证明难题，并且网络中的其他节点验证了该区块的有效性后，该矿工便可以将新区块链接到区块链上，并获取以下两个类型的奖励：</p><ul><li><strong>区块奖励</strong>：最初4年每个区块50个比特币，每4年减半（210000个区块）。</li><li><strong>交易费</strong>：交易输出值小于输入值，差值作为交易费给予区块创造者。</li></ul><p>只要挖矿奖励&gt;挖矿成本，矿工就能赚钱。<br>挖矿奖励&#x3D;区块奖励+交易费<br>挖矿成本&#x3D;硬件成本+运营成本</p><h2 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h2><p>在比特币网络中，工作量证明是一种共识机制，用于决定谁有权将新的区块添加到区块链上，并因此获得新区块产生的新币奖励以及交易费。PoW要求网络中的参与者（通常称为矿工）使用特殊的硬件设备执行复杂数学运算，即散列运算，以寻找满足特定条件的随机数（Nonce）。这个条件表现为找到一个Nonce使得区块头的哈希值小于或等于某个目标值，这个过程也被称为“挖矿”。</p><p>矿工们不断地尝试不同的Nonce，竞争成为第一个解决这一难题的人。由于哈希函数的性质——单向不可预测和难以逆推，唯一有效的方法是通过暴力尝试来找到正确的Nonce。这意味着较大的计算力意味着更高的概率能够快速找到正确答案。对于某个特定的矿工，发现下一区块的平均时间&#x3D;10分钟&#x2F;占全部计算能力的比例。</p><p>哈希函数解密的特点：</p><ul><li><strong>难于计算</strong>：有一定难度，计算量超大</li><li><strong>可参数化成本：难度可调整</strong>，保证区块产生时间间隔为10分钟左右，每2016个区块调整一次</li><li><strong>易于证明</strong>：计算结果易于检验</li></ul><h2 id="良性循环"><a href="#良性循环" class="headerlink" title="良性循环"></a>良性循环</h2><p>另一个微妙的概念是<strong>自举过程（bootstrapping）</strong>。<br>比特币系统里三个不同的想法——区块链的安全性、挖矿生态系统的健康程度，以及货币的价值在相互作用。<br>我们显然希望区块链安全，这样比特币才能成为一种可行的货币。想要区块链安全，就要保证黑客不能倾覆共识过程。这反过来意味着，一个黑客不能够制造一大堆挖矿节点来占据50%以上的新区块生成。<br>但如何实现这一点呢？前提条件是有一个健康的挖矿生态系统，其中大部分节点是诚实的、遵守协议的。但健康的挖矿生态系统的前提条件又是什么呢——我们什么时候可以保证大多数矿工会把大多数计算能力运用到解哈希谜题的竞争中呢？好吧，只有在比特币价位高时他们才会这么做，因为他们收到的奖励是比特币而他们的花费都是美元。所以币的价值越高，矿工就越有动力这么做。<br>那如何保障币的价值又高又稳定呢？只有用户普遍相信区块链的安全性才会发生。如果他们认为网络随时会被攻击者颠覆，那比特币作为货币将一文不值。所以你可以看到区块链的安全性、挖矿生态系统的健康程度和货币的价值这三者之间相互依赖、相互作用的关系。</p><p><img src="/2024/03/03/Web3/readingNotes/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/%E8%89%AF%E6%80%A7%E5%BE%AA%E7%8E%AF.png"></p><p>因为这三者之间的循环依赖关系，其中一个的存在可以用另一个的存在推测出来。在比特币初创之时，这三者都不存在。除了中本聪自己，没有人在运行挖矿软件。比特币作为货币没有什么价值。事实上，因为没有很多人挖矿区块链也很不安全，任何人都可以轻易颠覆这个过程。</p><h1 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h1><p>在比特币中，一笔<strong>交易（Transaction）</strong>代表了一次价值转移的行为，即将一定数量的比特币从一个或多个地址转移到另一个或多个地址的过程。<strong>比特币交易是在去中心化的比特币网络中被创建、验证并最终记录在区块链上的数据结构单元。</strong></p><h2 id="交易程序段"><a href="#交易程序段" class="headerlink" title="交易程序段"></a>交易程序段</h2><p><img src="/2024/03/03/Web3/readingNotes/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/%E4%BA%A4%E6%98%93%E7%A8%8B%E5%BA%8F%E6%AE%B5.jpg"></p><ul><li><strong>元数据</strong>：存放一些内部处理的信息——交易的规模、输入的数量、输出的数量，还有此笔交易的哈希值，也就是这个交易独一无二的ID。我们可以用哈希指针指向这个ID。最后还有一个**锁定时间(lock_time)**（定义了交易最早可以被加入区块链的时间或区块高度，它可以防止交易过早被确认。）。</li><li><strong>输入</strong>：所有输入排成一个序列，每个输入的格式都是一样的。输入需要明确说明之前一笔交易的某个输出，因此它包括之前那笔交易的哈希值，使其成为指向那个特定交易的哈希指针。这个输入部分同时包括之前交易输出的索引和一个签名:我们必须有签名来证明我们有资格去支配这笔比特币。</li><li><strong>输出</strong>：所有输出也排成一个序列。每个输出的内容分成两部分。所有输出的金额之和必须小于或等于输入的金额之和。当输出的总金额小于输入总金额时，输出的总金额与输人的总金额的差额部分，就作为交易费支付给为这笔交易记账的矿工。</li></ul><h2 id="交易过程"><a href="#交易过程" class="headerlink" title="交易过程"></a>交易过程</h2><ul><li><strong>交易广播</strong>：当一个用户发起一笔比特币交易时，该交易会被广播到整个比特币网络。</li><li><strong>交易验证</strong>：<ul><li><strong>格式验证</strong>：每个节点接收到交易后，首先会检查交易数据结构的完整性，包括交易版本、输入数量和输出数量、交易金额是否为正数、交易签名是否存在且有效等。</li><li><strong>UTXO验证</strong>：然后，节点会查询本地的未花费交易输出（UTXO）数据库，验证交易的输入是否来自于有效的、未被花费过的交易输出，并确认交易发出者有足够的余额进行支付。</li><li><strong>脚本验证</strong>：比特币使用一种基于堆栈的非图灵完备脚本语言，对交易输入所引用的UTXO上的解锁脚本（ScriptSig）和UTXO本身锁定脚本（ScriptPubKey）进行执行，只有当脚本执行结果为真时，才能证明交易发起者有权花费这笔UTXO。</li></ul></li><li><strong>区块构建与挖矿</strong>：验证成功的交易将被节点打包进新的区块中，尝试通过工作量证明机制（Proof of Work）解决一个复杂的数学难题，成功解题的矿工将新区块链接到区块链上。</li><li><strong>区块链同步与确认</strong>：其他节点在接收到新区块后，会对区块中的所有交易再次进行上述验证，验证通过后将新区块添加至本地的区块链副本中，从而实现全网交易的一致性确认。</li></ul><h2 id="交易脚步验证过程中的堆栈状态"><a href="#交易脚步验证过程中的堆栈状态" class="headerlink" title="交易脚步验证过程中的堆栈状态"></a>交易脚步验证过程中的堆栈状态</h2><p>比特币交易的脚本验证过程涉及两个关键部分：<code>scriptSig</code> 和 <code>scriptPubKey</code>：</p><ul><li><strong>scriptSig (交易输入脚本)<strong>：scriptSig 是存储在比特币交易的输入部分的数据结构，它主要用于</strong>解锁之前交易的输出（即UTXO，Unspent Transaction Output）</strong>。当一个用户想要花费一个UTXO时，必须提供足够的证据来证明自己对该UTXO有合法的使用权。这种证据通常就是一个数字签名（由私钥生成），以及与之相关的公钥或其他数据。在比特币交易中，scriptSig 包含了解锁UTXO所需的信息，比如在最常见的一种交易类型P2PKH中，scriptSig包含的是交易发起者的数字签名和其对应的公钥。</li><li><strong>scriptPubKey (交易输出脚本&#x2F;锁定脚本)</strong>:scriptPubKey 存储在比特币交易的输出部分，它定义了<strong>如何花费这个输出，或者说定义了谁有权利花费这个输出</strong>。每个UTXO都有一个与其关联的scriptPubKey，只有当提供的scriptSig能成功执行并通过scriptPubKey设定的条件时，这笔UTXO才能被花费。同样以P2PKH为例，scriptPubKey通常包含一个OP_DUP、OP_HASH160、公钥哈希和OP_EQUALVERIFY、OP_CHECKSIG等一串操作码，以及一个公钥哈希值。这意味着只有提供与该哈希值相对应的公钥及其正确签名的人才能解锁并花费这笔资金。<blockquote><p><strong>UTXO</strong>：Unspent Transaction Output，在比特币和其他采用UTXO模型的加密货币系统中扮演着核心角色。UTXO是一种会计模式，用于跟踪和管理数字货币的所有权和价值转移。<br>在一个基于UTXO的系统中：<br>每一笔交易都有输出（outputs），这些输出包含了特定数量的数字货币，并且与一组规则（scriptPubKey）相关联，规定了谁能花费这些数字货币。<br>当用户发起一笔新的交易时，需要引用过去未被花费的交易输出作为新交易的输入（inputs）。这些未花费的交易输出就是UTXOs。<br>在花费UTXO时，发送方必须提供匹配的证明（scriptSig）来解锁UTXO，从而将其转移到新的所有者。<br>交易完成后，原始的UTXO会被标记为已花费，同时创建出新的UTXO给接收方。这样，数字货币的流动就像一系列的硬币从一个人转移到另一个人，每笔交易都会更新整个网络上的UTXO集合。<br>通过这种方式，UTXO模型确保了交易历史的透明性和安全性，并且能够防止双花问题的发生。整个比特币账本可以看作是UTXO的全局数据库，记录着所有现存、可花费的UTXO的状态。</p></blockquote></li></ul><p>在比特币交易中，每个输入包含两个内容：一个来自<strong>输出（scriptPubKey）</strong>，另一个是交易的<strong>签名（scriptSig）</strong>。当验证一个输入时，这两个脚本被组合在一起，并按照从左到右的顺序执行<strong>操作码（OP_CODEs）</strong>。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">scriptSig:</span> [signature] [<span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>]<br><span class="hljs-symbol">scriptPubKey:</span> OP_DUP OP_HASH160 [pubkey hash] OP_EQUALVERIFY OP_CHECKSIG<br><br>执行过程：<br><span class="hljs-number">1</span>. 先执行scriptSig的内容，[signature] 和 [<span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>] 分别压入堆栈。<br><span class="hljs-number">2</span>. 然后执行scriptPubKey，按顺序执行各个操作码：<br>   a. OP_DUP：复制堆栈顶的<span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>，堆栈变为 [signature, <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>, <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>]。<br>   b. OP_HASH160：计算<span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>的hash160值并压入堆栈，堆栈变为 [signature, <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>, pubkey_hash160]。<br>   c. [pubkey hash] 由scriptPubKey推入堆栈，堆栈变为 [signature, <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>, pubkey_hash160, pubkey_hash160_from_scriptPubKey]。<br>   d. OP_EQUALVERIFY：比较两个连续的pubkey_hash160是否相等，若相等则删除这两个项，堆栈变为 [signature]。<br>   e. OP_CHECKSIG：验证signature是否对应于<span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>对交易的有效签名，如果签名有效，堆栈剩下真值，否则脚本执行失败。<br><br>如果到最后堆栈中只剩下了真值（或空堆栈，取决于具体的脚本约定），则交易被认为通过了脚本验证。<br></code></pre></td></tr></table></figure><p><img src="/2024/03/03/Web3/readingNotes/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/%E5%A0%86%E6%A0%88%E7%8A%B6%E6%80%81.jpg"></p><h2 id="MULTISIG（多重签名）"><a href="#MULTISIG（多重签名）" class="headerlink" title="MULTISIG（多重签名）"></a>MULTISIG（多重签名）</h2><p>比特币的<strong>多重签名（Multisig）</strong>是指一种安全机制，它允许一个比特币交易在获得预先设定的多个密钥持有人的签名之后才能被确认和执行。多重签名技术增强了交易的安全性和资金管理灵活性，因为它要求多个独立实体共同授权才能动用资金。</p><p>在比特币的多重签名方案中，可以设置一个M-of-N的条件，这里的N代表参与交易的总签名数，而M则代表至少需要多少个签名使得交易生效。例如，2-of-3多重签名意味着三个不同的密钥持有者中有任意两个的签名就足以批准交易。</p><p>实施多重签名的具体流程包括：</p><ol><li>创建多重签名地址：首先，多个密钥持有者共同协商并创建一个多重签名地址。这个地址不是普通的公钥哈希地址，而是与一个特殊的锁定脚本（scriptPubKey）关联，该脚本描述了多重签名的规则（例如，“需要2个签名才能花费”）。</li><li>设置交易条件：当资金存入到这个多重签名地址时，实际上是以满足多重签名规则的形式锁定这些资金。</li><li>提取资金：当要从这个地址支出资金时，交易的输入部分（scriptSig）除了包含常规的解锁信息外，还需要附加足够数量的有效签名（达到M的数量），这些签名分别对应于N个密钥持有者中的部分或全部。</li><li>验证交易：网络中的每个节点在验证交易时，会检查交易输入中的多重签名数据是否符合该地址对应的多重签名条件，只有当验证通过后，这笔交易才会被接受并最终打包进区块确认。</li></ol><blockquote><p>比如：爱丽丝使用多重签名给鲍勃付款。爱丽丝并不直接付款给鲍勃，而是发起一个多重签名的交易，并规定：三个人中有两人签名之后，资金才能被支取。这三个人是爱丽丝、鲍勃与第三方仲裁员朱迪。朱迪负责调解可能发生的纠纷。因此，爱丽丝发起了一个2&#x2F;3的多重签名交易来付款，这个交易规定三个人中有两人签名之后，资金才能被支取这个交易被纳入区块链后，资金被第三方监管，这三个人中的任意两个人可以决定资金的去向。现在，鲍勃觉得可以给爱丽丝发货了，通常情况下，如果爱丽丝和鲍勃都是有诚信的，鲍勃会按照爱丽丝要求发货，爱丽丝收货之后和鲍勃共同签名，把资金转给鲍勃。由于三个人中有两人签名即可完成支付，此时由于没有任何争议，朱迪根本不需要参与；然而，如果出现纠纷，朱迪可以作为调解人，并根据实际情况加入进来，与爱丽丝或鲍勃之一共同签名以解决问题。和爱丽丝直接付款给鲍勃相比，第三方支付交易并不会更复杂，都只需在区块链里增加一笔交易即可。</p></blockquote><p>多重签名在实践中可以应用于多种场景，比如增加冷钱包的安全性（需要多人协作解锁）、提升企业内部财务管理的权限控制，或是增强联合投资账户的资金保护等。</p><h2 id="高效小额支付"><a href="#高效小额支付" class="headerlink" title="高效小额支付"></a>高效小额支付</h2><p>支付通道（Payment Channels）是一种在区块链之外进行交易的方法，它允许参与者在没有直接将每笔交易写入区块链的情况下进行多次交易。支付通道的目的是提高交易速度、降低交易成本，并减轻区块链网络的负担。<br>举例：<br>我们希望可以把每分钟的费用累积起来，最后一次性支付。为了实现这种想法，爱丽丝先发起一个MULTISIG交易，把可能花费的最大金额转到MULTISIG地址，但这个交易需要爱丽丝与鲍勃两个人的签名才能生效。爱丽丝在使用流量的时候，每隔一分钟就签名一次，向鲍勃支付这分钟所产生的流量费用，然后把剩余的钱转给自己，每分钟重复一次，直到挂机为止。请注意，这些交易只有爱丽丝的签名，还没有鲍勃的签名，因此，交易还没被放进区块链里。爱丽丝挂机之后，会告诉鲍勃“我用好了，你可以切断我的服务了”，此时，爱丽丝将不再支付费用，鲍勃也将切断服务，然后在爱丽丝发送的最后一个交易里签名，把它放入区块链里。<br>随着每个交易付给鲍勃的币越来越多，爱丽丝的币就会越来越少。最后一个交易会一次性向鲍勃支付所有的流量费，然后把剩余的币还给爱丽丝。整个过程中，爱丽丝单独签名的交易不会进入区块链(上面没有鲍勃的签名)，最后它们都会被丢弃掉。</p><h2 id="币基交易"><a href="#币基交易" class="headerlink" title="币基交易"></a>币基交易</h2><p>每个区块的梅克尔树上都有一个有意思的交易，叫作币基交易。这类似于财奴币里的造币交易。这个交易创造新的比特币，它看上去像是个普通的交易，但有几点不同:</p><ol><li>它永远只有一个单一的输入与单一的输出。</li><li>这个交易并不消费之前交易输出的比特币，因此，没有指针指向“上一交易”</li><li>这个输出值目前大约是25个币多一点点。这个输出值就是矿工的挖矿收它由两部分组成：一部分是奖励的25个比特币（奖励在每生产210000个区块（大概4年）后减半），另一部分是所有交易的交易手续费。</li><li>还有一个特别的地方就是“币基”参数，矿工可以放任何值进去。</li></ol><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="1-新节点加入："><a href="#1-新节点加入：" class="headerlink" title="1. 新节点加入："></a>1. 新节点加入：</h2><p>启动一个新节点，向一个已知的节点发送消息，查询是否有其他节点，重复此过程多次，选择与哪些节点相连，加入完成。</p><h2 id="2-接受新交易信息："><a href="#2-接受新交易信息：" class="headerlink" title="2. 接受新交易信息："></a>2. 接受新交易信息：</h2><p>节点接受到交易信息后将其加入到交易池，并传播到与其相连的节点，若交易池中已存在此交易，则停止传播，确保泛洪协议的自动停止。<br>（注：每个交易唯一的哈希值，所以查询是否存在效率较高）</p><h2 id="3-核验新交易信息："><a href="#3-核验新交易信息：" class="headerlink" title="3. 核验新交易信息："></a>3. 核验新交易信息：</h2><ul><li>检验交易有效，确保脚本返回值为真</li><li>检查是否存在双重交易</li><li>检验交易信息是否已经存在</li><li>接受交易的脚本必须为白名单上的脚本<br>（注：竞态条件：又称紊乱情况，指双重支付中哪个交易被存入区块链，会由下一个创建区块的节点强制决定）</li></ul><h2 id="4-传播区块"><a href="#4-传播区块" class="headerlink" title="4. 传播区块"></a>4. 传播区块</h2><p>核验一个区块要比核验一个交易复杂得多。除了确认区块头部，确定里点还必须确认区块里的每个交易。最面的哈希值是在可以接受的范围内，节后，一个节点往外传播的区块必须是最长的一条区块链上新加人的区块（“最长的区块链”取决于节点对区块链当前状态的认识）。只有这样才可一样，节点同样可以执行它自己的逻以防止区块链分叉。但就像传播交易时以选择传递在共识链上更早加入的区辑：它可以选择传递无效的区块，也可成一个分叉，不过这种情况是协议可以承受的。<br>（注：竞态条件：两个有效区块同时被挖到，哪个区块被纳入长期共识链取决于其他节点选择在哪个节点上扩展区块链）</p><h2 id="轻量节点："><a href="#轻量节点：" class="headerlink" title="轻量节点："></a>轻量节点：</h2><p>也称简单付款验证客户端，或SPV节点。SPV节点只会验证和他们相关的交易信息，只存储他们关心、需要核验的部分交易；SPV节点的区块头部大小只有区块链的千分之一，只有几十MB。</p><h1 id="限制与优化"><a href="#限制与优化" class="headerlink" title="限制与优化"></a>限制与优化</h1><h2 id="比特币的限制"><a href="#比特币的限制" class="headerlink" title="比特币的限制"></a>比特币的限制</h2><p>限制：</p><ul><li>每秒处理交易数只有7</li><li>未来比特币使用的密码算法可能被破解</li></ul><h2 id="如何优化比特币协议"><a href="#如何优化比特币协议" class="headerlink" title="如何优化比特币协议"></a>如何优化比特币协议</h2><ul><li>硬分叉：引入新的特性，使前一版本的协议失效，会使老节点认定最长的区块链分支是无效的，认为其他分支才是最长有效的，这会使原有的链分叉，老节点会永远排除在另一条链中。</li><li>软分叉：引入新的特性，使现有的核验规则更严格，老节点依旧会接受所有区块，但老节点创建的一些区块被认为是无效的，这会促使老节点更新协议。</li></ul><h1 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h1><h2 id="挖矿的步骤"><a href="#挖矿的步骤" class="headerlink" title="挖矿的步骤"></a>挖矿的步骤</h2><ul><li>监听交易广播</li><li>监听区块链，即同步其他节点的区块链历史记录，并监听、检验广播到网络中的新区块，</li><li>组装备选区块，即将监听到的合法的交易组合放入到新区块中备用</li><li>找到使备选区块合法的有效随机数</li><li>希望自己的区块被全网接受，因为有可能出现竞态条件</li><li>获得利润</li></ul><h2 id="如何寻找有效区块"><a href="#如何寻找有效区块" class="headerlink" title="如何寻找有效区块"></a>如何寻找有效区块</h2><p><img src="/2024/03/03/Web3/readingNotes/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%9A%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E9%87%91%E8%9E%8D/%E5%AF%BB%E6%89%BE%E6%9C%89%E6%95%88%E5%8C%BA%E5%9D%97.jpg"></p><p>一个区块内，可变内容为头部随机数（nonce）和币基随机数（币基交易中可放入任何值），但由于币基随机数变动后计算量更大（需要额外计算梅克尔树），所以优先变动头部随机数。</p>]]></content>
    
    
    <categories>
      
      <category>Web3</category>
      
      <category>区块链</category>
      
      <category>阅读摘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>哈希</tag>
      
      <tag>去中心化</tag>
      
      <tag>分布式共识</tag>
      
      <tag>比特币</tag>
      
      <tag>工作量证明</tag>
      
      <tag>零币</tag>
      
      <tag>虚拟挖矿</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring入门篇：IOC&amp;AOP</title>
    <link href="/2024/03/03/backend/devframe/spring/Spring_IOC&amp;AOP/"/>
    <url>/2024/03/03/backend/devframe/spring/Spring_IOC&amp;AOP/</url>
    
    <content type="html"><![CDATA[<p>本文<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="本文写于2023年初，经修正后发布于个人博客。">[1]</span></a></sup>包含：</p><ol><li>核心功能：IOC容器</li><li>核心功能：AOP面向切面编程</li></ol><h1 id="为什么要使用spring框架"><a href="#为什么要使用spring框架" class="headerlink" title="为什么要使用spring框架"></a>为什么要使用spring框架</h1><h2 id="Spring框架的历史"><a href="#Spring框架的历史" class="headerlink" title="Spring框架的历史"></a>Spring框架的历史</h2><p>Spring框架的起源可以追溯到2003年，当时Java企业版（Java EE）平台的开发模式正处在EJB（Enterprise JavaBeans）主导的时代。尽管EJB为企业级应用提供了丰富的功能，但其复杂的编程模型、重量级的架构以及部署方面的挑战让许多开发者感到困扰。正是在这种背景下，Rod Johnson在其著作《Expert One-on-One J2EE Design and Development》中阐述了一种新的、轻量级的编程范式，并随后发布了Spring框架的第一个版本。</p><p>Spring框架的诞生旨在<strong>简化企业级应用的开发过程，降低其复杂度</strong>，并倡导基于POJOs（Plain Old Java Objects）的编程方式，从而彻底改变了Java应用的开发格局。随着时间的推移，Spring逐渐发展成为一个全方位的Java应用框架，涵盖了从核心容器、数据访问、Web开发到AOP（面向切面编程）、消息传递等多个领域。</p><h2 id="Spring是什么"><a href="#Spring是什么" class="headerlink" title="Spring是什么"></a>Spring是什么</h2><p>Spring框架本质上是一个开源的、轻量级的Java应用程序框架，它不强制开发者遵循特定的设计模式或架构，而是通过提供一套全面的服务和工具来提升开发效率和应用质量。Spring的核心特性之一是<strong>Inversion of Control（IoC，控制反转）和Dependency Injection（DI，依赖注入）机制</strong>，这些设计原则使得组件之间的耦合度大大降低，提高了代码的可测试性和可维护性。</p><h2 id="为什么要使用Spring"><a href="#为什么要使用Spring" class="headerlink" title="为什么要使用Spring"></a>为什么要使用Spring</h2><p>选择Spring的理由有很多，其中包括：</p><ol><li>简化复杂性：Spring通过自身强大的容器管理对象的生命周期和依赖关系，减轻了开发者手动处理对象创建和管理的负担。</li><li>轻量级与模块化：Spring框架本身轻量且高度模块化，可以根据项目需求选择合适的模块，而不是一股脑加载所有功能，这有助于减少资源消耗并提高性能。</li><li>松耦合：通过依赖注入实现组件间的松散耦合，使得各个部分更易于复用和替换，增强了系统的灵活性和可扩展性。</li><li>广泛的兼容性与集成性：Spring能够无缝集成众多第三方库和框架，例如Hibernate、MyBatis、JPA用于持久化，或是与其他Web框架、消息队列等协同工作。</li><li>增强测试能力：Spring对单元测试的支持良好，开发者可以更容易地对代码进行隔离测试。</li><li>企业级服务：Spring提供的事务管理、安全性、远程调用等功能使得开发企业级应用更为便捷。</li></ol><p>综上所述，<strong>Spring框架不仅解决了传统企业级Java开发中的诸多痛点，而且凭借其不断发展的生态系统和持续的技术创新，成为了现代Java应用开发的事实标准之一。</strong>接下来，我们将深入探讨如何开始使用Spring框架，讲解各个特性的使用方式。</p><h1 id="开始使用Spring框架"><a href="#开始使用Spring框架" class="headerlink" title="开始使用Spring框架"></a>开始使用Spring框架</h1><h2 id="方式1：直接下载jar包"><a href="#方式1：直接下载jar包" class="headerlink" title="方式1：直接下载jar包"></a>方式1：直接下载jar包</h2><p>进入 <a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">repo.spring.io</a> 网址进行下载，完成后将5个jar文件放入工程的lib文件夹，并其加入到Project Structure设置的Modules选项卡中（注：4个spring为最基本的框架，commons开头的文件为日志功能的jar）<br>注：spring-expression是SpEL的支持，如果不使用Spring表达式语言，可去除；cpmmons-logging是日志的依赖。</p><blockquote><p>这边我使用的是Spring5，spring6的新特性主要体现在云原生方面，基础功能都是一样的。</p></blockquote><p><img src="/2024/03/03/backend/devframe/spring/Spring_IOC&AOP/lib%E4%BE%9D%E8%B5%96.png"></p><h2 id="方式2：使用maven安装依赖"><a href="#方式2：使用maven安装依赖" class="headerlink" title="方式2：使用maven安装依赖"></a>方式2：使用maven安装依赖</h2><p>先进入这个网站<a href="https://mvnrepository.com/">mvnrepository</a>。查看spring的依赖，和上面直接下载的jar包一样。<br><img src="/2024/03/03/backend/devframe/spring/Spring_IOC&AOP/rep%E4%B8%AD%E4%BE%9D%E8%B5%96.png"><br>点击对应条目，选择依赖版本，将依赖复制到pom.xml中。<br>pom.xml中最终添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h1><p>什么是IOC：<br>在传统的编程模式中，<strong>一个对象负责创建和管理它所依赖的其他对象</strong>；而采用IOC之后，对象不再自行创建或查找其所依赖的对象，而是<strong>由外部容器（如Spring框架的ApplicationContext）负责创建和管理这些依赖对象，并将它们注入到需要它们的对象中</strong>。</p><h2 id="IOC如何解耦"><a href="#IOC如何解耦" class="headerlink" title="IOC如何解耦"></a>IOC如何解耦</h2><p>IOC就是通过容器实现依赖对象的创建和管理，接下来讲讲IOC的实现方式，也就是解耦过程。</p><p>场景：UserService类需要调用UserDAO类的add()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>()&#123;<br>    <span class="hljs-keyword">private</span> UserDAO dao;<br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">register</span><span class="hljs-params">(String username,String password)</span>&#123;<br>        <span class="hljs-comment">//...</span><br>        dao.add(...);<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>很显然，UserService对象需要持有一个UserDAO对象，并通过调用add方法，才能进行注册操作。</p><h3 id="原始模式"><a href="#原始模式" class="headerlink" title="原始模式"></a>原始模式</h3><p>直接new一个UserDAO对象，并调用add()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>()&#123;<br>    <span class="hljs-keyword">private</span> UserDAO dao;<br>    &#123;<br>        dao = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDAO</span>();<br>        <span class="hljs-comment">//对dao设置一些配置，dao才能正常使用</span><br>        dao.setConfig(...);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">register</span><span class="hljs-params">(String username,String password)</span>&#123;<br>        <span class="hljs-comment">//...</span><br>        dao.add(...);<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>存在问题：强耦合、违反单一职责原则。</p><ol><li><strong>强耦合</strong>：UserService 与具体的 UserDAO 实现类紧密耦合在一起。这意味着如果未来需要更换 UserDAO 的实现（例如为了优化数据库操作或者切换到新的数据源），那么必须修改 UserService 类的内部实现。高耦合度降低了代码的可复用性和可维护性。</li><li><strong>违反单一职责原则</strong>：UserService 不仅负责业务逻辑（用户注册），还在初始化过程中负责了数据访问对象（DAO）的创建和配置。这样使得 UserService 类承担了过多的责任，不利于职责划分和代码组织。</li></ol><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>使用工厂模式对原始模式进行优化：<br>创建工厂类UserDAOFactory，内含getDAO()方法，调用其会return一个new的UserDAO类，UserService类创建一个UserFactory类并通过getDAO()方法return的UserDAO类进行调用add()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>()&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">UserDAOFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDAOFactory</span>();<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">register</span><span class="hljs-params">(String username,String password)</span>&#123;<br>        <span class="hljs-comment">//...</span><br>        factory.getDAO.add(...);<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优化点</strong>：<strong>降低耦合度</strong>：相比于直接实例化，现在 UserService 与具体的 UserDAO 实现类解耦，通过工厂类来获取 UserDAO 的实例。如果将来需要更换 UserDAO 的实现，只需要修改 UserDAOFactory 即可，无需改动 UserService。</p><p><strong>仍存在问题</strong>：<strong>隐性依赖</strong>：虽然通过工厂方法减少了直接依赖，但 UserService 依然隐性地依赖于 UserDAOFactory 的具体实现，尤其是当 UserDAOFactory 内部也含有硬编码创建 UserDAO 的时候。理想情况下，UserDAOFactory 的实例也应该由外部注入，而非在 UserService 内部创建。</p><h3 id="IOC解耦"><a href="#IOC解耦" class="headerlink" title="IOC解耦"></a>IOC解耦</h3><p>先在配置文件中定义容器如何创建Bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.dao.UserDaoImpl&quot;</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.service.UserService&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再在代码中直接使用容器注入的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>()&#123;<br>    <span class="hljs-keyword">private</span> UserDAO dao;<br>    <span class="hljs-comment">//通过set方法注入UserDAO</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">setDao</span><span class="hljs-params">(UserDAO dao)</span>&#123;<br>        <span class="hljs-built_in">this</span>.dao = dao;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">register</span><span class="hljs-params">(String username,String password)</span>&#123;<br>        <span class="hljs-comment">//...</span><br>        dao.add(...);<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//直接注入UserService以供使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-comment">//1 加载spring配置文件</span><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    <span class="hljs-comment">//2 获取配置创建的对象</span><br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>    <span class="hljs-comment">//3 直接使用已经注入完成的对象</span><br>    userService.register(...);<br>&#125;<br></code></pre></td></tr></table></figure><p>现在的优点：</p><ol><li><strong>低耦合</strong>：UserService 类不再直接创建或管理 UserDAO 的实例，而是通过Spring容器在运行时注入。这样，UserService 只关注业务逻辑，而不关心 UserDAO 的具体实现细节，大大降低了类之间的耦合度。</li><li><strong>高内聚</strong>：UserService 类专注于自身的业务逻辑实现，而 UserDAO 的创建和初始化工作交给了Spring容器，遵循了单一职责原则，提高了代码的内聚性。</li><li><strong>可配置性</strong>：通过XML配置文件定义Bean，可以在不修改任何Java代码的情况下改变系统行为。例如，可以轻易地更换 UserDAO 的实现类，只需在配置文件中修改对应的 class 属性即可。</li><li><strong>生命周期管理</strong>：Spring容器负责管理Bean的整个生命周期，包括初始化、依赖注入、销毁等阶段，简化了对象的管理，提升了整体应用的可维护性。</li></ol><hr><p>通过上述案例，应该已经可以理解IOC是如何实现解耦的了，接下来将详细介绍IOC进行<strong>依赖注入</strong>的方式。</p><h2 id="IOC接口"><a href="#IOC接口" class="headerlink" title="IOC接口"></a>IOC接口</h2><p>（IOC思想基于IOC容器实现，IOC容器底层即为对象工厂）</p><h3 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h3><p>Spring提供了两种IOC容器实现方式（即两个接口）：</p><ol><li><strong>BeanFactory</strong>：Spring内部的IOC容器的基本实现，不建议开发人员使用。（特点：懒加载——加载配置文件时不创建对象，使用对象时才创建）</li><li><strong>ApplicationContext</strong>：BeanFactory接口的子接口，功能更加强大，建议开发人员使用。（加载配置文件后就会将配置对象进行创建）<ol><li>实现类：<strong>FileSystemXmlApplicationContext</strong>，通过绝对路径加载容器配置文件，如：<code>ApplicationContext context = new FileSystemXmlApplicationContext(&quot;D:\\编程文件\\Idea_文件\\workspace_Idea\\SpringPractice\\src\\main\\resources\\bean.xml&quot;);</code></li><li>实现类：<strong>ClassPathXmlApplicationContext</strong>，通过相对src的路径的路径加载容器配置文件，如：<code>ApplicationContext context = new ClassPathXmlApplicationContext(&quot;/home/chilun/springPractice/src/main/resources/bean.xml&quot;);</code></li></ol></li></ol><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>（User类省略）<br>配置文件bean.xml：（注意：根元素中的声明不可少。）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.pojo.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>main函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>        System.out.println(user.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><blockquote><p>张三</p></blockquote><h2 id="IOC操作：创建对象与注入属性"><a href="#IOC操作：创建对象与注入属性" class="headerlink" title="IOC操作：创建对象与注入属性"></a>IOC操作：创建对象与注入属性</h2><p>Bean管理包含两类行为：</p><ol><li><strong>Spring创建对象</strong></li><li><strong>Spring注入属性</strong></li></ol><p>通常有两种实现方式：</p><ol><li><strong>XML实现</strong></li><li><strong>注解实现</strong></li></ol><p>组合起来就是4种模式，接下来将一一介绍。</p><h3 id="基于xml配置文件方式"><a href="#基于xml配置文件方式" class="headerlink" title="基于xml配置文件方式"></a>基于xml配置文件方式</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>在spring配置文件中使用bean标签，标签中添加对应属性，即可实现对象创建，如：（即完成空对象创建）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.pojo.User&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>属性讲解：</p><ul><li><strong>id</strong>：Bean对象的唯一标识。</li><li><strong>class</strong>：类的全路径。</li><li><strong>name</strong>：和id类型，用于设置多个别名，不推荐使用。</li><li><strong>factory-method</strong>：如果不是通过默认构造器创建Bean实例，而是通过静态工厂方法，则需要指定此属性，指出类中用于创建Bean的方法名称。</li><li><strong>factory-bean</strong>：当需要通过另一个Bean的实例方法来创建当前Bean时，指定创建Bean的工厂Bean的名称。</li><li><strong>scope</strong>：定义Bean的作用域，如 “singleton”（默认，单例模式）、”prototype”（原型模式）、”request”（web应用中，每个HTTP请求对应一个新的Bean实例）、”session”（web应用中，每个HTTP session对应一个新的Bean实例）等。</li><li><strong>init-method</strong>：指定在Bean实例化并且所有依赖注入完成后，需要调用的初始化方法。</li><li><strong>destroy-method</strong>：指定在Bean从容器中删除之前，需要调用的清理或资源释放方法。</li><li><strong>lazy-init</strong>：是否懒加载Bean，设为 true 时，Bean会在第一次请求时才初始化。</li></ul><p>在不设置各种属性的情况下，创建对象时默认使用无参构造器。</p><h4 id="注入属性"><a href="#注入属性" class="headerlink" title="注入属性"></a>注入属性</h4><h5 id="依赖注入概念"><a href="#依赖注入概念" class="headerlink" title="依赖注入概念"></a>依赖注入概念</h5><p>这里补充一下依赖注入（Dependency Injection, DI）的概念：<br>DI是IOC最常见的实现形式，包含构造函数注入、setter方法注入等方式。通过这些方式，<strong>容器会在运行时动态地向对象注入所需的依赖对象，而不是对象自己主动去创建或查找依赖</strong>。</p><blockquote><p><strong>IOC和DI的区别</strong>：<br>IOC是一种核心思想：将对象创建、生命周期管理和依赖关系协调的控制权从应用程序代码中转移到一个容器中，其关注的是<strong>应用程序整体架构层面的控制权转移</strong>。<br>DI是实现这思想的一种手段：当某个类需要另一个类的实例作为其运行时依赖时，不是由类自己创建这个依赖实例，而是通过外部容器。在运行时动态地将依赖注入到需要它的类中，<strong>更侧重于如何解决类与类之间依赖关系的传递问题</strong>。</p></blockquote><h5 id="基础注入"><a href="#基础注入" class="headerlink" title="基础注入"></a>基础注入</h5><p>使用set方法或使用有参构造器注入。</p><ol><li>set方法注入：属性与set方法已经定义完成，在bean标签中使用property标签完成属性注入。（name为类中属性名称，value为向属性注入的值）<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;西游记&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;吴承恩&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!--创建对象过程中会自动注入属性的值--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>有参构造器注入：属性与有参构造器已经定义完成，在bean标签中使用constructor-arg标签完成属性注入。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.Orders&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;订单1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;湖南长沙&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--或者使用index属性，index=&quot;n&quot;代表第n+1个参数</span><br><span class="hljs-comment">    &lt;constructor-arg index=&quot;0&quot; value=&quot;订单1&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="hljs-comment">    &lt;constructor-arg index=&quot;1&quot; value=&quot;湖南长沙&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="p名称空间注入"><a href="#p名称空间注入" class="headerlink" title="p名称空间注入"></a>p名称空间注入</h5><p>需要先在根元素中声明 xmlns:p 命名空间，指向Spring提供的p命名空间规范地址：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后可以直接在<code>&lt;bean&gt;</code>标签内使用<code>p:</code>前缀结合属性名来注入属性值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.Book&quot;</span> <span class="hljs-attr">p:bookName</span>=<span class="hljs-string">&quot;红楼梦&quot;</span> <span class="hljs-attr">p:bookAuthor</span>=<span class="hljs-string">&quot;曹雪芹&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="字面量注入"><a href="#字面量注入" class="headerlink" title="字面量注入"></a>字面量注入</h5><ol><li><strong>null</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <br></code></pre></td></tr></table></figure></li><li><strong>特殊符号</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span> &lt;![CDATA[&quot;&quot;&quot;&lt;&lt;@南京@&gt;&gt;&quot;&quot;&quot;]]&gt; <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-comment">&lt;!--&quot;&lt;![CDATA[具体内容]]&gt;&quot;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="对象注入"><a href="#对象注入" class="headerlink" title="对象注入"></a>对象注入</h5><ol><li><strong>内部bean</strong>：创建的bean中有属性为对象类型，在内部进行创建<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.bean.Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置两个普通属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Lily&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--设置对象属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.bean.Dept&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;人事部&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><strong>bean级联</strong>：创建的bean中有属性为对象类型，引用已有bean<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.bean.Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置两个普通属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Lily&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--设置对象属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.bean.Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;人事部&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><strong>bean级联+属性赋值</strong>：创建的bean中有属性为对象类型，引用已有bean，同时注入属性<br>要求Emp有get方法，以获得dept并进行属性注入。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.bean.Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置两个普通属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Lily&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--设置对象属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept.dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;人事部&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.bean.Dept&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h5><ol><li><strong>单独集合</strong>：集合的值不复用<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.collectiontype.Stu&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--数组类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;courses&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>高数<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>离散<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>线代<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--List类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>数据1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>数据2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>数据3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Map类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maps&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;JAVA&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;PHP&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Set类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maps&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>MySQL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>SQLite<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--List&lt;Course&gt;类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;courseList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;course1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;course1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 其余泛型集合自行类推 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;course1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.collectiontype.Course&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Qt的基本使用&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;course2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.collectiontype.Course&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opencv的基本使用&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><strong>公共集合</strong>：部分集合值为公共值<br>需要在根目录中补充util名称空间<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/util </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--1.提取list集合类型注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--2.提取list集合类型注入使用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.collectiontype.Book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="外部属性文件注入"><a href="#外部属性文件注入" class="headerlink" title="外部属性文件注入"></a>外部属性文件注入</h5><p>如德鲁伊连接池的DataSource。</p><ol><li><strong>直接设置bean</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20030322&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><strong>通过jdbc.properties配置文件设置bean</strong><br>添加配置文件：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">prop.driverClass</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">prop.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/userDb<br><span class="hljs-attr">prop.username</span>=root<br><span class="hljs-attr">prop.password</span>=<span class="hljs-number">20030322</span><br></code></pre></td></tr></table></figure>在bean中引入配置文件：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!---引入context名称空间--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/util </span></span><br><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/util/spring-util.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/context </span></span><br><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--引入外部属性文件--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br>     <span class="hljs-comment">&lt;!--配置连接池--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 获取properties文件内容，根据key获取，使用spring表达式获取 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.driverClass&#125;&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.url&#125;&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.username&#125;&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.password&#125;&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="基于注解方式"><a href="#基于注解方式" class="headerlink" title="基于注解方式"></a>基于注解方式</h3><p>使用注解的目的：简化xml配置。<br>注解格式：@注解名称(属性名称&#x3D;属性值, 属性名称&#x3D;属性值…)。<br>注解位置：类、方法、属性等上方。</p><h4 id="创建对象-1"><a href="#创建对象-1" class="headerlink" title="创建对象"></a>创建对象</h4><h5 id="补充spring-aop依赖"><a href="#补充spring-aop依赖" class="headerlink" title="补充spring-aop依赖"></a>补充spring-aop依赖</h5><p>下载jar包：<img src="/2024/03/03/backend/devframe/spring/Spring_IOC&AOP/lib-aop.png"></p><p>Maven：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="Spring针对Bean管理中创建对象提供的注解："><a href="#Spring针对Bean管理中创建对象提供的注解：" class="headerlink" title="Spring针对Bean管理中创建对象提供的注解："></a>Spring针对Bean管理中创建对象提供的注解：</h5><ul><li>@Component</li><li>@Service</li><li>@Controller</li><li>@Repository</li></ul><p>以上4个注解功能相同，都用来创建bean实例。</p><h5 id="开启组件扫描"><a href="#开启组件扫描" class="headerlink" title="开启组件扫描"></a>开启组件扫描</h5><p>引入context名称空间，并开启组件扫描，即可使用注解方式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/util </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/util/spring-util.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开启组件扫描</span><br><span class="hljs-comment">        多个包可使用逗号隔开：com.chilun.spring5,com.chilun.spring6</span><br><span class="hljs-comment">        或扫描包的上层目录：com.chilun</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.chilun.spring5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>组件扫描配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.chilun&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>use-default-filters属性：false表示不使用默认的filter，使用自己配置的filter。</li><li>context:include-filter标签（类似白名单）：设置扫描特定内容（如org.springframework.stereotype.Controller，即扫描注解为@Controller的类）</li><li>context:exclude-filter标签（类似黑名单）：设置特定内容不扫描。</li></ul><h5 id="创建对象-2"><a href="#创建对象-2" class="headerlink" title="创建对象"></a>创建对象</h5><p>创建类，并在类上添加注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//value属性可以省略，默认值为首字母小写的类名称，如：UserService-&gt;userService</span><br><span class="hljs-meta">@Service(value = &quot;userService&quot;)</span><span class="hljs-comment">//=&lt;bean id=&quot;userService&quot; class=&quot;...&quot;/&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;service add.....&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//之后即可直接获得</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>    userService.add();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h4><p>如：实现service中调用dao类中方法。</p><ol><li>在service和dao类上方都添加创建对象注释<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-comment">//配合AutoWired或Resource</span><br><span class="hljs-comment">//@Repository(value = &quot;userDaoImpl1&quot;)//配合Qualifier或Resource</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;dao add.....&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">//定义dao类型属性</span><br>    <span class="hljs-comment">//@Autowired</span><br>    <span class="hljs-comment">//@Qualifier(value = &quot;userDaoImpl1&quot;)</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        userDao.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在service中注入dao类对象，service中加入dao属性（可以不添加set方法），属性上方添加注解。<ol><li><strong>@AutoWired</strong>：根据属性类型自动装配。<code>@Repository</code>,<code>@Autowired</code>。</li><li><strong>@Qualifier</strong>：根据名称类型自动装配：<code>@Repository(value = &quot;userDaoImpl1&quot;)</code>，<code>@Qualifier(value = &quot;userDaoImpl1&quot;)</code>。</li><li><strong>@Resource</strong>：根据名称或类型自动装配。（需import javax.annotation.Resource;）<code>@Repository</code>，<code>@Resource</code>。</li><li><strong>@Value</strong>：注入普通类型属性。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Value(value = &quot;abc&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="IOC容器底层"><a href="#IOC容器底层" class="headerlink" title="IOC容器底层"></a>IOC容器底层</h2><h3 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h3><ol><li>容器通过工具类（如BeanDefinitionReader）对配置信息文件（通常为xml）进行解析和分析</li><li>将分析后的信息编组为BeanDefinition</li><li>将BeanDefinition注册到相应的BeanDefinitionRegistry</li></ol><h3 id="Bean实例化"><a href="#Bean实例化" class="headerlink" title="Bean实例化"></a>Bean实例化</h3><p>请求方通过容器的getBean方法请求对象时，或隐式调用getBean时就会触发第二阶段的活动</p><ol><li>检查所请求的对象之前是否已经初始化</li><li>若没有，则根据BeanDefinition的信息实例化被请求对象，并注入依赖</li><li>容器将其返回请求方</li></ol><h3 id="Bean类型"><a href="#Bean类型" class="headerlink" title="Bean类型"></a>Bean类型</h3><ol><li><p><strong>普通Bean</strong>：在xml配置文件中定义的bean类型就是返回的类型。如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">xml:<br>&lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.collectiontype.Book&quot;</span>/&gt;<br>java：<br>Book book = context.getBean(<span class="hljs-string">&quot;book&quot;</span>,Book.<span class="hljs-built_in">class</span>);<br></code></pre></td></tr></table></figure></li><li><p><strong>工厂Bean</strong>：在xml配置文件中定义的bean类型可以和返回类型不同。实现步骤：</p><ol><li>创建类，作为工厂bean，实现接口FactoryBean</li><li>实现方法，在方法中定义返回的bean类型</li></ol><p>如：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//&lt;bean id=&quot;myBean&quot; class=&quot;com.chilun.spring5.factorybean.MyBean&quot;/&gt;</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Book&gt; &#123;<br>    <span class="hljs-comment">//getObject方法定义返回类型</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;123&quot;</span>);<br>        book.setList(list);<br>        <span class="hljs-keyword">return</span> book;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> FactoryBean.<span class="hljs-built_in">super</span>.isSingleton();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>,Book.class);<br>        book.test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域"></a>Bean作用域</h3><ol><li>Spring中可设置bean实例为单实例或多实例。</li><li>默认情况bean为单实例对象。</li><li>如何设置为单实例或多实例（通过scope属性）：<ol><li>singleton（默认）：单实例</li><li>prototype：多实例 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.spring5.Book&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookList&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>singleton与prototype的其他区别：scope为singleton时，加载spring配置文件时就会创建单实例对象；scope为prototype时，调用getBean方法时创建多实例对象</li><li>其他值：request（每次请求）、session（每个对话）</li></ol></li></ol><h3 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期"></a>Bean生命周期</h3><p>生命周期是指对象从创建到销毁的全过程。</p><ol><li>bean生命周期<ol><li>通过构造器创建bean实例（无参构造器）</li><li>为bean的属性设置值、对其他bean调用引用（调用set方法）</li><li>调用bean的初始化方法（需要配置初始化方法）（使用bean中的init-method属性设置初始化方法）</li><li>bean可使用</li><li>容器关闭时，调用bean的销毁方法（需配置销毁方法）（使用bean中的destroy-method属性设置销毁方法）</li></ol></li><li>演示：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.pojo.Orders&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;手机&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Orders</span> &#123;<br>    <span class="hljs-comment">//无参数构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Orders</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第一步 执行无参数构造创建bean实例&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> String oname;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOname</span><span class="hljs-params">(String oname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.oname = oname;<br>        System.out.println(<span class="hljs-string">&quot;第二步 调用set方法设置属性值&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//创建执行的初始化的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第三步 执行初始化的方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//创建执行的销毁的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第五步 执行销毁的方法&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;orders&quot;</span>, Orders.class);<br>    System.out.println(<span class="hljs-string">&quot;第四步 获取创建bean实例对象&quot;</span>);<br>    System.out.println(orders);<br>    <span class="hljs-comment">//手动让bean实例销毁</span><br>    context.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>输出：</p><blockquote><p>第一步 执行无参数构造创建bean实例<br>第二步 调用set方法设置属性值<br>第三步 执行初始化的方法<br>第四步 获取创建bean实例对象<br>com.chilun.pojo.Orders@18ce0030<br>第五步 执行销毁的方法</p></blockquote><h4 id="bean的后置处理器"><a href="#bean的后置处理器" class="headerlink" title="bean的后置处理器"></a>bean的后置处理器</h4><p>使用后bean生命周期为7步：</p><ol><li>通过构造器创建bean实例（无参构造器）</li><li>为bean的属性设置值、对其他bean调用引用（调用set方法）</li><li>将bean实例传递给bean的后置处理器的postProcessBeforeInitialization方法</li><li>调用bean的初始化方法（需要配置初始化方法）（使用bean中的init-method属性设置初始化方法）</li><li>将bean实例传递给bean的后置处理器的postProcessAfterInitialization方法</li><li>bean可使用</li><li>容器关闭时，调用bean的销毁方法（需配置销毁方法）（使用bean中的destroy-method属性设置销毁方法）</li></ol><p>使用后置处理器：</p><ol><li>创建类，实现接口BeanPostProcessor（重写postProcessBeforeInitialization方法和postProcessAfterInitialization方法），创建后置处理器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanPost</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;后置处理器：在Bean初始化之前执行的方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;后置处理器：在Bean初始化之后执行的方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>更改配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.pojo.Orders&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;手机&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置后置处理器，为当前配置文件中的所有bean添加后置处理器。可以通过在后置处理器的实现中检查beanName或者bean的类型，或者检查Bean是否有特定的注解来决定是否执行后置处理操作。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBeanPost&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.post.MyBeanPost&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>输出：<blockquote><p>第一步 执行无参数构造创建bean实例<br>第二步 调用set方法设置属性值<br>后置处理器：在Bean初始化之前执行的方法<br>第三步 执行初始化的方法<br>后置处理器：在Bean初始化之后执行的方法<br>第四步 获取创建bean实例对象<br>com.chilun.pojo.Orders@54c562f7<br>第五步 执行销毁的方法</p></blockquote></li></ol><h4 id="更详细的Bean生命周期："><a href="#更详细的Bean生命周期：" class="headerlink" title="更详细的Bean生命周期："></a>更详细的Bean生命周期：</h4><ol><li><strong>加载到 JVM</strong>：Spring 容器在启动时，会解析配置文件或扫描注解，创建相应的 BeanDefinition，并将其存储在 BeanDefinitionMap 中。BeanDefinitionMap 是一个 Map，它将 Bean 的名称映射到 BeanDefinition 实例。</li><li><strong>实例化</strong>：当容器需要创建 Bean 时，它会根据 BeanDefinition 的信息创建相应的 Bean 实例。这一步骤通常由 BeanDefinitionReader 和 BeanFactory 负责。BeanFactory 是容器的核心接口，它实际上是一个工厂模式的实现，用于实例化和管理 Bean。在容器启动时，会初始化 BeanFactory，BeanFactory 会根据 BeanDefinition 创建 Bean 实例。</li><li><strong>属性注入</strong>：在实例化后，容器会根据 BeanDefinition 中的属性值配置来进行属性注入。这一过程由 BeanDefinitionMap 中的 BeanDefinition 实例提供的属性信息来完成。</li><li><strong>初始化前的函数调用</strong>：如果 Bean 实现了 BeanNameAware 或 BeanFactoryAware 接口，容器会在实例化后，但在初始化之前，调用相应的方法，使 Bean 可以获取 Bean 的名称或容器的引用；BeanPostProcessor 的实现类也会被调用，允许对 Bean 进行一些前置处理，这一阶段的处理由 AbstractAutowireCapableBeanFactory 的 applyBeanPostProcessorsBeforeInitialization 方法负责。</li><li><strong>初始化</strong>：如果 Bean 实现了 InitializingBean 接口或在 BeanDefinition 中通过 init-method 属性指定了初始化方法，容器会在 Bean 实例化和属性注入之后调用相应的方法，执行 Bean 的初始化逻辑。</li><li><strong>初始化后的函数调用</strong>：在 Bean 初始化之后，BeanPostProcessor 的实现类会被调用，允许对 Bean 进行一些后置处理。这一阶段的处理由 AbstractAutowireCapableBeanFactory 的 applyBeanPostProcessorsAfterInitialization 方法负责。</li><li><strong>Bean使用</strong>。</li><li><strong>销毁</strong>：如果 Bean 实现了 DisposableBean 接口，或者在配置中通过 destroy-method 属性指定了销毁方法，容器会在 Bean 销毁阶段调用相应的方法，执行 Bean 的销毁逻辑。这一过程由 DisposableBean 接口的 destroy 方法或在 BeanDefinition 中指定的 destroy-method 属性负责。</li></ol><h1 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h1><h2 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h2><h3 id="面向切面编程"><a href="#面向切面编程" class="headerlink" title="面向切面编程"></a>面向切面编程</h3><p>AOP(Aspect-Oriented Programming的简称)，也就是面向切面编程的意思，它是一种编程思想，在Spring的官方文档中描述: <strong>面向切面编程(AOP)提供了另一种思考程序结构的方式来对面向对象编程(OOP)的进行补充和完善，面向对象编程(OOP)中关键的是对象，而面向切面编程(AOP)中关键的是切面。</strong><br>AOP中切面可以实现关注点的模块化(即统一抽取，提高复用)，例如跨越多种类型和对象的事务管理，这种关注点在 AOP 文献中通常被称为横切关注点。<br><img src="/2024/03/03/backend/devframe/spring/Spring_IOC&AOP/aop_introduction.png"></p><p>单单看文字描述可能比较抽象，下面我们通过具体例子结合图片来形象化这些概念。<br>假如有两个洗澡函数：<br>男函数： 脱衣服、唱歌、洗脸、洗头、洗身体、擦干身体、穿衣服<br>女函数： 脱衣服、洗脸、洗头、护发、洗身体、擦干身体、护肤、穿衣服<br>发现问题： 通过上面的例子，我们会发现无论男女，<strong>脱衣服、穿衣服是洗澡不可缺少的步骤，而且这两个步骤在“洗澡”这个业务不是核心，它只是一个关注点</strong>，因为脱衣服和穿衣服的场景并不只是在洗澡中存在，就比如: 天气热我们需要脱衣服，天气冷我们需要穿衣服，所以，<strong>将衣服的管理定义成一个模块，然后在需要的地方调用才是是一个更加合理的设计</strong>，具体如下图：<br><img src="/2024/03/03/backend/devframe/spring/Spring_IOC&AOP/aop_%E6%B4%97%E6%BE%A1.png"></p><p>如最常用的日志以及事务功能，它们都可能是横向的分布在不通的业务层级(对象层级)中，但是又和具体的核心业务无直接关系，诸如这样类型的代码，在程序中被称作**横切(cross cutting)**，我们应该考虑将这一类代码进行统一管理，提高复用性。</p><p><strong>面向切面编程(AOP)就是将这类与核心业务无关的，但又影响着多个类的公共行为抽取、封装到一个可重用模块，从而实现代码复用和模块解耦的目的，这种开发思想则被称为面向切面编程。</strong></p><blockquote><p>通俗解释：不通过修改源代码方式，在主干功能里面添加新功能：<br><img src="/2024/03/03/backend/devframe/spring/Spring_IOC&AOP/aop_%E6%9D%83%E9%99%90%E5%88%A4%E6%96%AD.png"></p></blockquote><h2 id="AOP底层原理"><a href="#AOP底层原理" class="headerlink" title="AOP底层原理"></a>AOP底层原理</h2><p>Spring AOP底层使用动态代理实现：</p><ol><li>当目标类有接口时，Spring AOP 会选择使用 <strong>JDK 动态代理机制</strong>来创建代理对象。JDK 动态代理通过 java.lang.reflect.Proxy 类及其 newProxyInstance() 方法来创建代理，并且需要用户提供一个实现了 InvocationHandler 接口的类，这个类负责处理代理对象上的方法调用，并在调用前后插入切面逻辑。</li><li>当目标类没有实现任何接口时，由于 JDK 动态代理无法直接应用于类，Spring AOP 将自动转而<strong>使用 CGLIB 库</strong>来生成代理类，这个代理类继承自目标类并重写其中的方法，在方法调用前后同样执行切面逻辑。</li></ol><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>为方便理解底层实现，使用Proxy手动实现代理进行演示。</p><ol><li>使用Proxy类的方法创建代理对象<br><strong>调用newProxyInstance方法</strong><br>方法源码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Returns a proxy instance for the specified interfaces</span><br><span class="hljs-comment">* that dispatches method invocations to the specified invocation</span><br><span class="hljs-comment">* handler.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@CallerSensitive</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader,</span><br><span class="hljs-params">                                      Class&lt;?&gt;[] interfaces,</span><br><span class="hljs-params">                                      InvocationHandler h)</span> &#123;<br>    Objects.requireNonNull(h);<br><br>    <span class="hljs-keyword">final</span> Class&lt;?&gt; caller = System.getSecurityManager() == <span class="hljs-literal">null</span><br>                                ? <span class="hljs-literal">null</span><br>                                : Reflection.getCallerClass();<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Look up or generate the designated proxy class and its constructor.</span><br><span class="hljs-comment">     */</span><br>    Constructor&lt;?&gt; cons = getProxyConstructor(caller, loader, interfaces);<br><br>    <span class="hljs-keyword">return</span> newProxyInstance(caller, cons, h);<br>&#125;<br></code></pre></td></tr></table></figure>newProxyInstance方法的三个参数：</li></ol><ul><li>类加载器</li><li>增强方法所在类的接口（可为多个）</li><li>实现接口InvocationHandler的类，创建代理对象，写增强的方法</li></ul><ol start="2"><li>代码演示：<ol><li><strong>创建接口</strong>，定义方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>创建接口实现类</strong>，实现方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span> &#123;<br>        System.out.println(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用Proxy创建接口代理对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建接口代理对象</span><br>        Class[] interfaces = &#123;UserDao.class&#125;;<br>        <span class="hljs-type">UserDaoImpl</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">dao</span> <span class="hljs-operator">=</span> (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoProxy</span>(userDao));<br>        <span class="hljs-comment">//执行代理方法</span><br>        System.out.println(dao.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-comment">//1.获得被代理对象</span><br>    <span class="hljs-comment">//有参构造传递</span><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoProxy</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-built_in">this</span>.obj = obj;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//方法之前</span><br>        System.out.println(<span class="hljs-string">&quot;执行方法之前...&quot;</span> + method.getName() + <span class="hljs-string">&quot;参数：&quot;</span> + Arrays.toString(args));<br>        <span class="hljs-comment">//被增强的方法执行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> method.invoke(obj, args);<br>        <span class="hljs-comment">//方法之后</span><br>        System.out.println(<span class="hljs-string">&quot;执行方法之后...&quot;</span> + obj);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="AOP专业术语"><a href="#AOP专业术语" class="headerlink" title="AOP专业术语"></a>AOP专业术语</h2><ol><li>连接点：类中<strong>可以</strong>被增强的方法被称为连接点。</li><li>切入点：类中<strong>真正被增强</strong>的方法被称为切入点。</li><li>通知：类中实际增强的逻辑部分被称为通知（又称增强）。</li><li>切面：将通知应用到切入点的过程称为切面。</li></ol><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><ol><li>作用：标注对特定类的特定方法进行增强</li><li>语法结构：<code>execution([权限修饰符] [返回类型] [类全路径] [方法名称](参数列表)</code></li></ol><p>权限修饰符可省略，可用 <code>*</code> 代表全部类型。<br>一个方法参数可以使用 <code>*</code> 号代替；如果想代表方法的任意参数，可使用 <code>..</code>。</p><ul><li>例1：对com.chilun.dao.BookDao类中的add方法增强<br><code>execution(* com.chilun.dao.BookDao.add(..))</code></li><li>例2：对com.chilun.dao.BookDao类中的所有方法增强<br><code>execution(* com.chilun.dao.BookDao.*(..))</code></li><li>例3：对com.chilun.dao包中的所有类中的所有方法增强<br><code>execution(* com.chilun.dao.*.*(..))</code></li></ul><h3 id="通知（又称增强）"><a href="#通知（又称增强）" class="headerlink" title="通知（又称增强）"></a>通知（又称增强）</h3><p>通知有多种类型：</p><ul><li>前置通知@Before</li><li>后置通知@AfterReturning</li><li>环绕通知@Around</li><li>异常通知@AfterThrowing</li><li>最终通知@After</li></ul><h2 id="AOP操作"><a href="#AOP操作" class="headerlink" title="AOP操作"></a>AOP操作</h2><p>Spring 自身提供了 AOP 支持，但若要利用 AspectJ 的注解驱动风格（如 @Aspect、@Before、@After、@Around 等）进行更复杂、更强大的切面编程，则通常需要添加 AspectJ 相关的依赖项。</p><h3 id="AspectJ介绍"><a href="#AspectJ介绍" class="headerlink" title="AspectJ介绍"></a>AspectJ介绍</h3><p>AspectJ不是Spring组成部分，是独立的AOP框架，一般将AspectJ和Spring框架一起使用，进行AOP操作。<br>准备工作：引入AspectJ相关依赖。<br><img src="/2024/03/03/backend/devframe/spring/Spring_IOC&AOP/aop_%E4%BE%9D%E8%B5%961.png"><br><img src="/2024/03/03/backend/devframe/spring/Spring_IOC&AOP/aop_%E4%BE%9D%E8%B5%962.png"></p><p>或使用Maven导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjrt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="基于AspectJ实现AOP操作"><a href="#基于AspectJ实现AOP操作" class="headerlink" title="基于AspectJ实现AOP操作"></a>基于AspectJ实现AOP操作</h3><h4 id="基于注解方式（主要）"><a href="#基于注解方式（主要）" class="headerlink" title="基于注解方式（主要）"></a>基于注解方式（主要）</h4><h5 id="1-创建被增强类，定义方法"><a href="#1-创建被增强类，定义方法" class="headerlink" title="1. 创建被增强类，定义方法"></a>1. 创建被增强类，定义方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//被增强类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;add.......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-创建增强类（编写增强逻辑）"><a href="#2-创建增强类（编写增强逻辑）" class="headerlink" title="2. 创建增强类（编写增强逻辑）"></a>2. 创建增强类（编写增强逻辑）</h5><p>在增强类里面，创建方法，让不同方法代表不同通知类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//增强的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-通知配置"><a href="#3-通知配置" class="headerlink" title="3. 通知配置"></a>3. 通知配置</h5><ul><li>在Spring配置中开启注解扫描、开启生成代理对象。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开启注解扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.chilun&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--在Spring配置文件中开启生成代理对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>使用注解创建User和UserProxy对象；在增强类上方添加注解@Aspect。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用注解创建User和UserProxy对象</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;add.......&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//使用注解创建User和UserProxy对象</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//在增强类上方添加注解@Aspect</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="4-配置不同类型通知"><a href="#4-配置不同类型通知" class="headerlink" title="4. 配置不同类型通知"></a>4. 配置不同类型通知</h5><p>在增强类中，在通知方法上方添加通知类型注解，使用切入点表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-comment">//@Before注解表示前置通知</span><br>    <span class="hljs-meta">@Before(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    user.add();<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><blockquote><p>before……<br>add…….</p></blockquote><p>测试代码2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-comment">//@Before注解表示前置通知</span><br>    <span class="hljs-meta">@Before(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Before......&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//@After注解表示最终通知</span><br>    <span class="hljs-meta">@After(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;After......&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//@AfterReturning注解表示后置通知/返回通知</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;AfterReturning......&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//@AfterThrowing注解表示异常通知</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;AfterThrowing......&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//@Around注解表示环绕通知</span><br>    <span class="hljs-meta">@Around(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;Around前......&quot;</span>);<br><br>        <span class="hljs-comment">//被增强方法执行</span><br>        proceedingJoinPoint.proceed();<br><br>        System.out.println(<span class="hljs-string">&quot;Around后......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><blockquote><p>Around前……<br>Before……<br>add…….<br>AfterReturning……<br>After……<br>Around后……</p></blockquote><h5 id="公共切入点抽取-Pointcut"><a href="#公共切入点抽取-Pointcut" class="headerlink" title="公共切入点抽取@Pointcut"></a>公共切入点抽取@Pointcut</h5><p>通过将多个通知方法共享的切入点表达式抽象成一个单独的 @Pointcut 方法，避免了在多个通知中重复编写相同的切入点表达式，从而减少冗余代码。<br>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//相同切入点抽取</span><br><span class="hljs-meta">@Pointcut(value = &quot;execution(* com.chilun.pojo.User.add(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointDemo</span><span class="hljs-params">()</span> &#123;<br>&#125;<br><span class="hljs-comment">//@Before注解表示前置通知</span><br><span class="hljs-meta">@Before(value = &quot;pointDemo()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Before......&quot;</span>);<br>&#125;<br><span class="hljs-comment">//@After注解表示后置通知</span><br><span class="hljs-meta">@After(value = &quot;pointDemo()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;After......&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><blockquote><p>Before……<br>add…….<br>After……</p></blockquote><h5 id="多个增强类对应同一个方法增强，可设置优先级"><a href="#多个增强类对应同一个方法增强，可设置优先级" class="headerlink" title="多个增强类对应同一个方法增强，可设置优先级"></a>多个增强类对应同一个方法增强，可设置优先级</h5><p>在增强类上面添加注解@Order(自然数)，值越小，优先级越高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span><span class="hljs-comment">//.....</span><br></code></pre></td></tr></table></figure><h4 id="基于xml配置文件实现"><a href="#基于xml配置文件实现" class="headerlink" title="基于xml配置文件实现"></a>基于xml配置文件实现</h4><ol><li>创建增强类和被增强类，创建方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;add.......&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Before......&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//测试代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    user.add();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在spring配置文件中创建两个类对象</li><li>在spring配置文件中配置切入点<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 2.创建对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.pojo.User&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userProxy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.chilun.pojo.UserProxy&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 3.配置aop增强 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 切入点 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.chilun.pojo.User.add(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置切面 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userProxy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 增强作用在具体的方法上 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;p&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>输出：</p><blockquote><p>Before……<br>add…….</p></blockquote><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>本文写于2023年初，经修正后发布于个人博客。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>后端开发</category>
      
      <category>框架</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>IOC</tag>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>分类</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>标签</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
